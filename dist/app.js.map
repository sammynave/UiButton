{"version":3,"file":"app.js","sources":["../../node_modules/@glimmer/util/dist/modules/es2017/lib/platform-utils.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/assert.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/object-utils.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/guid.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/collections.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/list-utils.js","../../node_modules/@glimmer/util/dist/modules/es2017/lib/array-utils.js","../../node_modules/@glimmer/reference/dist/modules/es2017/lib/validators.js","../../node_modules/@glimmer/reference/dist/modules/es2017/lib/const.js","../../node_modules/@glimmer/reference/dist/modules/es2017/lib/iterable.js","../../node_modules/@glimmer/component/packages/@glimmer/component/src/tracked.ts","../../node_modules/@glimmer/component/packages/@glimmer/component/src/capabilities.ts","../../node_modules/@glimmer/di/dist/modules/es2017/src/container.ts","../../node_modules/@glimmer/di/dist/modules/es2017/src/registry.ts","../../node_modules/@glimmer/di/dist/modules/es2017/src/owner.ts","../../node_modules/@glimmer/component/packages/@glimmer/component/src/bounds.ts","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/opcodes.js","../../node_modules/@glimmer/vm/dist/modules/es2017/lib/registers.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/references.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/expressions/concat.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/assert.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/expressions.js","../../node_modules/@glimmer/wire-format/dist/modules/es2017/lib/opcodes.js","../../node_modules/@glimmer/wire-format/dist/modules/es2017/index.js","../../node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/client-side.js","../../node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/syntax.js","../../node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/compilable-template.js","../../node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/wrapped-component.js","../../node_modules/@glimmer/encoder/dist/modules/es2017/lib/encoder.js","../../node_modules/@glimmer/opcode-compiler/dist/modules/es2017/lib/opcode-builder.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/arguments.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/curried-component.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/content.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/vm.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/dom.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/resolve.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/curry-component.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/normalize.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/references/class-list.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/capabilities.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/component.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/debugger.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/partial.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compiled/opcodes/lists.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/bounds.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/svg-inner-html-fix.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/compat/text-node-merging-fix.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/helper.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/sanitized-values.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/dom/props.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/attributes/dynamic.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/environment.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/low-level.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/dynamic.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/text.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/node.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/content/html.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/element-builder.js","../../node_modules/@glimmer/low-level/dist/modules/es2017/lib/asm/stack.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/stack.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/update.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/render-result.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/append.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/template.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/component/interfaces.js","../../node_modules/@glimmer/runtime/dist/modules/es2017/lib/vm/rehydrate-builder.js","../../node_modules/@glimmer/component/packages/@glimmer/component/src/references.ts","../../node_modules/@glimmer/component/packages/@glimmer/component/src/component-manager.ts","../../node_modules/@glimmer/web-component/dist/modules/es2017/src/initialize-custom-elements.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/application-registry.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/dynamic-scope.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/iterable.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/environment.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/application.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/loaders/runtime-compiler/typed-registry.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/loaders/runtime-compiler/resolver.ts","../../node_modules/@glimmer/program/dist/modules/es2017/lib/constants.js","../../node_modules/@glimmer/program/dist/modules/es2017/lib/opcode.js","../../node_modules/@glimmer/program/dist/modules/es2017/lib/program.js","../../node_modules/@glimmer/application/dist/modules/es2017/src/templates/main.js","../../node_modules/@glimmer/application/packages/@glimmer/application/src/helpers/action.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/helpers/if.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/loaders/runtime-compiler/compile-time-lookup.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/loaders/runtime-compiler/loader.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/builders/dom-builder.ts","../../node_modules/@glimmer/application/packages/@glimmer/application/src/renderers/sync-renderer.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/owner.ts","../../node_modules/@glimmer/resolver/node_modules/@glimmer/di/dist/modules/es2017/src/specifier.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/utils/debug.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/utils/specifiers.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/resolver.ts","../../node_modules/@glimmer/resolver/dist/modules/es2017/src/module-registries/basic-registry.ts","src/ui/components/UiButton/component.ts","src/ui/components/UiButton/template.ts","config/module-map.js","config/resolver-configuration.js","src/main.ts","src/index.ts"],"sourcesContent":["export function unwrap(val) {\n    if (val === null || val === undefined) throw new Error(`Expected value to be present`);\n    return val;\n}\nexport function expect(val, message) {\n    if (val === null || val === undefined) throw new Error(message);\n    return val;\n}\nexport function unreachable(message = \"unreachable\") {\n    return new Error(message);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxhdGZvcm0tdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9wbGF0Zm9ybS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxBQUFNLHVCQUFvQixBQUFhO0FBQ3JDLEFBQUUsQUFBQyxRQUFDLEFBQUcsUUFBSyxBQUFJLFFBQUksQUFBRyxRQUFLLEFBQVMsQUFBQyxXQUFDLE1BQU0sSUFBSSxBQUFLLEFBQUMsTUFBOEIsQUFBQyxBQUFDO0FBQ3ZGLEFBQU0sV0FBQyxBQUFRLEFBQUMsQUFDbEI7QUFBQztBQUVELEFBQU0sdUJBQW9CLEFBQWEsS0FBRSxBQUFlO0FBQ3RELEFBQUUsQUFBQyxRQUFDLEFBQUcsUUFBSyxBQUFJLFFBQUksQUFBRyxRQUFLLEFBQVMsQUFBQyxXQUFDLE1BQU0sSUFBSSxBQUFLLE1BQUMsQUFBTyxBQUFDLEFBQUM7QUFDaEUsQUFBTSxXQUFDLEFBQVEsQUFBQyxBQUNsQjtBQUFDO0FBRUQsQUFBTSw0QkFBc0IsQUFBTyxVQUFHLEFBQWE7QUFDakQsQUFBTSxXQUFDLElBQUksQUFBSyxNQUFDLEFBQU8sQUFBQyxBQUFDLEFBQzVCO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBPcGFxdWUgPSB7fSB8IHZvaWQgfCBudWxsIHwgdW5kZWZpbmVkO1xuZXhwb3J0IHR5cGUgT3B0aW9uPFQ+ID0gVCB8IG51bGw7XG5leHBvcnQgdHlwZSBNYXliZTxUPiA9IE9wdGlvbjxUPiB8IHVuZGVmaW5lZCB8IHZvaWQ7XG5cbmV4cG9ydCB0eXBlIEZhY3Rvcnk8VD4gPSBuZXcgKC4uLmFyZ3M6IE9wYXF1ZVtdKSA9PiBUO1xuXG5leHBvcnQgZnVuY3Rpb24gdW53cmFwPFQ+KHZhbDogTWF5YmU8VD4pOiBUIHtcbiAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCB2YWx1ZSB0byBiZSBwcmVzZW50YCk7XG4gIHJldHVybiB2YWwgYXMgVDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGV4cGVjdDxUPih2YWw6IE1heWJlPFQ+LCBtZXNzYWdlOiBzdHJpbmcpOiBUIHtcbiAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gdmFsIGFzIFQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnJlYWNoYWJsZShtZXNzYWdlID0gXCJ1bnJlYWNoYWJsZVwiKTogRXJyb3Ige1xuICByZXR1cm4gbmV3IEVycm9yKG1lc3NhZ2UpO1xufVxuIl19","// import Logger from './logger';\n// let alreadyWarned = false;\nexport function debugAssert(test, msg) {\n    // if (!alreadyWarned) {\n    //   alreadyWarned = true;\n    //   Logger.warn(\"Don't leave debug assertions on in public builds\");\n    // }\n    if (!test) {\n        throw new Error(msg || \"assertion failure\");\n    }\n}\nexport function prodAssert() {}\nexport default debugAssert;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvdXRpbC9saWIvYXNzZXJ0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQWlDO0FBRWpDLEFBQTZCO0FBRTdCLEFBQU0sNEJBQXNCLEFBQVMsTUFBRSxBQUFXO0FBQ2hELEFBQXdCO0FBQ3hCLEFBQTBCO0FBQzFCLEFBQXFFO0FBQ3JFLEFBQUk7QUFFSixBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQUksQUFBQyxNQUFDLEFBQUM7QUFDVixjQUFNLElBQUksQUFBSyxNQUFDLEFBQUcsT0FBSSxBQUFtQixBQUFDLEFBQUMsQUFDOUM7QUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFNLDZCQUF3QixDQUFDO0FBRS9CLGVBQWUsQUFBVyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IExvZ2dlciBmcm9tICcuL2xvZ2dlcic7XG5cbi8vIGxldCBhbHJlYWR5V2FybmVkID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z0Fzc2VydCh0ZXN0OiBhbnksIG1zZzogc3RyaW5nKSB7XG4gIC8vIGlmICghYWxyZWFkeVdhcm5lZCkge1xuICAvLyAgIGFscmVhZHlXYXJuZWQgPSB0cnVlO1xuICAvLyAgIExvZ2dlci53YXJuKFwiRG9uJ3QgbGVhdmUgZGVidWcgYXNzZXJ0aW9ucyBvbiBpbiBwdWJsaWMgYnVpbGRzXCIpO1xuICAvLyB9XG5cbiAgaWYgKCF0ZXN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1zZyB8fCBcImFzc2VydGlvbiBmYWlsdXJlXCIpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kQXNzZXJ0KCkge31cblxuZXhwb3J0IGRlZmF1bHQgZGVidWdBc3NlcnQ7XG4iXX0=","const { keys: objKeys } = Object;\nexport function assign(obj) {\n    for (let i = 1; i < arguments.length; i++) {\n        let assignment = arguments[i];\n        if (assignment === null || typeof assignment !== 'object') continue;\n        let keys = objKeys(assignment);\n        for (let j = 0; j < keys.length; j++) {\n            let key = keys[j];\n            obj[key] = assignment[key];\n        }\n    }\n    return obj;\n}\nexport function fillNulls(count) {\n    let arr = new Array(count);\n    for (let i = 0; i < count; i++) {\n        arr[i] = null;\n    }\n    return arr;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvdXRpbC9saWIvb2JqZWN0LXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxBQUFJLE1BQUUsQUFBTyxBQUFFLFlBQUcsQUFBTSxBQUFDO0FBU2pDLEFBQU0sdUJBQWlCLEFBQVE7QUFDN0IsQUFBRyxBQUFDLFNBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFTLFVBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDMUMsWUFBSSxBQUFVLGFBQUcsQUFBUyxVQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzlCLEFBQUUsQUFBQyxZQUFDLEFBQVUsZUFBSyxBQUFJLFFBQUksT0FBTyxBQUFVLGVBQUssQUFBUSxBQUFDLFVBQUMsQUFBUSxBQUFDO0FBQ3BFLFlBQUksQUFBSSxPQUFHLEFBQU8sUUFBQyxBQUFVLEFBQUMsQUFBQztBQUMvQixBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUNyQyxnQkFBSSxBQUFHLE1BQUcsQUFBSSxLQUFDLEFBQUMsQUFBQyxBQUFDO0FBQ2xCLEFBQUcsZ0JBQUMsQUFBRyxBQUFDLE9BQUcsQUFBVSxXQUFDLEFBQUcsQUFBQyxBQUFDLEFBQzdCO0FBQUMsQUFDSDtBQUFDO0FBQ0QsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUM7QUFFRCxBQUFNLDBCQUF1QixBQUFhO0FBQ3hDLFFBQUksQUFBRyxNQUFHLElBQUksQUFBSyxNQUFDLEFBQUssQUFBQyxBQUFDO0FBRTNCLEFBQUcsQUFBQyxTQUFDLElBQUksQUFBQyxJQUFDLEFBQUMsR0FBRSxBQUFDLElBQUMsQUFBSyxPQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDM0IsQUFBRyxZQUFDLEFBQUMsQUFBQyxLQUFHLEFBQUksQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IGtleXM6IG9iaktleXMgfSA9IE9iamVjdDtcblxuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbjxULCBVPihvYmo6IFQsIGFzc2lnbm1lbnRzOiBVKTogVCAmIFU7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFY+KG9iajogVCwgYTogVSwgYjogVik6IFQgJiBVICYgVjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVz4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXKTogVCAmIFUgJiBWICYgVztcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWD4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYKTogVCAmIFUgJiBWICYgVyAmIFg7XG5leHBvcnQgZnVuY3Rpb24gYXNzaWduPFQsIFUsIFYsIFcsIFgsIFk+KG9iajogVCwgYTogVSwgYjogViwgYzogVywgZDogWCwgZTogWSk6IFQgJiBVICYgViAmIFcgJiBYICYgWTtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ248VCwgVSwgViwgVywgWCwgWSwgWj4ob2JqOiBULCBhOiBVLCBiOiBWLCBjOiBXLCBkOiBYLCBlOiBZLCBmOiBaKTogVCAmIFUgJiBWICYgVyAmIFggJiBZICYgWjtcbmV4cG9ydCBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55O1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2lnbihvYmo6IGFueSkge1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhc3NpZ25tZW50ID0gYXJndW1lbnRzW2ldO1xuICAgIGlmIChhc3NpZ25tZW50ID09PSBudWxsIHx8IHR5cGVvZiBhc3NpZ25tZW50ICE9PSAnb2JqZWN0JykgY29udGludWU7XG4gICAgbGV0IGtleXMgPSBvYmpLZXlzKGFzc2lnbm1lbnQpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwga2V5cy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGtleSA9IGtleXNbal07XG4gICAgICBvYmpba2V5XSA9IGFzc2lnbm1lbnRba2V5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iajtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpbGxOdWxsczxUPihjb3VudDogbnVtYmVyKTogVFtdIHtcbiAgbGV0IGFyciA9IG5ldyBBcnJheShjb3VudCk7XG5cbiAgZm9yIChsZXQgaT0wOyBpPGNvdW50OyBpKyspIHtcbiAgICBhcnJbaV0gPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGFycjtcbn0iXX0=","let GUID = 0;\nexport function initializeGuid(object) {\n    return object._guid = ++GUID;\n}\nexport function ensureGuid(object) {\n    return object._guid || initializeGuid(object);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3VpZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3V0aWwvbGliL2d1aWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxBQUFJLE9BQUcsQUFBQyxBQUFDO0FBTWIsQUFBTSwrQkFBeUIsQUFBZTtBQUM1QyxBQUFNLEFBQUMsV0FBQyxBQUFNLE9BQUMsQUFBSyxRQUFHLEVBQUUsQUFBSSxBQUFDLEFBQUMsQUFDakM7QUFBQztBQUVELEFBQU0sMkJBQXFCLEFBQWU7QUFDeEMsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLFNBQUksQUFBYyxlQUFDLEFBQU0sQUFBQyxBQUFDLEFBQ2hEO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgR1VJRCA9IDA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzR3VpZCB7XG4gIF9ndWlkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWFsaXplR3VpZChvYmplY3Q6IEhhc0d1aWQpOiBudW1iZXIge1xuICByZXR1cm4gKG9iamVjdC5fZ3VpZCA9ICsrR1VJRCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVHdWlkKG9iamVjdDogSGFzR3VpZCk6IG51bWJlciB7XG4gIHJldHVybiBvYmplY3QuX2d1aWQgfHwgaW5pdGlhbGl6ZUd1aWQob2JqZWN0KTtcbn0iXX0=","import { ensureGuid } from './guid';\nexport function dict() {\n    return Object.create(null);\n}\nexport class DictSet {\n    constructor() {\n        this.dict = dict();\n    }\n    add(obj) {\n        if (typeof obj === 'string') this.dict[obj] = obj;else this.dict[ensureGuid(obj)] = obj;\n        return this;\n    }\n    delete(obj) {\n        if (typeof obj === 'string') delete this.dict[obj];else if (obj._guid) delete this.dict[obj._guid];\n    }\n}\nexport class Stack {\n    constructor() {\n        this.stack = [];\n        this.current = null;\n    }\n    get size() {\n        return this.stack.length;\n    }\n    push(item) {\n        this.current = item;\n        this.stack.push(item);\n    }\n    pop() {\n        let item = this.stack.pop();\n        let len = this.stack.length;\n        this.current = len === 0 ? null : this.stack[len - 1];\n        return item === undefined ? null : item;\n    }\n    isEmpty() {\n        return this.stack.length === 0;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9jb2xsZWN0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQVcsQUFBVSxBQUFFLGtCQUFNLEFBQVEsQUFBQztBQVk3QyxBQUFNO0FBQ0osQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUMsQUFDN0I7QUFBQztBQUlELEFBQU07QUFHSjtBQUNFLEFBQUksYUFBQyxBQUFJLE9BQUcsQUFBSSxBQUFLLEFBQUMsQUFDeEI7QUFBQztBQUVELEFBQUcsUUFBQyxBQUFNO0FBQ1IsQUFBRSxBQUFDLFlBQUMsT0FBTyxBQUFHLFFBQUssQUFBUSxBQUFDLFVBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFVLEFBQUMsT0FBRyxBQUFHLEFBQUMsQUFDekQsQUFBSSxTQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxXQUFDLEFBQVUsQUFBQyxBQUFDLFFBQUcsQUFBRyxBQUFDO0FBQzdDLEFBQU0sZUFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQU07QUFDWCxBQUFFLEFBQUMsWUFBQyxPQUFPLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBVSxBQUFDLEFBQUMsQUFDMUQsQUFBSSxVQUFDLEFBQUUsQUFBQyxJQUFFLEFBQVcsSUFBQyxBQUFLLEFBQUMsT0FBQyxPQUFPLEFBQUksS0FBQyxBQUFJLEtBQUUsQUFBVyxJQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3BFO0FBQUMsQUFDRjs7QUFFRCxBQUFNO0FBQU47QUFDVSxhQUFLLFFBQVEsQUFBRSxBQUFDO0FBQ2pCLGFBQU8sVUFBYyxBQUFJLEFBQUMsQUFzQm5DO0FBQUM7QUFwQkMsUUFBVyxBQUFJO0FBQ2IsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxBQUFDLEFBQzNCO0FBQUM7QUFFRCxBQUFJLFNBQUMsQUFBTztBQUNWLEFBQUksYUFBQyxBQUFPLFVBQUcsQUFBSSxBQUFDO0FBQ3BCLEFBQUksYUFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDLEFBQ3hCO0FBQUM7QUFFRCxBQUFHO0FBQ0QsWUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBQztBQUM1QixZQUFJLEFBQUcsTUFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sQUFBQztBQUM1QixBQUFJLGFBQUMsQUFBTyxVQUFHLEFBQUcsUUFBSyxBQUFDLElBQUcsQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBRyxNQUFHLEFBQUMsQUFBQyxBQUFDO0FBRXRELEFBQU0sZUFBQyxBQUFJLFNBQUssQUFBUyxZQUFHLEFBQUksT0FBRyxBQUFJLEFBQUMsQUFDMUM7QUFBQztBQUVELEFBQU87QUFDTCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLFdBQUssQUFBQyxBQUFDLEFBQ2pDO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhhc0d1aWQsIGVuc3VyZUd1aWQgfSBmcm9tICcuL2d1aWQnO1xuaW1wb3J0IHsgT3B0aW9uIH0gZnJvbSAnLi9wbGF0Zm9ybS11dGlscyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGljdDxUPiB7XG4gIFtpbmRleDogc3RyaW5nXTogVDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTZXQ8VD4ge1xuICBhZGQodmFsdWU6IFQpOiBTZXQ8VD47XG4gIGRlbGV0ZSh2YWx1ZTogVCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkaWN0PFQ+KCk6IERpY3Q8VD4ge1xuICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuZXhwb3J0IHR5cGUgU2V0TWVtYmVyID0gSGFzR3VpZCB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIERpY3RTZXQ8VCBleHRlbmRzIFNldE1lbWJlcj4gaW1wbGVtZW50cyBTZXQ8VD4ge1xuICBwcml2YXRlIGRpY3Q6IERpY3Q8VD47XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5kaWN0ID0gZGljdDxUPigpO1xuICB9XG5cbiAgYWRkKG9iajogVCk6IFNldDxUPiB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSB0aGlzLmRpY3Rbb2JqIGFzIGFueV0gPSBvYmo7XG4gICAgZWxzZSB0aGlzLmRpY3RbZW5zdXJlR3VpZChvYmogYXMgYW55KV0gPSBvYmo7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkZWxldGUob2JqOiBUKSB7XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdzdHJpbmcnKSBkZWxldGUgdGhpcy5kaWN0W29iaiBhcyBhbnldO1xuICAgIGVsc2UgaWYgKChvYmogYXMgYW55KS5fZ3VpZCkgZGVsZXRlIHRoaXMuZGljdFsob2JqIGFzIGFueSkuX2d1aWRdO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGFjazxUPiB7XG4gIHByaXZhdGUgc3RhY2s6IFRbXSA9IFtdO1xuICBwdWJsaWMgY3VycmVudDogT3B0aW9uPFQ+ID0gbnVsbDtcblxuICBwdWJsaWMgZ2V0IHNpemUoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhY2subGVuZ3RoO1xuICB9XG5cbiAgcHVzaChpdGVtOiBUKSB7XG4gICAgdGhpcy5jdXJyZW50ID0gaXRlbTtcbiAgICB0aGlzLnN0YWNrLnB1c2goaXRlbSk7XG4gIH1cblxuICBwb3AoKTogT3B0aW9uPFQ+IHtcbiAgICBsZXQgaXRlbSA9IHRoaXMuc3RhY2sucG9wKCk7XG4gICAgbGV0IGxlbiA9IHRoaXMuc3RhY2subGVuZ3RoO1xuICAgIHRoaXMuY3VycmVudCA9IGxlbiA9PT0gMCA/IG51bGwgOiB0aGlzLnN0YWNrW2xlbiAtIDFdO1xuXG4gICAgcmV0dXJuIGl0ZW0gPT09IHVuZGVmaW5lZCA/IG51bGwgOiBpdGVtO1xuICB9XG5cbiAgaXNFbXB0eSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zdGFjay5sZW5ndGggPT09IDA7XG4gIH1cbn1cbiJdfQ==","export class ListNode {\n    constructor(value) {\n        this.next = null;\n        this.prev = null;\n        this.value = value;\n    }\n}\nexport class LinkedList {\n    constructor() {\n        this.clear();\n    }\n    head() {\n        return this._head;\n    }\n    tail() {\n        return this._tail;\n    }\n    clear() {\n        this._head = this._tail = null;\n    }\n    toArray() {\n        let out = [];\n        this.forEachNode(n => out.push(n));\n        return out;\n    }\n    nextNode(node) {\n        return node.next;\n    }\n    forEachNode(callback) {\n        let node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = node.next;\n        }\n    }\n    insertBefore(node, reference = null) {\n        if (reference === null) return this.append(node);\n        if (reference.prev) reference.prev.next = node;else this._head = node;\n        node.prev = reference.prev;\n        node.next = reference;\n        reference.prev = node;\n        return node;\n    }\n    append(node) {\n        let tail = this._tail;\n        if (tail) {\n            tail.next = node;\n            node.prev = tail;\n            node.next = null;\n        } else {\n            this._head = node;\n        }\n        return this._tail = node;\n    }\n    remove(node) {\n        if (node.prev) node.prev.next = node.next;else this._head = node.next;\n        if (node.next) node.next.prev = node.prev;else this._tail = node.prev;\n        return node;\n    }\n}\nexport class ListSlice {\n    constructor(head, tail) {\n        this._head = head;\n        this._tail = tail;\n    }\n    forEachNode(callback) {\n        let node = this._head;\n        while (node !== null) {\n            callback(node);\n            node = this.nextNode(node);\n        }\n    }\n    head() {\n        return this._head;\n    }\n    tail() {\n        return this._tail;\n    }\n    toArray() {\n        let out = [];\n        this.forEachNode(n => out.push(n));\n        return out;\n    }\n    nextNode(node) {\n        if (node === this._tail) return null;\n        return node.next;\n    }\n}\nexport const EMPTY_SLICE = new ListSlice(null, null);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export const EMPTY_ARRAY = Object.freeze([]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyYXktdXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci91dGlsL2xpYi9hcnJheS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFNLE9BQUMsTUFBTSxBQUFXLGNBQVUsQUFBTSxPQUFDLEFBQU0sT0FBQyxBQUFFLEFBQVEsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBFTVBUWV9BUlJBWTogYW55W10gPSBPYmplY3QuZnJlZXplKFtdKSBhcyBhbnk7XG4iXX0=","export const CONSTANT = 0;\nexport const INITIAL = 1;\nexport const VOLATILE = NaN;\nexport class RevisionTag {\n    validate(snapshot) {\n        return this.value() === snapshot;\n    }\n}\nRevisionTag.id = 0;\nconst VALUE = [];\nconst VALIDATE = [];\nexport class TagWrapper {\n    constructor(type, inner) {\n        this.type = type;\n        this.inner = inner;\n    }\n    value() {\n        let func = VALUE[this.type];\n        return func(this.inner);\n    }\n    validate(snapshot) {\n        let func = VALIDATE[this.type];\n        return func(this.inner, snapshot);\n    }\n}\nfunction register(Type) {\n    let type = VALUE.length;\n    VALUE.push(tag => tag.value());\n    VALIDATE.push((tag, snapshot) => tag.validate(snapshot));\n    Type.id = type;\n}\n///\n// CONSTANT: 0\nVALUE.push(() => CONSTANT);\nVALIDATE.push((_tag, snapshot) => snapshot === CONSTANT);\nexport const CONSTANT_TAG = new TagWrapper(0, null);\n// VOLATILE: 1\nVALUE.push(() => VOLATILE);\nVALIDATE.push((_tag, snapshot) => snapshot === VOLATILE);\nexport const VOLATILE_TAG = new TagWrapper(1, null);\n// CURRENT: 2\nVALUE.push(() => $REVISION);\nVALIDATE.push((_tag, snapshot) => snapshot === $REVISION);\nexport const CURRENT_TAG = new TagWrapper(2, null);\nexport function isConst({ tag }) {\n    return tag === CONSTANT_TAG;\n}\nexport function isConstTag(tag) {\n    return tag === CONSTANT_TAG;\n}\n///\nlet $REVISION = INITIAL;\nexport class DirtyableTag extends RevisionTag {\n    static create(revision = $REVISION) {\n        return new TagWrapper(this.id, new DirtyableTag(revision));\n    }\n    constructor(revision = $REVISION) {\n        super();\n        this.revision = revision;\n    }\n    value() {\n        return this.revision;\n    }\n    dirty() {\n        this.revision = ++$REVISION;\n    }\n}\nregister(DirtyableTag);\nexport function combineTagged(tagged) {\n    let optimized = [];\n    for (let i = 0, l = tagged.length; i < l; i++) {\n        let tag = tagged[i].tag;\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag === CONSTANT_TAG) continue;\n        optimized.push(tag);\n    }\n    return _combine(optimized);\n}\nexport function combineSlice(slice) {\n    let optimized = [];\n    let node = slice.head();\n    while (node !== null) {\n        let tag = node.tag;\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag !== CONSTANT_TAG) optimized.push(tag);\n        node = slice.nextNode(node);\n    }\n    return _combine(optimized);\n}\nexport function combine(tags) {\n    let optimized = [];\n    for (let i = 0, l = tags.length; i < l; i++) {\n        let tag = tags[i];\n        if (tag === VOLATILE_TAG) return VOLATILE_TAG;\n        if (tag === CONSTANT_TAG) continue;\n        optimized.push(tag);\n    }\n    return _combine(optimized);\n}\nfunction _combine(tags) {\n    switch (tags.length) {\n        case 0:\n            return CONSTANT_TAG;\n        case 1:\n            return tags[0];\n        case 2:\n            return TagsPair.create(tags[0], tags[1]);\n        default:\n            return TagsCombinator.create(tags);\n    }\n}\nexport class CachedTag extends RevisionTag {\n    constructor() {\n        super(...arguments);\n        this.lastChecked = null;\n        this.lastValue = null;\n    }\n    value() {\n        let { lastChecked, lastValue } = this;\n        if (lastChecked !== $REVISION) {\n            this.lastChecked = $REVISION;\n            this.lastValue = lastValue = this.compute();\n        }\n        return this.lastValue;\n    }\n    invalidate() {\n        this.lastChecked = null;\n    }\n}\nclass TagsPair extends CachedTag {\n    static create(first, second) {\n        return new TagWrapper(this.id, new TagsPair(first, second));\n    }\n    constructor(first, second) {\n        super();\n        this.first = first;\n        this.second = second;\n    }\n    compute() {\n        return Math.max(this.first.value(), this.second.value());\n    }\n}\nregister(TagsPair);\nclass TagsCombinator extends CachedTag {\n    static create(tags) {\n        return new TagWrapper(this.id, new TagsCombinator(tags));\n    }\n    constructor(tags) {\n        super();\n        this.tags = tags;\n    }\n    compute() {\n        let { tags } = this;\n        let max = -1;\n        for (let i = 0; i < tags.length; i++) {\n            let value = tags[i].value();\n            max = Math.max(value, max);\n        }\n        return max;\n    }\n}\nregister(TagsCombinator);\nexport class UpdatableTag extends CachedTag {\n    static create(tag) {\n        return new TagWrapper(this.id, new UpdatableTag(tag));\n    }\n    constructor(tag) {\n        super();\n        this.tag = tag;\n        this.lastUpdated = INITIAL;\n    }\n    compute() {\n        return Math.max(this.lastUpdated, this.tag.value());\n    }\n    update(tag) {\n        if (tag !== this.tag) {\n            this.tag = tag;\n            this.lastUpdated = $REVISION;\n            this.invalidate();\n        }\n    }\n}\nregister(UpdatableTag);\nexport class CachedReference {\n    constructor() {\n        this.lastRevision = null;\n        this.lastValue = null;\n    }\n    value() {\n        let { tag, lastRevision, lastValue } = this;\n        if (lastRevision === null || !tag.validate(lastRevision)) {\n            lastValue = this.lastValue = this.compute();\n            this.lastRevision = tag.value();\n        }\n        return lastValue;\n    }\n    invalidate() {\n        this.lastRevision = null;\n    }\n}\nclass MapperReference extends CachedReference {\n    constructor(reference, mapper) {\n        super();\n        this.tag = reference.tag;\n        this.reference = reference;\n        this.mapper = mapper;\n    }\n    compute() {\n        let { reference, mapper } = this;\n        return mapper(reference.value());\n    }\n}\nexport function map(reference, mapper) {\n    return new MapperReference(reference, mapper);\n}\n//////////\nexport class ReferenceCache {\n    constructor(reference) {\n        this.lastValue = null;\n        this.lastRevision = null;\n        this.initialized = false;\n        this.tag = reference.tag;\n        this.reference = reference;\n    }\n    peek() {\n        if (!this.initialized) {\n            return this.initialize();\n        }\n        return this.lastValue;\n    }\n    revalidate() {\n        if (!this.initialized) {\n            return this.initialize();\n        }\n        let { reference, lastRevision } = this;\n        let tag = reference.tag;\n        if (tag.validate(lastRevision)) return NOT_MODIFIED;\n        this.lastRevision = tag.value();\n        let { lastValue } = this;\n        let value = reference.value();\n        if (value === lastValue) return NOT_MODIFIED;\n        this.lastValue = value;\n        return value;\n    }\n    initialize() {\n        let { reference } = this;\n        let value = this.lastValue = reference.value();\n        this.lastRevision = reference.tag.value();\n        this.initialized = true;\n        return value;\n    }\n}\nconst NOT_MODIFIED = \"adb3b78e-3d22-4e4b-877a-6317c2c5c145\";\nexport function isModified(value) {\n    return value !== NOT_MODIFIED;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { CONSTANT_TAG } from './validators';\nexport class ConstReference {\n    constructor(inner) {\n        this.inner = inner;\n        this.tag = CONSTANT_TAG;\n    }\n    value() {\n        return this.inner;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9yZWZlcmVuY2UvbGliL2NvbnN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQU8sU0FBRSxBQUFZLEFBQTJCLG9CQUFNLEFBQWMsQUFBQztBQUVyRSxBQUFNO0FBR0osZ0JBQXNCLEFBQVE7QUFBUixhQUFLLFFBQUwsQUFBSyxBQUFHO0FBRnZCLGFBQUcsTUFBUSxBQUFZLEFBQUMsQUFFRztBQUFDO0FBRW5DLEFBQUs7QUFBUSxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUssQUFBQyxBQUFDO0FBQUMsQUFDbEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDT05TVEFOVF9UQUcsIFZlcnNpb25lZFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnLi92YWxpZGF0b3JzJztcblxuZXhwb3J0IGNsYXNzIENvbnN0UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgVmVyc2lvbmVkUmVmZXJlbmNlPFQ+IHtcbiAgcHVibGljIHRhZzogVGFnID0gQ09OU1RBTlRfVEFHO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbm5lcjogVCkgeyB9XG5cbiAgdmFsdWUoKTogVCB7IHJldHVybiB0aGlzLmlubmVyOyB9XG59XG4iXX0=","import { LinkedList, ListNode, dict } from '@glimmer/util';\nexport class ListItem extends ListNode {\n    constructor(iterable, result) {\n        super(iterable.valueReferenceFor(result));\n        this.retained = false;\n        this.seen = false;\n        this.key = result.key;\n        this.iterable = iterable;\n        this.memo = iterable.memoReferenceFor(result);\n    }\n    update(item) {\n        this.retained = true;\n        this.iterable.updateValueReference(this.value, item);\n        this.iterable.updateMemoReference(this.memo, item);\n    }\n    shouldRemove() {\n        return !this.retained;\n    }\n    reset() {\n        this.retained = false;\n        this.seen = false;\n    }\n}\nexport class IterationArtifacts {\n    constructor(iterable) {\n        this.iterator = null;\n        this.map = dict();\n        this.list = new LinkedList();\n        this.tag = iterable.tag;\n        this.iterable = iterable;\n    }\n    isEmpty() {\n        let iterator = this.iterator = this.iterable.iterate();\n        return iterator.isEmpty();\n    }\n    iterate() {\n        let iterator;\n        if (this.iterator === null) {\n            iterator = this.iterable.iterate();\n        } else {\n            iterator = this.iterator;\n        }\n        this.iterator = null;\n        return iterator;\n    }\n    has(key) {\n        return !!this.map[key];\n    }\n    get(key) {\n        return this.map[key];\n    }\n    wasSeen(key) {\n        let node = this.map[key];\n        return node !== undefined && node.seen;\n    }\n    append(item) {\n        let { map, list, iterable } = this;\n        let node = map[item.key] = new ListItem(iterable, item);\n        list.append(node);\n        return node;\n    }\n    insertBefore(item, reference) {\n        let { map, list, iterable } = this;\n        let node = map[item.key] = new ListItem(iterable, item);\n        node.retained = true;\n        list.insertBefore(node, reference);\n        return node;\n    }\n    move(item, reference) {\n        let { list } = this;\n        item.retained = true;\n        list.remove(item);\n        list.insertBefore(item, reference);\n    }\n    remove(item) {\n        let { list } = this;\n        list.remove(item);\n        delete this.map[item.key];\n    }\n    nextNode(item) {\n        return this.list.nextNode(item);\n    }\n    head() {\n        return this.list.head();\n    }\n}\nexport class ReferenceIterator {\n    // if anyone needs to construct this object with something other than\n    // an iterable, let @wycats know.\n    constructor(iterable) {\n        this.iterator = null;\n        let artifacts = new IterationArtifacts(iterable);\n        this.artifacts = artifacts;\n    }\n    next() {\n        let { artifacts } = this;\n        let iterator = this.iterator = this.iterator || artifacts.iterate();\n        let item = iterator.next();\n        if (item === null) return null;\n        return artifacts.append(item);\n    }\n}\nvar Phase;\n(function (Phase) {\n    Phase[Phase[\"Append\"] = 0] = \"Append\";\n    Phase[Phase[\"Prune\"] = 1] = \"Prune\";\n    Phase[Phase[\"Done\"] = 2] = \"Done\";\n})(Phase || (Phase = {}));\nexport class IteratorSynchronizer {\n    constructor({ target, artifacts }) {\n        this.target = target;\n        this.artifacts = artifacts;\n        this.iterator = artifacts.iterate();\n        this.current = artifacts.head();\n    }\n    sync() {\n        let phase = Phase.Append;\n        while (true) {\n            switch (phase) {\n                case Phase.Append:\n                    phase = this.nextAppend();\n                    break;\n                case Phase.Prune:\n                    phase = this.nextPrune();\n                    break;\n                case Phase.Done:\n                    this.nextDone();\n                    return;\n            }\n        }\n    }\n    advanceToKey(key) {\n        let { current, artifacts } = this;\n        let seek = current;\n        while (seek !== null && seek.key !== key) {\n            seek.seen = true;\n            seek = artifacts.nextNode(seek);\n        }\n        if (seek !== null) {\n            this.current = artifacts.nextNode(seek);\n        }\n    }\n    nextAppend() {\n        let { iterator, current, artifacts } = this;\n        let item = iterator.next();\n        if (item === null) {\n            return this.startPrune();\n        }\n        let { key } = item;\n        if (current !== null && current.key === key) {\n            this.nextRetain(item);\n        } else if (artifacts.has(key)) {\n            this.nextMove(item);\n        } else {\n            this.nextInsert(item);\n        }\n        return Phase.Append;\n    }\n    nextRetain(item) {\n        let { artifacts, current } = this;\n        current = current;\n        current.update(item);\n        this.current = artifacts.nextNode(current);\n        this.target.retain(item.key, current.value, current.memo);\n    }\n    nextMove(item) {\n        let { current, artifacts, target } = this;\n        let { key } = item;\n        let found = artifacts.get(item.key);\n        found.update(item);\n        if (artifacts.wasSeen(item.key)) {\n            artifacts.move(found, current);\n            target.move(found.key, found.value, found.memo, current ? current.key : null);\n        } else {\n            this.advanceToKey(key);\n        }\n    }\n    nextInsert(item) {\n        let { artifacts, target, current } = this;\n        let node = artifacts.insertBefore(item, current);\n        target.insert(node.key, node.value, node.memo, current ? current.key : null);\n    }\n    startPrune() {\n        this.current = this.artifacts.head();\n        return Phase.Prune;\n    }\n    nextPrune() {\n        let { artifacts, target, current } = this;\n        if (current === null) {\n            return Phase.Done;\n        }\n        let node = current;\n        this.current = artifacts.nextNode(node);\n        if (node.shouldRemove()) {\n            artifacts.remove(node);\n            target.delete(node.key);\n        } else {\n            node.reset();\n        }\n        return Phase.Prune;\n    }\n    nextDone() {\n        this.target.done();\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { DEBUG } from \"@glimmer/env\";\nimport { Tag, DirtyableTag, TagWrapper, combine, CONSTANT_TAG } from \"@glimmer/reference\";\nimport { dict, Dict } from \"@glimmer/util\";\n\n/**\n * @decorator\n *\n * Marks a property as tracked.\n *\n * By default, a component's properties are expected to be static,\n * meaning you are not able to update them and have the template update accordingly.\n * Marking a property as tracked means that when that property changes,\n * a rerender of the component is scheduled so the template is kept up to date.\n *\n * There are two usages for the `@tracked` decorator, shown below.\n *\n * @example No dependencies\n *\n * If you don't pass an argument to `@tracked`, only changes to that property\n * will be tracked:\n *\n * ```typescript\n * import Component, { tracked } from '@glimmer/component';\n *\n * export default class MyComponent extends Component {\n *    @tracked\n *    remainingApples = 10\n * }\n * ```\n *\n * When something changes the component's `remainingApples` property, the rerender\n * will be scheduled.\n *\n * @example Dependents\n *\n * In the case that you have a computed property that depends other\n * properties, you want to track both so that when one of the\n * dependents change, a rerender is scheduled.\n *\n * In the following example we have two properties,\n * `eatenApples`, and `remainingApples`.\n *\n *\n * ```typescript\n * import Component, { tracked } from '@glimmer/component';\n *\n * const totalApples = 100;\n *\n * export default class MyComponent extends Component {\n *    @tracked\n *    eatenApples = 0\n *\n *    @tracked('eatenApples')\n *    get remainingApples() {\n *      return totalApples - this.eatenApples;\n *    }\n *\n *    increment() {\n *      this.eatenApples = this.eatenApples + 1;\n *    }\n *  }\n * ```\n *\n * @param dependencies Optional dependents to be tracked.\n */\nexport function tracked(...dependencies: string[]): MethodDecorator;\nexport function tracked(target: any, key: any): any;\nexport function tracked(target: any, key: any, descriptor: PropertyDescriptor): PropertyDescriptor;\nexport function tracked(...dependencies: any[]): any {\n  let [target, key, descriptor] = dependencies;\n\n  if (typeof target === \"string\") {\n    return function(target: any, key: string | Symbol, descriptor: PropertyDescriptor) {\n      return descriptorForTrackedComputedProperty(target, key, descriptor, dependencies);\n    };\n  } else {\n    if (descriptor) {\n      return descriptorForTrackedComputedProperty(target, key, descriptor, []);\n    } else {\n      installTrackedProperty(target, key);\n    }\n  }\n}\n\nfunction descriptorForTrackedComputedProperty(target: any, key: any, descriptor: PropertyDescriptor, dependencies: string[]): PropertyDescriptor {\n  let meta = metaFor(target);\n  meta.trackedProperties[key] = true;\n  meta.trackedPropertyDependencies[key] = dependencies || [];\n\n  return {\n    enumerable: true,\n    configurable: false,\n    get: descriptor.get,\n    set: function() {\n      metaFor(this).dirtyableTagFor(key).inner.dirty();\n      descriptor.set.apply(this, arguments);\n      propertyDidChange();\n    }\n  };\n}\n\nexport type Key = string;\n\n/**\n  Installs a getter/setter for change tracking. The accessor\n  acts just like a normal property, but it triggers the `propertyDidChange`\n  hook when written to.\n\n  Values are saved on the object using a \"shadow key,\" or a symbol based on the\n  tracked property name. Sets write the value to the shadow key, and gets read\n  from it.\n */\nfunction installTrackedProperty(target: any, key: Key) {\n  let value: any;\n  let shadowKey = Symbol(key);\n\n  let meta = metaFor(target);\n  meta.trackedProperties[key] = true;\n\n  if (target[key] !== undefined) {\n    value = target[key];\n  }\n\n  Object.defineProperty(target, key, {\n    configurable: true,\n\n    get() {\n      return this[shadowKey];\n    },\n\n    set(newValue) {\n      metaFor(this).dirtyableTagFor(key).inner.dirty();\n      this[shadowKey] = newValue;\n      propertyDidChange();\n    }\n  });\n}\n\n/**\n * Stores bookkeeping information about tracked properties on the target object\n * and includes helper methods for manipulating and retrieving that data.\n *\n * Computed properties (i.e., tracked getters/setters) deserve some explanation.\n * A computed property is invalidated when either it is set, or one of its\n * dependencies is invalidated. Therefore, we store two tags for each computed\n * property:\n *\n * 1. The dirtyable tag that we invalidate when the setter is invoked.\n * 2. A union tag (tag combinator) of the dirtyable tag and all of the computed\n *    property's dependencies' tags, used by Glimmer to determine \"does this\n *    computed property need to be recomputed?\"\n */\nexport default class Meta {\n  tags: Dict<Tag>;\n  computedPropertyTags: Dict<TagWrapper<DirtyableTag>>;\n  trackedProperties: Dict<boolean>;\n  trackedPropertyDependencies: Dict<string[]>;\n\n  constructor(parent: Meta) {\n    this.tags = dict<Tag>();\n    this.computedPropertyTags = dict<TagWrapper<DirtyableTag>>();\n    this.trackedProperties = parent ? Object.create(parent.trackedProperties) : dict<boolean>();\n    this.trackedPropertyDependencies = parent ? Object.create(parent.trackedPropertyDependencies) : dict<string[]>();\n  }\n\n  /**\n   * The tag representing whether the given property should be recomputed. Used\n   * by e.g. Glimmer VM to detect when a property should be re-rendered. Think\n   * of this as the \"public-facing\" tag.\n   *\n   * For static tracked properties, this is a single DirtyableTag. For computed\n   * properties, it is a combinator of the property's DirtyableTag as well as\n   * all of its dependencies' tags.\n   */\n  tagFor(key: Key): Tag {\n    let tag = this.tags[key];\n    if (tag) { return tag; }\n\n    let dependencies;\n    if (dependencies = this.trackedPropertyDependencies[key]) {\n      return this.tags[key] = combinatorForComputedProperties(this, key, dependencies);\n    }\n\n    return this.tags[key] = DirtyableTag.create();\n  }\n\n  /**\n   * The tag used internally to invalidate when a tracked property is set. For\n   * static properties, this is the same DirtyableTag returned from `tagFor`.\n   * For computed properties, it is the DirtyableTag used as one of the tags in\n   * the tag combinator of the CP and its dependencies.\n  */\n  dirtyableTagFor(key: Key): TagWrapper<DirtyableTag> {\n    let dependencies = this.trackedPropertyDependencies[key];\n    let tag;\n\n    if (dependencies) {\n      // The key is for a computed property.\n      tag = this.computedPropertyTags[key];\n      if (tag) { return tag; }\n      return this.computedPropertyTags[key] = DirtyableTag.create();\n    } else {\n      // The key is for a static property.\n      tag = this.tags[key];\n      if (tag) { return tag as TagWrapper<DirtyableTag>; }\n      return this.tags[key] = DirtyableTag.create();\n    }\n  }\n}\n\nfunction combinatorForComputedProperties(meta: Meta, key: Key, dependencies: Key[] | void): Tag {\n  // Start off with the tag for the CP's own dirty state.\n  let tags: Tag[] = [meta.dirtyableTagFor(key)];\n\n  // Next, add in all of the tags for its dependencies.\n  if (dependencies && dependencies.length) {\n    for (let i = 0; i < dependencies.length; i++) {\n      tags.push(meta.tagFor(dependencies[i]));\n    }\n  }\n\n  // Return a combinator across the CP's tags and its dependencies' tags.\n  return combine(tags);\n}\n\nexport interface Interceptors {\n  [key: string]: boolean;\n}\n\nlet META = Symbol(\"ember-object\");\n\nexport function metaFor(obj: any): Meta {\n  let meta = obj[META];\n  if (meta && hasOwnProperty(obj, META)) {\n    return meta;\n  }\n\n  return obj[META] = new Meta(meta);\n}\n\nlet hOP = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj: any, key: symbol) {\n  return hOP.call(obj, key);\n}\n\nlet propertyDidChange = function() {};\n\nexport function setPropertyDidChange(cb: () => void) {\n  propertyDidChange = cb;\n}\n\nexport function hasTag(obj: any, key: string): boolean {\n  let meta = obj[META] as Meta;\n\n  if (!obj[META]) { return false; }\n  if (!meta.trackedProperties[key]) { return false; }\n\n  return true;\n}\n\nexport class UntrackedPropertyError extends Error {\n  static for(obj: any, key: string): UntrackedPropertyError {\n    return new UntrackedPropertyError(obj, key, `The property '${key}' on ${obj} was changed after being rendered. If you want to change a property used in a template after the component has rendered, mark the property as a tracked property with the @tracked decorator.`);\n  }\n\n  constructor(public target: any, public key: string, message: string) {\n    super(message);\n  }\n}\n\n/**\n * Function that can be used in development mode to generate more meaningful\n * error messages.\n */\nexport interface UntrackedPropertyErrorThrower {\n  (obj: any, key: string): void;\n}\n\nfunction defaultErrorThrower(obj: any, key: string): UntrackedPropertyError {\n  throw UntrackedPropertyError.for(obj, key);\n}\n\nexport function tagForProperty(obj: any, key: string, throwError: UntrackedPropertyErrorThrower = defaultErrorThrower): Tag {\n  if (typeof obj === \"object\" && obj) {\n    if (DEBUG && !hasTag(obj, key)) {\n      installDevModeErrorInterceptor(obj, key, throwError);\n    }\n\n    let meta = metaFor(obj);\n    return meta.tagFor(key);\n  } else {\n    return CONSTANT_TAG;\n  }\n}\n\n/**\n * In development mode only, we install an ad hoc setter on properties where a\n * tag is requested (i.e., it was used in a template) without being tracked. In\n * cases where the property is set, we raise an error.\n */\nfunction installDevModeErrorInterceptor(obj: object, key: string, throwError: UntrackedPropertyErrorThrower) {\n  let target = obj;\n  let descriptor: PropertyDescriptor;\n\n  // Find the descriptor for the current property. We may need to walk the\n  // prototype chain to do so. If the property is undefined, we may never get a\n  // descriptor here.\n  let hasOwnDescriptor = true;\n  while (target) {\n    descriptor = Object.getOwnPropertyDescriptor(target, key);\n    if (descriptor) { break; }\n    hasOwnDescriptor = false;\n    target = Object.getPrototypeOf(target);\n  }\n\n  // If possible, define a property descriptor that passes through the current\n  // value on reads but throws an exception on writes.\n  if (descriptor) {\n    if (descriptor.configurable || !hasOwnDescriptor) {\n      Object.defineProperty(obj, key, {\n        configurable: descriptor.configurable,\n        enumerable: descriptor.enumerable,\n\n        get() {\n          if (descriptor.get) {\n            return descriptor.get.call(this);\n          } else {\n            return descriptor.value;\n          }\n        },\n\n        set() {\n          throwError(this, key);\n        }\n      });\n    }\n  } else {\n    Object.defineProperty(obj, key, {\n      set() {\n        throwError(this, key);\n      }\n    });\n  }\n}\n","import { ComponentCapabilities } from \"@glimmer/interfaces\";\n\nexport const CAPABILITIES: ComponentCapabilities = {\n  dynamicLayout: false,\n  dynamicTag: true,\n  prepareArgs: false,\n  createArgs: true,\n  attributeHook: true,\n  elementHook: true\n};\n","import { Factory, FactoryDefinition } from './factory';\nimport { RegistryReader, Injection } from './registry';\nimport { Resolver } from './resolver';\nimport { Dict } from './dict';\n\nexport default class Container {\n  private _registry: RegistryReader;\n  private _resolver: Resolver;\n  private _lookups: Dict<any>;\n  private _factoryDefinitionLookups: Dict<FactoryDefinition<any>>;\n\n  constructor(registry: RegistryReader, resolver: Resolver = null) {\n    this._registry = registry;\n    this._resolver = resolver;\n    this._lookups = {};\n    this._factoryDefinitionLookups = {};\n  }\n\n  factoryFor(specifier: string): Factory<any> {\n    let factoryDefinition: FactoryDefinition<any> = this._factoryDefinitionLookups[specifier];\n\n    if (!factoryDefinition) {\n      if (this._resolver) {\n        factoryDefinition = this._resolver.retrieve(specifier);\n      }\n\n      if (!factoryDefinition) {\n        factoryDefinition = this._registry.registration(specifier);\n      }\n\n      if (factoryDefinition) {\n        this._factoryDefinitionLookups[specifier] = factoryDefinition;\n      }\n    }\n\n    if (!factoryDefinition) {\n      return;\n    }\n\n    return this.buildFactory(specifier, factoryDefinition);\n  }\n\n  lookup(specifier: string): any {\n    let singleton = (this._registry.registeredOption(specifier, 'singleton') !== false);\n\n    if (singleton && this._lookups[specifier]) {\n      return this._lookups[specifier];\n    }\n\n    let factory = this.factoryFor(specifier);\n    if (!factory) { return; }\n\n    if (this._registry.registeredOption(specifier, 'instantiate') === false) {\n      return factory.class;\n    }\n\n    let object = factory.create();\n\n    if (singleton && object) {\n      this._lookups[specifier] = object;\n    }\n\n    return object;\n  }\n\n  defaultInjections(specifier: string): Object {\n    return {};\n  }\n\n  private buildInjections(specifier: string): Object {\n    let hash = this.defaultInjections(specifier);\n    let injections: Injection[] = this._registry.registeredInjections(specifier);\n    let injection: Injection;\n\n    for (let i = 0; i < injections.length; i++) {\n      injection = injections[i];\n      hash[injection.property] = this.lookup(injection.source);\n    }\n\n    return hash;\n  }\n\n  private buildFactory(specifier: string, factoryDefinition: FactoryDefinition<any>): Factory<any> {\n    let injections = this.buildInjections(specifier);\n\n    return {\n      class: factoryDefinition,\n      create(options) {\n        let mergedOptions = Object.assign({}, injections, options);\n\n        return factoryDefinition.create(mergedOptions);\n      }\n    }\n  }\n}\n","import { Dict } from './dict';\nimport { Factory, FactoryDefinition } from './factory';\n\nexport interface RegistrationOptions {\n  singleton?: boolean;\n  instantiate?: boolean;\n}\n\nexport interface Injection {\n  property: string,\n  source: string\n}\n\nexport interface RegistryWriter {\n  register(specifier: string, factory: any, options?: RegistrationOptions): void;\n  unregister(specifier: string): void;\n  registerOption(specifier: string, option: string, value: any): void;\n  unregisterOption(specifier: string, option: string): void;\n  registerInjection(specifier: string, property: string, source: string): void;\n}\n\nexport interface RegistryReader {\n  registration(specifier: string): any;\n  registeredOption(specifier: string, option: string): any;\n  registeredOptions(specifier: string): any;\n  registeredInjections(specifier: string): Injection[];\n}\n\nexport interface RegistryOptions {\n  fallback?: RegistryReader;\n}\n\nexport interface RegistryAccessor extends RegistryReader, RegistryWriter {}\n\nexport default class Registry implements RegistryAccessor {\n  private _registrations: Dict<FactoryDefinition<any>>;\n  private _registeredOptions: Dict<any>;\n  private _registeredInjections: Dict<Injection[]>;\n  private _fallback: RegistryReader;\n\n  constructor(options?: RegistryOptions) {\n    this._registrations = {};\n    this._registeredOptions = {};\n    this._registeredInjections = {};\n    if (options && options.fallback) {\n      this._fallback = options.fallback;\n    }\n  }\n\n  register(specifier: string, factoryDefinition: FactoryDefinition<any>, options?: RegistrationOptions): void {\n    this._registrations[specifier] = factoryDefinition;\n    if (options) {\n      this._registeredOptions[specifier] = options;\n    }\n  }\n\n  registration(specifier: string): FactoryDefinition<any> {\n    let registration = this._registrations[specifier];\n    if (registration === undefined && this._fallback) {\n      registration = this._fallback.registration(specifier);\n    }\n    return registration;\n  }\n\n  unregister(specifier: string): void {\n    delete this._registrations[specifier];\n    delete this._registeredOptions[specifier];\n    delete this._registeredInjections[specifier];\n  }\n\n  registerOption(specifier: string, option: string, value: any): void {\n    let options = this._registeredOptions[specifier];\n\n    if (!options) {\n      options = {};\n      this._registeredOptions[specifier] = options;\n    }\n\n    options[option] = value;\n  }\n\n  registeredOption(specifier: string, option: string): any {\n    let result: Boolean;\n    let options = this.registeredOptions(specifier);\n\n    if (options) {\n      result = options[option];\n    }\n\n    if (result === undefined && this._fallback !== undefined) {\n      result = this._fallback.registeredOption(specifier, option);\n    }\n\n    return result;\n  }\n\n  registeredOptions(specifier: string): any {\n    let options = this._registeredOptions[specifier];\n    if (options === undefined) {\n      let [type] = specifier.split(':');\n      options = this._registeredOptions[type];\n    }\n    return options;\n  }\n\n  unregisterOption(specifier: string, option: string): void {\n    let options = this._registeredOptions[specifier];\n\n    if (options) {\n      delete options[option];\n    }\n  }\n\n  registerInjection(specifier: string, property: string, source: string): void {\n    let injections = this._registeredInjections[specifier];\n    if (injections === undefined) {\n      this._registeredInjections[specifier] = injections = [];\n    }\n    injections.push({\n      property,\n      source\n    });\n  }\n\n  registeredInjections(specifier: string): Injection[] {\n    let [type] = specifier.split(':');\n    let injections: Injection[] = this._fallback ? this._fallback.registeredInjections(specifier) : [];\n    Array.prototype.push.apply(injections, this._registeredInjections[type]);\n    Array.prototype.push.apply(injections, this._registeredInjections[specifier]);\n    return injections;\n  }\n}\n","import { RegistrationOptions } from './registry';\nimport { Factory } from './factory';\n\n// TODO - use symbol\nexport const OWNER = '__owner__';\n\nexport function getOwner(object: Object): Owner {\n  return object[OWNER];\n}\n\nexport function setOwner(object: Object, owner: Owner): void {\n  object[OWNER] = owner;\n}\n\nexport interface Owner {\n  identify(specifier: string, referrer?: string): string;\n\n  factoryFor(specifier: string, referrer?: string): Factory<any>;\n  \n  lookup(specifier: string, referrer?: string): any;\n}\n","import { Bounds as VMBounds } from '@glimmer/runtime';\n\n/**\n * Contains the first and last DOM nodes in a component's rendered\n * template. These nodes can be used to traverse the section of DOM\n * that belongs to a particular component.\n *\n * Note that these nodes *can* change over the lifetime of a component\n * if the beginning or ending of the template is dynamic.\n */\nexport default class Bounds {\n  constructor(private _bounds: VMBounds) {\n  }\n\n  get firstNode(): Node {\n    return this._bounds.firstNode() as Node;\n  }\n\n  get lastNode(): Node {\n    return this._bounds.lastNode() as Node;\n  }\n}\n","import { initializeGuid, fillNulls, unreachable, assert } from '@glimmer/util';\n\nexport class AppendOpcodes {\n    constructor() {\n        this.evaluateOpcode = fillNulls(82 /* Size */).slice();\n    }\n    add(name, evaluate, kind = 'syscall') {\n        this.evaluateOpcode[name] = { syscall: kind === 'syscall', evaluate };\n    }\n    debugBefore(vm, opcode, type) {\n        if (false) {\n            /* tslint:disable */\n            let [name, params] = [];\n            // console.log(`${typePos(vm['pc'])}.`);\n            console.log(`${vm['pc'] - opcode.size}. ${''}`);\n            let debugParams = [];\n            for (let prop in params) {\n                debugParams.push(prop, \"=\", params[prop]);\n            }\n            console.log(...debugParams);\n            /* tslint:enable */\n        }\n        let sp;\n        let state;\n        if (false) {\n            let metadata = null;\n            if (metadata && metadata.before) {\n                state = metadata.before(opcode, vm);\n            } else {\n                state = undefined;\n            }\n            sp = vm.stack.sp;\n        }\n\n        return { sp: sp, state };\n    }\n    debugAfter(vm, opcode, type, pre) {\n        let expectedChange;\n        let { sp, state } = pre;\n        let metadata = null;\n        if (metadata !== null) {\n            if (typeof metadata.stackChange === 'number') {\n                expectedChange = metadata.stackChange;\n            } else {\n                expectedChange = metadata.stackChange({ opcode, constants: vm.constants, state });\n                if (isNaN(expectedChange)) throw unreachable();\n            }\n        }\n        let actualChange = vm.stack.sp - sp;\n        if (metadata && metadata.check && typeof expectedChange === 'number' && expectedChange !== actualChange) {\n            let [name, params] = [];\n            throw new Error(`Error in ${name}:\\n\\n${vm['pc'] + opcode.size}. ${''}\\n\\nStack changed by ${actualChange}, expected ${expectedChange}`);\n        }\n        if (false) {\n            /* tslint:disable */\n            console.log('%c -> pc: %d, ra: %d, fp: %d, sp: %d, s0: %O, s1: %O, t0: %O, t1: %O, v0: %O', 'color: orange', vm['pc'], vm['ra'], vm['fp'], vm['sp'], vm['s0'], vm['s1'], vm['t0'], vm['t1'], vm['v0']);\n            console.log('%c -> eval stack', 'color: red', vm.stack.toArray());\n            if (vm['scopeStack'].current === null) {\n                console.log('%c -> scope', 'color: green', \"null\");\n            } else {\n                console.log('%c -> scope', 'color: green', vm.scope()['slots'].map(s => s && s['value'] ? s['value']() : s));\n            }\n            console.log('%c -> elements', 'color: blue', vm.elements()['cursorStack']['stack'].map(c => c.element));\n            /* tslint:enable */\n        }\n    }\n    evaluate(vm, opcode, type) {\n        let operation = this.evaluateOpcode[type];\n        if (operation.syscall) {\n            (false && assert(!opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));\n\n            operation.evaluate(vm, opcode);\n        } else {\n            (false && assert(opcode.isMachine, `BUG: Mismatch between operation.syscall (${operation.syscall}) and opcode.isMachine (${opcode.isMachine}) for ${opcode.type}`));\n\n            operation.evaluate(vm.inner, opcode);\n        }\n    }\n}\nexport const APPEND_OPCODES = new AppendOpcodes();\nexport class AbstractOpcode {\n    constructor() {\n        initializeGuid(this);\n    }\n}\nexport class UpdatingOpcode extends AbstractOpcode {\n    constructor() {\n        super(...arguments);\n        this.next = null;\n        this.prev = null;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * Registers\n *\n * For the most part, these follows MIPS naming conventions, however the\n * register numbers are different.\n */\nexport var Register;\n(function (Register) {\n    // $0 or $pc (program counter): pointer into `program` for the next insturction; -1 means exit\n    Register[Register[\"pc\"] = 0] = \"pc\";\n    // $1 or $ra (return address): pointer into `program` for the return\n    Register[Register[\"ra\"] = 1] = \"ra\";\n    // $2 or $fp (frame pointer): pointer into the `evalStack` for the base of the stack\n    Register[Register[\"fp\"] = 2] = \"fp\";\n    // $3 or $sp (stack pointer): pointer into the `evalStack` for the top of the stack\n    Register[Register[\"sp\"] = 3] = \"sp\";\n    // $4-$5 or $s0-$s1 (saved): callee saved general-purpose registers\n    Register[Register[\"s0\"] = 4] = \"s0\";\n    Register[Register[\"s1\"] = 5] = \"s1\";\n    // $6-$7 or $t0-$t1 (temporaries): caller saved general-purpose registers\n    Register[Register[\"t0\"] = 6] = \"t0\";\n    Register[Register[\"t1\"] = 7] = \"t1\";\n    // $8 or $v0 (return value)\n    Register[Register[\"v0\"] = 8] = \"v0\";\n})(Register || (Register = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVnaXN0ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvdm0vbGliL3JlZ2lzdGVycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUtHOzs7Ozs7QUFFSCxBQUFNLE9BQU4sSUFBWSxBQXVCWDtBQXZCRCxXQUFZLEFBQVE7QUFDbEIsQUFBOEY7QUFDOUYsbUNBQUk7QUFFSixBQUFvRTtBQUNwRSxtQ0FBSTtBQUVKLEFBQW9GO0FBQ3BGLG1DQUFJO0FBRUosQUFBbUY7QUFDbkYsbUNBQUk7QUFFSixBQUFtRTtBQUNuRSxtQ0FBSTtBQUNKLG1DQUFJO0FBRUosQUFBeUU7QUFDekUsbUNBQUk7QUFDSixtQ0FBSTtBQUVKLEFBQTJCO0FBQzNCLG1DQUFJLEFBQ047QUFBQyxHQXZCVyxBQUFRLGFBQVIsQUFBUSxXQXVCbkIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJlZ2lzdGVyc1xuICpcbiAqIEZvciB0aGUgbW9zdCBwYXJ0LCB0aGVzZSBmb2xsb3dzIE1JUFMgbmFtaW5nIGNvbnZlbnRpb25zLCBob3dldmVyIHRoZVxuICogcmVnaXN0ZXIgbnVtYmVycyBhcmUgZGlmZmVyZW50LlxuICovXG5cbmV4cG9ydCBlbnVtIFJlZ2lzdGVyIHtcbiAgLy8gJDAgb3IgJHBjIChwcm9ncmFtIGNvdW50ZXIpOiBwb2ludGVyIGludG8gYHByb2dyYW1gIGZvciB0aGUgbmV4dCBpbnN0dXJjdGlvbjsgLTEgbWVhbnMgZXhpdFxuICAncGMnLFxuXG4gIC8vICQxIG9yICRyYSAocmV0dXJuIGFkZHJlc3MpOiBwb2ludGVyIGludG8gYHByb2dyYW1gIGZvciB0aGUgcmV0dXJuXG4gICdyYScsXG5cbiAgLy8gJDIgb3IgJGZwIChmcmFtZSBwb2ludGVyKTogcG9pbnRlciBpbnRvIHRoZSBgZXZhbFN0YWNrYCBmb3IgdGhlIGJhc2Ugb2YgdGhlIHN0YWNrXG4gICdmcCcsXG5cbiAgLy8gJDMgb3IgJHNwIChzdGFjayBwb2ludGVyKTogcG9pbnRlciBpbnRvIHRoZSBgZXZhbFN0YWNrYCBmb3IgdGhlIHRvcCBvZiB0aGUgc3RhY2tcbiAgJ3NwJyxcblxuICAvLyAkNC0kNSBvciAkczAtJHMxIChzYXZlZCk6IGNhbGxlZSBzYXZlZCBnZW5lcmFsLXB1cnBvc2UgcmVnaXN0ZXJzXG4gICdzMCcsXG4gICdzMScsXG5cbiAgLy8gJDYtJDcgb3IgJHQwLSR0MSAodGVtcG9yYXJpZXMpOiBjYWxsZXIgc2F2ZWQgZ2VuZXJhbC1wdXJwb3NlIHJlZ2lzdGVyc1xuICAndDAnLFxuICAndDEnLFxuXG4gIC8vICQ4IG9yICR2MCAocmV0dXJuIHZhbHVlKVxuICAndjAnXG59XG4iXX0=","import { ConstReference } from '@glimmer/reference';\nexport class PrimitiveReference extends ConstReference {\n    constructor(value) {\n        super(value);\n    }\n    static create(value) {\n        if (value === undefined) {\n            return UNDEFINED_REFERENCE;\n        } else if (value === null) {\n            return NULL_REFERENCE;\n        } else if (value === true) {\n            return TRUE_REFERENCE;\n        } else if (value === false) {\n            return FALSE_REFERENCE;\n        } else if (typeof value === 'number') {\n            return new ValueReference(value);\n        } else {\n            return new StringReference(value);\n        }\n    }\n    get(_key) {\n        return UNDEFINED_REFERENCE;\n    }\n}\nclass StringReference extends PrimitiveReference {\n    constructor() {\n        super(...arguments);\n        this.lengthReference = null;\n    }\n    get(key) {\n        if (key === 'length') {\n            let { lengthReference } = this;\n            if (lengthReference === null) {\n                lengthReference = this.lengthReference = new ValueReference(this.inner.length);\n            }\n            return lengthReference;\n        } else {\n            return super.get(key);\n        }\n    }\n}\nclass ValueReference extends PrimitiveReference {\n    constructor(value) {\n        super(value);\n    }\n}\nexport const UNDEFINED_REFERENCE = new ValueReference(undefined);\nexport const NULL_REFERENCE = new ValueReference(null);\nexport const TRUE_REFERENCE = new ValueReference(true);\nexport const FALSE_REFERENCE = new ValueReference(false);\nexport class ConditionalReference {\n    constructor(inner) {\n        this.inner = inner;\n        this.tag = inner.tag;\n    }\n    value() {\n        return this.toBool(this.inner.value());\n    }\n    toBool(value) {\n        return !!value;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmZXJlbmNlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsQUFBTyxTQUFFLEFBQWMsQUFBaUMsc0JBQU0sQUFBb0IsQUFBQztBQUluRixBQUFNLGFBQStDLDJCQUFRLEFBQWlCO0FBaUI1RSxnQkFBc0IsQUFBUTtBQUM1QixBQUFLLGNBQUMsQUFBSyxBQUFDLEFBQUMsQUFDZjtBQUFDO0FBbEJELEFBQU0sV0FBQyxBQUFNLE9BQXNCLEFBQVE7QUFDekMsQUFBRSxBQUFDLFlBQUMsQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQUM7QUFDeEIsQUFBTSxtQkFBQyxBQUE0QyxBQUFDLEFBQ3REO0FBQUMsQUFBQyxBQUFJLG1CQUFLLEFBQUssVUFBSyxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQzFCLEFBQU0sbUJBQUMsQUFBdUMsQUFBQyxBQUNqRDtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxVQUVDLEFBQUssVUFBSyxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQzFCLEFBQU0sbUJBQUMsQUFBdUMsQUFBQyxBQUNqRDtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxVQUVDLEFBQUssVUFBSyxBQUFLLEFBQUMsT0FBQyxBQUFDO0FBQzNCLEFBQU0sbUJBQUMsQUFBd0MsQUFBQyxBQUNsRDtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxVQUVDLE9BQU8sQUFBSyxVQUFLLEFBQVEsQUFBQyxVQUFDLEFBQUM7QUFDckMsQUFBTSxtQkFBQyxJQUFJLEFBQWMsZUFBQyxBQUFLLEFBQTBCLEFBQUMsQUFDNUQ7QUFBQyxBQUFDLEFBQUksU0FGQyxBQUFFLEFBQUMsTUFFSCxBQUFDO0FBQ04sQUFBTSxtQkFBQyxJQUFJLEFBQWUsZ0JBQUMsQUFBZSxBQUFtRCxBQUFDLEFBQ2hHO0FBQUMsQUFDSDtBQUFDO0FBTUQsQUFBRyxRQUFDLEFBQVk7QUFDZCxBQUFNLGVBQUMsQUFBbUIsQUFBQyxBQUM3QjtBQUFDLEFBQ0Y7O0FBRUQsTUFBc0Isd0JBQVEsQUFBMEI7QUFBeEQ7O0FBQ1UsYUFBZSxrQkFBdUMsQUFBSSxBQUFDLEFBZXJFO0FBQUM7QUFiQyxBQUFHLFFBQUMsQUFBVztBQUNiLEFBQUUsQUFBQyxZQUFDLEFBQUcsUUFBSyxBQUFRLEFBQUMsVUFBQyxBQUFDO0FBQ3JCLGdCQUFJLEVBQUUsQUFBZSxBQUFFLG9CQUFHLEFBQUksQUFBQztBQUUvQixBQUFFLEFBQUMsZ0JBQUMsQUFBZSxvQkFBSyxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQzdCLEFBQWUsa0NBQUcsQUFBSSxLQUFDLEFBQWUsa0JBQUcsSUFBSSxBQUFjLGVBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFNLEFBQUMsQUFBQyxBQUNqRjtBQUFDO0FBRUQsQUFBTSxtQkFBQyxBQUFlLEFBQUMsQUFDekI7QUFBQyxBQUFDLEFBQUksZUFBQyxBQUFDO0FBQ04sQUFBTSxtQkFBQyxBQUFLLE1BQUMsQUFBRyxJQUFDLEFBQUcsQUFBQyxBQUFDLEFBQ3hCO0FBQUMsQUFDSDtBQUFDLEFBQ0Y7O0FBSUQsTUFBc0MsdUJBQVEsQUFBcUI7QUFDakUsZ0JBQVksQUFBUTtBQUNsQixBQUFLLGNBQUMsQUFBSyxBQUFDLEFBQUMsQUFDZjtBQUFDLEFBQ0Y7O0FBRUQsQUFBTSxPQUFDLE1BQU0sQUFBbUIsc0JBQWtDLElBQUksQUFBYyxlQUFDLEFBQVMsQUFBQyxBQUFDO0FBQ2hHLEFBQU0sT0FBQyxNQUFNLEFBQWMsaUJBQTZCLElBQUksQUFBYyxlQUFDLEFBQUksQUFBQyxBQUFDO0FBQ2pGLEFBQU0sT0FBQyxNQUFNLEFBQWMsaUJBQWdDLElBQUksQUFBYyxlQUFDLEFBQUksQUFBQyxBQUFDO0FBQ3BGLEFBQU0sT0FBQyxNQUFNLEFBQWUsa0JBQWdDLElBQUksQUFBYyxlQUFDLEFBQUssQUFBQyxBQUFDO0FBRXRGLEFBQU07QUFHSixnQkFBb0IsQUFBd0I7QUFBeEIsYUFBSyxRQUFMLEFBQUssQUFBbUI7QUFDMUMsQUFBSSxhQUFDLEFBQUcsTUFBRyxBQUFLLE1BQUMsQUFBRyxBQUFDLEFBQ3ZCO0FBQUM7QUFFRCxBQUFLO0FBQ0gsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQ3pDO0FBQUM7QUFFUyxBQUFNLFdBQUMsQUFBYTtBQUM1QixBQUFNLGVBQUMsQ0FBQyxDQUFDLEFBQUssQUFBQyxBQUNqQjtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIE9wdGlvbiwgUmVjYXN0IH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb25zdFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSwgUmVmZXJlbmNlLCBUYWcgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuXG5leHBvcnQgdHlwZSBQcmltaXRpdmUgPSB1bmRlZmluZWQgfCBudWxsIHwgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZztcblxuZXhwb3J0IGNsYXNzIFByaW1pdGl2ZVJlZmVyZW5jZTxUIGV4dGVuZHMgUHJpbWl0aXZlPiBleHRlbmRzIENvbnN0UmVmZXJlbmNlPFQ+IGltcGxlbWVudHMgUGF0aFJlZmVyZW5jZTxUPiB7XG4gIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIFByaW1pdGl2ZT4odmFsdWU6IFQpOiBQcmltaXRpdmVSZWZlcmVuY2U8VD4ge1xuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gVU5ERUZJTkVEX1JFRkVSRU5DRSBhcyBQcmltaXRpdmVSZWZlcmVuY2U8VD47XG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIE5VTExfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICByZXR1cm4gVFJVRV9SRUZFUkVOQ0UgYXMgUHJpbWl0aXZlUmVmZXJlbmNlPFQ+O1xuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gRkFMU0VfUkVGRVJFTkNFIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBuZXcgVmFsdWVSZWZlcmVuY2UodmFsdWUpIGFzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBTdHJpbmdSZWZlcmVuY2UodmFsdWUgYXMgc3RyaW5nKSBhcyBSZWNhc3Q8U3RyaW5nUmVmZXJlbmNlLCBQcmltaXRpdmVSZWZlcmVuY2U8VD4+O1xuICAgIH1cbiAgfVxuXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcih2YWx1ZTogVCkge1xuICAgIHN1cGVyKHZhbHVlKTtcbiAgfVxuXG4gIGdldChfa2V5OiBzdHJpbmcpOiBQcmltaXRpdmVSZWZlcmVuY2U8UHJpbWl0aXZlPiB7XG4gICAgcmV0dXJuIFVOREVGSU5FRF9SRUZFUkVOQ0U7XG4gIH1cbn1cblxuY2xhc3MgU3RyaW5nUmVmZXJlbmNlIGV4dGVuZHMgUHJpbWl0aXZlUmVmZXJlbmNlPHN0cmluZz4ge1xuICBwcml2YXRlIGxlbmd0aFJlZmVyZW5jZTogT3B0aW9uPFByaW1pdGl2ZVJlZmVyZW5jZTxudW1iZXI+PiA9IG51bGw7XG5cbiAgZ2V0KGtleTogc3RyaW5nKTogUHJpbWl0aXZlUmVmZXJlbmNlPFByaW1pdGl2ZT4ge1xuICAgIGlmIChrZXkgPT09ICdsZW5ndGgnKSB7XG4gICAgICBsZXQgeyBsZW5ndGhSZWZlcmVuY2UgfSA9IHRoaXM7XG5cbiAgICAgIGlmIChsZW5ndGhSZWZlcmVuY2UgPT09IG51bGwpIHtcbiAgICAgICAgbGVuZ3RoUmVmZXJlbmNlID0gdGhpcy5sZW5ndGhSZWZlcmVuY2UgPSBuZXcgVmFsdWVSZWZlcmVuY2UodGhpcy5pbm5lci5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gbGVuZ3RoUmVmZXJlbmNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleSk7XG4gICAgfVxuICB9XG59XG5cbnR5cGUgVmFsdWUgPSB1bmRlZmluZWQgfCBudWxsIHwgbnVtYmVyIHwgYm9vbGVhbjtcblxuY2xhc3MgVmFsdWVSZWZlcmVuY2U8VCBleHRlbmRzIFZhbHVlPiBleHRlbmRzIFByaW1pdGl2ZVJlZmVyZW5jZTxUPiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlOiBUKSB7XG4gICAgc3VwZXIodmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBVTkRFRklORURfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8dW5kZWZpbmVkPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh1bmRlZmluZWQpO1xuZXhwb3J0IGNvbnN0IE5VTExfUkVGRVJFTkNFOiBQcmltaXRpdmVSZWZlcmVuY2U8bnVsbD4gPSBuZXcgVmFsdWVSZWZlcmVuY2UobnVsbCk7XG5leHBvcnQgY29uc3QgVFJVRV9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZSh0cnVlKTtcbmV4cG9ydCBjb25zdCBGQUxTRV9SRUZFUkVOQ0U6IFByaW1pdGl2ZVJlZmVyZW5jZTxib29sZWFuPiA9IG5ldyBWYWx1ZVJlZmVyZW5jZShmYWxzZSk7XG5cbmV4cG9ydCBjbGFzcyBDb25kaXRpb25hbFJlZmVyZW5jZSBpbXBsZW1lbnRzIFJlZmVyZW5jZTxib29sZWFuPiB7XG4gIHB1YmxpYyB0YWc6IFRhZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlubmVyOiBSZWZlcmVuY2U8T3BhcXVlPikge1xuICAgIHRoaXMudGFnID0gaW5uZXIudGFnO1xuICB9XG5cbiAgdmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudG9Cb29sKHRoaXMuaW5uZXIudmFsdWUoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgdG9Cb29sKHZhbHVlOiBPcGFxdWUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF2YWx1ZTtcbiAgfVxufVxuIl19","import { CachedReference, combineTagged } from '@glimmer/reference';\nexport class ConcatReference extends CachedReference {\n    constructor(parts) {\n        super();\n        this.parts = parts;\n        this.tag = combineTagged(parts);\n    }\n    compute() {\n        let parts = new Array();\n        for (let i = 0; i < this.parts.length; i++) {\n            let value = this.parts[i].value();\n            if (value !== null && value !== undefined) {\n                parts[i] = castToString(value);\n            }\n        }\n        if (parts.length > 0) {\n            return parts.join('');\n        }\n        return null;\n    }\n}\nfunction castToString(value) {\n    if (typeof value.toString !== 'function') {\n        return '';\n    }\n    return String(value);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uY2F0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvY29uY2F0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEFBQU8sU0FBRSxBQUFlLGlCQUFFLEFBQWEsQUFBc0IscUJBQU0sQUFBb0IsQUFBQztBQUV4RixBQUFNLGFBQXVCLHdCQUFRLEFBQStCO0FBR2xFLGdCQUFvQixBQUFtQztBQUNyRCxBQUFLLEFBQUUsQUFBQztBQURVLGFBQUssUUFBTCxBQUFLLEFBQThCO0FBRXJELEFBQUksYUFBQyxBQUFHLE1BQUcsQUFBYSxjQUFDLEFBQUssQUFBQyxBQUFDLEFBQ2xDO0FBQUM7QUFFUyxBQUFPO0FBQ2YsWUFBSSxBQUFLLFFBQUcsSUFBSSxBQUFLLEFBQVUsQUFBQztBQUVoQyxBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDM0MsZ0JBQUksQUFBSyxRQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBQyxBQUFDLEdBQUMsQUFBSyxBQUFFLEFBQUM7QUFFbEMsQUFBRSxBQUFDLGdCQUFDLEFBQUssVUFBSyxBQUFJLFFBQUksQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQUM7QUFDMUMsQUFBSyxzQkFBQyxBQUFDLEFBQUMsS0FBRyxBQUFZLGFBQUMsQUFBSyxBQUFDLEFBQUMsQUFDakM7QUFBQyxBQUNIO0FBQUM7QUFFRCxBQUFFLEFBQUMsWUFBQyxBQUFLLE1BQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxHQUFDLEFBQUM7QUFDckIsQUFBTSxtQkFBQyxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUUsQUFBQyxBQUFDLEFBQ3hCO0FBQUM7QUFFRCxBQUFNLGVBQUMsQUFBSSxBQUFDLEFBQ2Q7QUFBQyxBQUNGOztBQUVELHNCQUFzQixBQUFTO0FBQzdCLEFBQUUsQUFBQyxRQUFDLE9BQU8sQUFBSyxNQUFDLEFBQVEsYUFBSyxBQUFVLEFBQUMsWUFBQyxBQUFDO0FBQ3pDLEFBQU0sZUFBQyxBQUFFLEFBQUMsQUFDWjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUMsQUFBQyxBQUN2QjtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlLCBPcHRpb24gfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENhY2hlZFJlZmVyZW5jZSwgY29tYmluZVRhZ2dlZCwgUGF0aFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcblxuZXhwb3J0IGNsYXNzIENvbmNhdFJlZmVyZW5jZSBleHRlbmRzIENhY2hlZFJlZmVyZW5jZTxPcHRpb248c3RyaW5nPj4ge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJ0czogQXJyYXk8UGF0aFJlZmVyZW5jZTxPcGFxdWU+Pikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKHBhcnRzKTtcbiAgfVxuXG4gIHByb3RlY3RlZCBjb21wdXRlKCk6IE9wdGlvbjxzdHJpbmc+IHtcbiAgICBsZXQgcGFydHMgPSBuZXcgQXJyYXk8c3RyaW5nPigpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLnBhcnRzW2ldLnZhbHVlKCk7XG5cbiAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcnRzW2ldID0gY2FzdFRvU3RyaW5nKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocGFydHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJycpO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhc3RUb1N0cmluZyh2YWx1ZToge30pIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuIl19","export function stackAssert(name, top) {\n    return `Expected top of stack to be ${name}, was ${String(top)}`;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXNzZXJ0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGlsZWQvb3Bjb2Rlcy9hc3NlcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsQUFBTSw0QkFBc0IsQUFBWSxNQUFFLEFBQVc7QUFDbkQsQUFBTSxBQUFDLDBDQUErQixBQUFJLGFBQVMsQUFBTSxPQUFDLEFBQUcsQUFBQyxJQUFFLEFBQUMsQUFDbkU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHN0YWNrQXNzZXJ0KG5hbWU6IHN0cmluZywgdG9wOiBPcGFxdWUpIHtcbiAgcmV0dXJuIGBFeHBlY3RlZCB0b3Agb2Ygc3RhY2sgdG8gYmUgJHtuYW1lfSwgd2FzICR7U3RyaW5nKHRvcCl9YDtcbn0iXX0=","import { Register } from '@glimmer/vm';\nimport { APPEND_OPCODES } from '../../opcodes';\nimport { FALSE_REFERENCE, TRUE_REFERENCE } from '../../references';\nimport { ConcatReference } from '../expressions/concat';\nimport { assert } from \"@glimmer/util\";\n\nimport { stackAssert } from './assert';\n\nAPPEND_OPCODES.add(1 /* Helper */, (vm, { op1: handle }) => {\n    let stack = vm.stack;\n    let helper = vm.constants.resolveHandle(handle);\n    let args = stack.pop();\n    let value = helper(vm, args);\n    vm.loadValue(Register.v0, value);\n});\nAPPEND_OPCODES.add(4 /* GetVariable */, (vm, { op1: symbol }) => {\n    let expr = vm.referenceForSymbol(symbol);\n    vm.stack.push(expr);\n});\nAPPEND_OPCODES.add(2 /* SetVariable */, (vm, { op1: symbol }) => {\n    let expr = vm.stack.pop();\n    vm.scope().bindSymbol(symbol, expr);\n});\nAPPEND_OPCODES.add(3 /* SetBlock */, (vm, { op1: symbol }) => {\n    let handle = vm.stack.pop();\n    let scope = vm.stack.pop(); // FIXME(mmun): shouldn't need to cast this\n    let table = vm.stack.pop();\n    let block = table ? [handle, scope, table] : null;\n    vm.scope().bindBlock(symbol, block);\n});\nAPPEND_OPCODES.add(80 /* ResolveMaybeLocal */, (vm, { op1: _name }) => {\n    let name = vm.constants.getString(_name);\n    let locals = vm.scope().getPartialMap();\n    let ref = locals[name];\n    if (ref === undefined) {\n        ref = vm.getSelf().get(name);\n    }\n    vm.stack.push(ref);\n});\nAPPEND_OPCODES.add(17 /* RootScope */, (vm, { op1: symbols, op2: bindCallerScope }) => {\n    vm.pushRootScope(symbols, !!bindCallerScope);\n});\nAPPEND_OPCODES.add(5 /* GetProperty */, (vm, { op1: _key }) => {\n    let key = vm.constants.getString(_key);\n    let expr = vm.stack.pop();\n    vm.stack.push(expr.get(key));\n});\nAPPEND_OPCODES.add(6 /* GetBlock */, (vm, { op1: _block }) => {\n    let { stack } = vm;\n    let block = vm.scope().getBlock(_block);\n    if (block) {\n        stack.push(block[2]);\n        stack.push(block[1]);\n        stack.push(block[0]);\n    } else {\n        stack.push(null);\n        stack.push(null);\n        stack.push(null);\n    }\n});\nAPPEND_OPCODES.add(7 /* HasBlock */, (vm, { op1: _block }) => {\n    let hasBlock = !!vm.scope().getBlock(_block);\n    vm.stack.push(hasBlock ? TRUE_REFERENCE : FALSE_REFERENCE);\n});\nAPPEND_OPCODES.add(8 /* HasBlockParams */, vm => {\n    // FIXME(mmun): should only need to push the symbol table\n    let block = vm.stack.pop();\n    let scope = vm.stack.pop();\n\n    let table = vm.stack.pop();\n    (false && assert(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table)));\n\n    let hasBlockParams = table && table.parameters.length;\n    vm.stack.push(hasBlockParams ? TRUE_REFERENCE : FALSE_REFERENCE);\n});\nAPPEND_OPCODES.add(9 /* Concat */, (vm, { op1: count }) => {\n    let out = new Array(count);\n    for (let i = count; i > 0; i--) {\n        let offset = i - 1;\n        out[offset] = vm.stack.pop();\n    }\n    vm.stack.push(new ConcatReference(out));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var Opcodes;\n(function (Opcodes) {\n    // Statements\n    Opcodes[Opcodes[\"Text\"] = 0] = \"Text\";\n    Opcodes[Opcodes[\"Append\"] = 1] = \"Append\";\n    Opcodes[Opcodes[\"Comment\"] = 2] = \"Comment\";\n    Opcodes[Opcodes[\"Modifier\"] = 3] = \"Modifier\";\n    Opcodes[Opcodes[\"Block\"] = 4] = \"Block\";\n    Opcodes[Opcodes[\"Component\"] = 5] = \"Component\";\n    Opcodes[Opcodes[\"OpenElement\"] = 6] = \"OpenElement\";\n    Opcodes[Opcodes[\"OpenSplattedElement\"] = 7] = \"OpenSplattedElement\";\n    Opcodes[Opcodes[\"FlushElement\"] = 8] = \"FlushElement\";\n    Opcodes[Opcodes[\"CloseElement\"] = 9] = \"CloseElement\";\n    Opcodes[Opcodes[\"StaticAttr\"] = 10] = \"StaticAttr\";\n    Opcodes[Opcodes[\"DynamicAttr\"] = 11] = \"DynamicAttr\";\n    Opcodes[Opcodes[\"AttrSplat\"] = 12] = \"AttrSplat\";\n    Opcodes[Opcodes[\"Yield\"] = 13] = \"Yield\";\n    Opcodes[Opcodes[\"Partial\"] = 14] = \"Partial\";\n    Opcodes[Opcodes[\"DynamicArg\"] = 15] = \"DynamicArg\";\n    Opcodes[Opcodes[\"StaticArg\"] = 16] = \"StaticArg\";\n    Opcodes[Opcodes[\"TrustingAttr\"] = 17] = \"TrustingAttr\";\n    Opcodes[Opcodes[\"Debugger\"] = 18] = \"Debugger\";\n    Opcodes[Opcodes[\"ClientSideStatement\"] = 19] = \"ClientSideStatement\";\n    // Expressions\n    Opcodes[Opcodes[\"Unknown\"] = 20] = \"Unknown\";\n    Opcodes[Opcodes[\"Get\"] = 21] = \"Get\";\n    Opcodes[Opcodes[\"MaybeLocal\"] = 22] = \"MaybeLocal\";\n    Opcodes[Opcodes[\"HasBlock\"] = 23] = \"HasBlock\";\n    Opcodes[Opcodes[\"HasBlockParams\"] = 24] = \"HasBlockParams\";\n    Opcodes[Opcodes[\"Undefined\"] = 25] = \"Undefined\";\n    Opcodes[Opcodes[\"Helper\"] = 26] = \"Helper\";\n    Opcodes[Opcodes[\"Concat\"] = 27] = \"Concat\";\n    Opcodes[Opcodes[\"ClientSideExpression\"] = 28] = \"ClientSideExpression\";\n})(Opcodes || (Opcodes = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Bjb2Rlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3dpcmUtZm9ybWF0L2xpYi9vcGNvZGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEFBQU0sT0FBTixJQUFZLEFBbUNYO0FBbkNELFdBQVksQUFBTztBQUNqQixBQUFhO0FBQ2IsbUNBQUk7QUFDSixxQ0FBTTtBQUNOLHNDQUFPO0FBQ1AsdUNBQVE7QUFDUixvQ0FBSztBQUNMLHdDQUFTO0FBQ1QsMENBQVc7QUFDWCxrREFBbUI7QUFDbkIsMkNBQVk7QUFDWiwyQ0FBWTtBQUNaLDBDQUFVO0FBQ1YsMkNBQVc7QUFDWCx5Q0FBUztBQUNULHFDQUFLO0FBQ0wsdUNBQU87QUFFUCwwQ0FBVTtBQUNWLHlDQUFTO0FBQ1QsNENBQVk7QUFDWix3Q0FBUTtBQUNSLG1EQUFtQjtBQUVuQixBQUFjO0FBRWQsdUNBQU87QUFDUCxtQ0FBRztBQUNILDBDQUFVO0FBQ1Ysd0NBQVE7QUFDUiw4Q0FBYztBQUNkLHlDQUFTO0FBQ1Qsc0NBQU07QUFDTixzQ0FBTTtBQUNOLG9EQUFvQixBQUN0QjtBQUFDLEdBbkNXLEFBQU8sWUFBUCxBQUFPLFVBbUNsQiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIE9wY29kZXMge1xuICAvLyBTdGF0ZW1lbnRzXG4gIFRleHQsXG4gIEFwcGVuZCxcbiAgQ29tbWVudCxcbiAgTW9kaWZpZXIsXG4gIEJsb2NrLFxuICBDb21wb25lbnQsXG4gIE9wZW5FbGVtZW50LFxuICBPcGVuU3BsYXR0ZWRFbGVtZW50LFxuICBGbHVzaEVsZW1lbnQsXG4gIENsb3NlRWxlbWVudCxcbiAgU3RhdGljQXR0cixcbiAgRHluYW1pY0F0dHIsXG4gIEF0dHJTcGxhdCxcbiAgWWllbGQsXG4gIFBhcnRpYWwsXG5cbiAgRHluYW1pY0FyZyxcbiAgU3RhdGljQXJnLFxuICBUcnVzdGluZ0F0dHIsXG4gIERlYnVnZ2VyLFxuICBDbGllbnRTaWRlU3RhdGVtZW50LFxuXG4gIC8vIEV4cHJlc3Npb25zXG5cbiAgVW5rbm93bixcbiAgR2V0LFxuICBNYXliZUxvY2FsLFxuICBIYXNCbG9jayxcbiAgSGFzQmxvY2tQYXJhbXMsXG4gIFVuZGVmaW5lZCxcbiAgSGVscGVyLFxuICBDb25jYXQsXG4gIENsaWVudFNpZGVFeHByZXNzaW9uXG59XG4iXX0=","import { Opcodes } from './lib/opcodes';\nexport { Opcodes as Ops } from './lib/opcodes';\nexport function is(variant) {\n    return function (value) {\n        return Array.isArray(value) && value[0] === variant;\n    };\n}\n// Statements\nexport const isModifier = is(Opcodes.Modifier);\nexport const isFlushElement = is(Opcodes.FlushElement);\nexport function isAttribute(val) {\n    return val[0] === Opcodes.StaticAttr || val[0] === Opcodes.DynamicAttr || val[0] === Opcodes.TrustingAttr;\n}\nexport function isArgument(val) {\n    return val[0] === Opcodes.StaticArg || val[0] === Opcodes.DynamicArg;\n}\n// Expressions\nexport const isGet = is(Opcodes.Get);\nexport const isMaybeLocal = is(Opcodes.MaybeLocal);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export var Ops;\n(function (Ops) {\n    Ops[Ops[\"OpenComponentElement\"] = 0] = \"OpenComponentElement\";\n    Ops[Ops[\"DidCreateElement\"] = 1] = \"DidCreateElement\";\n    Ops[Ops[\"SetComponentAttrs\"] = 2] = \"SetComponentAttrs\";\n    Ops[Ops[\"DidRenderLayout\"] = 3] = \"DidRenderLayout\";\n    Ops[Ops[\"Debugger\"] = 4] = \"Debugger\";\n})(Ops || (Ops = {}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xpZW50LXNpZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9vcGNvZGUtY29tcGlsZXIvbGliL2NsaWVudC1zaWRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLEFBQU0sT0FBTixJQUFZLEFBTVg7QUFORCxXQUFZLEFBQUc7QUFDYiwyQ0FBb0I7QUFDcEIsdUNBQWdCO0FBQ2hCLHdDQUFpQjtBQUNqQixzQ0FBZTtBQUNmLCtCQUFRLEFBQ1Y7QUFBQyxHQU5XLEFBQUcsUUFBSCxBQUFHLE1BTWQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHMgYXMgV2lyZUZvcm1hdE9wcyB9IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcblxuZXhwb3J0IGVudW0gT3BzIHtcbiAgT3BlbkNvbXBvbmVudEVsZW1lbnQsXG4gIERpZENyZWF0ZUVsZW1lbnQsXG4gIFNldENvbXBvbmVudEF0dHJzLFxuICBEaWRSZW5kZXJMYXlvdXQsXG4gIERlYnVnZ2VyXG59XG5cbmltcG9ydCBDbGllbnRTaWRlU3RhdGVtZW50ID0gV2lyZUZvcm1hdE9wcy5DbGllbnRTaWRlU3RhdGVtZW50O1xuXG5leHBvcnQgdHlwZSBPcGVuQ29tcG9uZW50RWxlbWVudCAgPSBbQ2xpZW50U2lkZVN0YXRlbWVudCwgT3BzLk9wZW5Db21wb25lbnRFbGVtZW50LCBzdHJpbmddO1xuZXhwb3J0IHR5cGUgRGlkQ3JlYXRlRWxlbWVudCAgICAgID0gW0NsaWVudFNpZGVTdGF0ZW1lbnQsIE9wcy5EaWRDcmVhdGVFbGVtZW50XTtcbmV4cG9ydCB0eXBlIFNldENvbXBvbmVudEF0dHJzICAgICA9IFtDbGllbnRTaWRlU3RhdGVtZW50LCBPcHMuU2V0Q29tcG9uZW50QXR0cnMsIGJvb2xlYW5dO1xuZXhwb3J0IHR5cGUgRGlkUmVuZGVyTGF5b3V0ICAgICAgID0gW0NsaWVudFNpZGVTdGF0ZW1lbnQsIE9wcy5EaWRSZW5kZXJMYXlvdXRdO1xuXG5leHBvcnQgdHlwZSBDbGllbnRTaWRlU3RhdGVtZW50ID1cbiAgICBPcGVuQ29tcG9uZW50RWxlbWVudFxuICB8IERpZENyZWF0ZUVsZW1lbnRcbiAgfCBTZXRDb21wb25lbnRBdHRyc1xuICB8IERpZFJlbmRlckxheW91dFxuICA7XG4iXX0=","import { assert, dict, EMPTY_ARRAY } from '@glimmer/util';\nimport { Register } from '@glimmer/vm';\nimport * as WireFormat from '@glimmer/wire-format';\nimport * as ClientSide from './client-side';\nvar Ops = WireFormat.Ops;\nexport const ATTRS_BLOCK = '&attrs';\nexport class Compilers {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.names = dict();\n        this.funcs = [];\n    }\n    add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    }\n    compile(sexp, builder) {\n        let name = sexp[this.offset];\n        let index = this.names[name];\n        let func = this.funcs[index];\n        (false && assert(!!func, `expected an implementation for ${this.offset === 0 ? Ops[sexp[0]] : ClientSide.Ops[sexp[1]]}`));\n\n        func(sexp, builder);\n    }\n}\nlet _statementCompiler;\nexport function statementCompiler() {\n    if (_statementCompiler) {\n        return _statementCompiler;\n    }\n    const STATEMENTS = _statementCompiler = new Compilers();\n    STATEMENTS.add(Ops.Text, (sexp, builder) => {\n        builder.text(sexp[1]);\n    });\n    STATEMENTS.add(Ops.Comment, (sexp, builder) => {\n        builder.comment(sexp[1]);\n    });\n    STATEMENTS.add(Ops.CloseElement, (_sexp, builder) => {\n        builder.closeElement();\n    });\n    STATEMENTS.add(Ops.FlushElement, (_sexp, builder) => {\n        builder.flushElement();\n    });\n    STATEMENTS.add(Ops.Modifier, (sexp, builder) => {\n        let { resolver, referrer } = builder;\n        let [, name, params, hash] = sexp;\n        let handle = resolver.lookupModifier(name, referrer);\n        if (handle) {\n            builder.modifier(handle, params, hash);\n        } else {\n            throw new Error(`Compile Error ${name} is not a modifier: Helpers may not be used in the element form.`);\n        }\n    });\n    STATEMENTS.add(Ops.StaticAttr, (sexp, builder) => {\n        let [, name, value, namespace] = sexp;\n        builder.staticAttr(name, namespace, value);\n    });\n    STATEMENTS.add(Ops.DynamicAttr, (sexp, builder) => {\n        dynamicAttr(sexp, false, builder);\n    });\n    STATEMENTS.add(Ops.TrustingAttr, (sexp, builder) => {\n        dynamicAttr(sexp, true, builder);\n    });\n    STATEMENTS.add(Ops.OpenElement, (sexp, builder) => {\n        builder.openPrimitiveElement(sexp[1]);\n    });\n    STATEMENTS.add(Ops.OpenSplattedElement, (sexp, builder) => {\n        builder.setComponentAttrs(true);\n        builder.putComponentOperations();\n        builder.openPrimitiveElement(sexp[1]);\n    });\n    STATEMENTS.add(Ops.Component, (sexp, builder) => {\n        let [, tag, _attrs, args, block] = sexp;\n        let { resolver, referrer } = builder;\n        let handle = resolver.lookupComponentDefinition(tag, referrer);\n        if (handle !== null) {\n            let capabilities = resolver.getCapabilities(handle);\n            let attrs = [[Ops.ClientSideStatement, ClientSide.Ops.SetComponentAttrs, true], ..._attrs, [Ops.ClientSideStatement, ClientSide.Ops.SetComponentAttrs, false]];\n            let attrsBlock = builder.inlineBlock({ statements: attrs, parameters: EMPTY_ARRAY });\n            let child = builder.template(block);\n            if (capabilities.dynamicLayout === false) {\n                let layout = resolver.getLayout(handle);\n                builder.pushComponentDefinition(handle);\n                builder.invokeStaticComponent(capabilities, layout, attrsBlock, null, args, false, child && child);\n            } else {\n                builder.pushComponentDefinition(handle);\n                builder.invokeComponent(attrsBlock, null, args, false, child && child);\n            }\n        } else {\n            throw new Error(`Compile Error: Cannot find component ${tag}`);\n        }\n    });\n    STATEMENTS.add(Ops.Partial, (sexp, builder) => {\n        let [, name, evalInfo] = sexp;\n        let { referrer } = builder;\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        builder.expr(name);\n        builder.dup();\n        builder.enter(2);\n        builder.jumpUnless('ELSE');\n        builder.invokePartial(referrer, builder.evalSymbols(), evalInfo);\n        builder.popScope();\n        builder.popFrame();\n        builder.label('ELSE');\n        builder.exit();\n        builder.return();\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    STATEMENTS.add(Ops.Yield, (sexp, builder) => {\n        let [, to, params] = sexp;\n        builder.yield(to, params);\n    });\n    STATEMENTS.add(Ops.AttrSplat, (sexp, builder) => {\n        let [, to] = sexp;\n        builder.yield(to, []);\n        builder.didCreateElement(Register.s0);\n        builder.setComponentAttrs(false);\n    });\n    STATEMENTS.add(Ops.Debugger, (sexp, builder) => {\n        let [, evalInfo] = sexp;\n        builder.debugger(builder.evalSymbols(), evalInfo);\n    });\n    STATEMENTS.add(Ops.ClientSideStatement, (sexp, builder) => {\n        CLIENT_SIDE.compile(sexp, builder);\n    });\n    STATEMENTS.add(Ops.Append, (sexp, builder) => {\n        let [, value, trusting] = sexp;\n        let { inlines } = builder.macros;\n        let returned = inlines.compile(sexp, builder) || value;\n        if (returned === true) return;\n        let isGet = WireFormat.isGet(value);\n        let isMaybeLocal = WireFormat.isMaybeLocal(value);\n        if (trusting) {\n            builder.guardedAppend(value, true);\n        } else {\n            if (isGet || isMaybeLocal) {\n                builder.guardedAppend(value, false);\n            } else {\n                builder.expr(value);\n                builder.primitive(false);\n                builder.load(Register.t0);\n                builder.dynamicContent();\n            }\n        }\n    });\n    STATEMENTS.add(Ops.Block, (sexp, builder) => {\n        let [, name, params, hash, _template, _inverse] = sexp;\n        let template = builder.template(_template);\n        let inverse = builder.template(_inverse);\n        let templateBlock = template && template;\n        let inverseBlock = inverse && inverse;\n        let { blocks } = builder.macros;\n        blocks.compile(name, params, hash, templateBlock, inverseBlock, builder);\n    });\n    const CLIENT_SIDE = new Compilers(1);\n    CLIENT_SIDE.add(ClientSide.Ops.OpenComponentElement, (sexp, builder) => {\n        builder.putComponentOperations();\n        builder.openPrimitiveElement(sexp[2]);\n    });\n    CLIENT_SIDE.add(ClientSide.Ops.DidCreateElement, (_sexp, builder) => {\n        builder.didCreateElement(Register.s0);\n    });\n    CLIENT_SIDE.add(ClientSide.Ops.SetComponentAttrs, (sexp, builder) => {\n        builder.setComponentAttrs(sexp[2]);\n    });\n    CLIENT_SIDE.add(ClientSide.Ops.Debugger, () => {\n        // tslint:disable-next-line:no-debugger\n        debugger;\n    });\n    CLIENT_SIDE.add(ClientSide.Ops.DidRenderLayout, (_sexp, builder) => {\n        builder.didRenderLayout(Register.s0);\n    });\n    return STATEMENTS;\n}\nfunction dynamicAttr(sexp, trusting, builder) {\n    let [, name, value, namespace] = sexp;\n    builder.expr(value);\n    if (namespace) {\n        builder.dynamicAttr(name, namespace, trusting);\n    } else {\n        builder.dynamicAttr(name, null, trusting);\n    }\n}\nlet _expressionCompiler;\nexport function expressionCompiler() {\n    if (_expressionCompiler) {\n        return _expressionCompiler;\n    }\n    const EXPRESSIONS = _expressionCompiler = new Compilers();\n    EXPRESSIONS.add(Ops.Unknown, (sexp, builder) => {\n        let { resolver, asPartial, referrer } = builder;\n        let name = sexp[1];\n        let handle = resolver.lookupHelper(name, referrer);\n        if (handle !== null) {\n            builder.helper(handle, null, null);\n        } else if (asPartial) {\n            builder.resolveMaybeLocal(name);\n        } else {\n            builder.getVariable(0);\n            builder.getProperty(name);\n        }\n    });\n    EXPRESSIONS.add(Ops.Concat, (sexp, builder) => {\n        let parts = sexp[1];\n        for (let i = 0; i < parts.length; i++) {\n            builder.expr(parts[i]);\n        }\n        builder.concat(parts.length);\n    });\n    EXPRESSIONS.add(Ops.Helper, (sexp, builder) => {\n        let { resolver, referrer } = builder;\n        let [, name, params, hash] = sexp;\n        // TODO: triage this in the WF compiler\n        if (name === 'component') {\n            (false && assert(params.length, 'SYNTAX ERROR: component helper requires at least one argument'));\n\n            let [definition, ...restArgs] = params;\n            builder.curryComponent(definition, restArgs, hash, true);\n            return;\n        }\n        let handle = resolver.lookupHelper(name, referrer);\n        if (handle !== null) {\n            builder.helper(handle, params, hash);\n        } else {\n            throw new Error(`Compile Error: ${name} is not a helper`);\n        }\n    });\n    EXPRESSIONS.add(Ops.Get, (sexp, builder) => {\n        let [, head, path] = sexp;\n        builder.getVariable(head);\n        for (let i = 0; i < path.length; i++) {\n            builder.getProperty(path[i]);\n        }\n    });\n    EXPRESSIONS.add(Ops.MaybeLocal, (sexp, builder) => {\n        let [, path] = sexp;\n        if (builder.asPartial) {\n            let head = path[0];\n            path = path.slice(1);\n            builder.resolveMaybeLocal(head);\n        } else {\n            builder.getVariable(0);\n        }\n        for (let i = 0; i < path.length; i++) {\n            builder.getProperty(path[i]);\n        }\n    });\n    EXPRESSIONS.add(Ops.Undefined, (_sexp, builder) => {\n        return builder.pushPrimitiveReference(undefined);\n    });\n    EXPRESSIONS.add(Ops.HasBlock, (sexp, builder) => {\n        builder.hasBlock(sexp[1]);\n    });\n    EXPRESSIONS.add(Ops.HasBlockParams, (sexp, builder) => {\n        builder.hasBlockParams(sexp[1]);\n    });\n    return EXPRESSIONS;\n}\nexport class Macros {\n    constructor() {\n        let { blocks, inlines } = populateBuiltins();\n        this.blocks = blocks;\n        this.inlines = inlines;\n    }\n}\nexport class Blocks {\n    constructor() {\n        this.names = dict();\n        this.funcs = [];\n    }\n    add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    }\n    addMissing(func) {\n        this.missing = func;\n    }\n    compile(name, params, hash, template, inverse, builder) {\n        let index = this.names[name];\n        if (index === undefined) {\n            (false && assert(!!this.missing, `${name} not found, and no catch-all block handler was registered`));\n\n            let func = this.missing;\n            let handled = func(name, params, hash, template, inverse, builder);\n            (false && assert(!!handled, `${name} not found, and the catch-all block handler didn't handle it`));\n        } else {\n            let func = this.funcs[index];\n            func(params, hash, template, inverse, builder);\n        }\n    }\n}\nexport class Inlines {\n    constructor() {\n        this.names = dict();\n        this.funcs = [];\n    }\n    add(name, func) {\n        this.funcs.push(func);\n        this.names[name] = this.funcs.length - 1;\n    }\n    addMissing(func) {\n        this.missing = func;\n    }\n    compile(sexp, builder) {\n        let value = sexp[1];\n        // TODO: Fix this so that expression macros can return\n        // things like components, so that {{component foo}}\n        // is the same as {{(component foo)}}\n        if (!Array.isArray(value)) return ['expr', value];\n        let name;\n        let params;\n        let hash;\n        if (value[0] === Ops.Helper) {\n            name = value[1];\n            params = value[2];\n            hash = value[3];\n        } else if (value[0] === Ops.Unknown) {\n            name = value[1];\n            params = hash = null;\n        } else {\n            return ['expr', value];\n        }\n        let index = this.names[name];\n        if (index === undefined && this.missing) {\n            let func = this.missing;\n            let returned = func(name, params, hash, builder);\n            return returned === false ? ['expr', value] : returned;\n        } else if (index !== undefined) {\n            let func = this.funcs[index];\n            let returned = func(name, params, hash, builder);\n            return returned === false ? ['expr', value] : returned;\n        } else {\n            return ['expr', value];\n        }\n    }\n}\nexport function populateBuiltins(blocks = new Blocks(), inlines = new Inlines()) {\n    blocks.add('if', (params, _hash, template, inverse, builder) => {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error(`SYNTAX ERROR: #if requires a single argument`);\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        builder.expr(params[0]);\n        builder.toBoolean();\n        builder.enter(1);\n        builder.jumpUnless('ELSE');\n        builder.invokeStaticBlock(template);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStaticBlock(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('unless', (params, _hash, template, inverse, builder) => {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error(`SYNTAX ERROR: #unless requires a single argument`);\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        builder.expr(params[0]);\n        builder.toBoolean();\n        builder.enter(1);\n        builder.jumpIf('ELSE');\n        builder.invokeStaticBlock(template);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStaticBlock(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('with', (params, _hash, template, inverse, builder) => {\n        //        PutArgs\n        //        Test(Environment)\n        //        Enter(BEGIN, END)\n        // BEGIN: Noop\n        //        JumpUnless(ELSE)\n        //        Evaluate(default)\n        //        Jump(END)\n        // ELSE:  Noop\n        //        Evalulate(inverse)\n        // END:   Noop\n        //        Exit\n        if (!params || params.length !== 1) {\n            throw new Error(`SYNTAX ERROR: #with requires a single argument`);\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        builder.expr(params[0]);\n        builder.dup();\n        builder.toBoolean();\n        builder.enter(2);\n        builder.jumpUnless('ELSE');\n        builder.invokeStaticBlock(template, 1);\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStaticBlock(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('each', (params, hash, template, inverse, builder) => {\n        //         Enter(BEGIN, END)\n        // BEGIN:  Noop\n        //         PutArgs\n        //         PutIterable\n        //         JumpUnless(ELSE)\n        //         EnterList(BEGIN2, END2)\n        // ITER:   Noop\n        //         NextIter(BREAK)\n        // BEGIN2: Noop\n        //         PushChildScope\n        //         Evaluate(default)\n        //         PopScope\n        // END2:   Noop\n        //         Exit\n        //         Jump(ITER)\n        // BREAK:  Noop\n        //         ExitList\n        //         Jump(END)\n        // ELSE:   Noop\n        //         Evalulate(inverse)\n        // END:    Noop\n        //         Exit\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        if (hash && hash[0][0] === 'key') {\n            builder.expr(hash[1][0]);\n        } else {\n            builder.pushPrimitiveReference(null);\n        }\n        builder.expr(params[0]);\n        builder.enter(2);\n        builder.putIterator();\n        builder.jumpUnless('ELSE');\n        builder.pushFrame();\n        builder.returnTo('ITER');\n        builder.dup(Register.fp, 1);\n        builder.enterList('BODY');\n        builder.label('ITER');\n        builder.iterate('BREAK');\n        builder.label('BODY');\n        builder.invokeStaticBlock(template, 2);\n        builder.pop(2);\n        builder.exit();\n        builder.return();\n        builder.label('BREAK');\n        builder.exitList();\n        builder.popFrame();\n        if (inverse) {\n            builder.jump('EXIT');\n            builder.label('ELSE');\n            builder.invokeStaticBlock(inverse);\n            builder.label('EXIT');\n            builder.exit();\n            builder.return();\n        } else {\n            builder.label('ELSE');\n            builder.exit();\n            builder.return();\n        }\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('in-element', (params, hash, template, _inverse, builder) => {\n        if (!params || params.length !== 1) {\n            throw new Error(`SYNTAX ERROR: #in-element requires a single argument`);\n        }\n        builder.startLabels();\n        builder.pushFrame();\n        builder.returnTo('END');\n        let [keys, values] = hash;\n        for (let i = 0; i < keys.length; i++) {\n            let key = keys[i];\n            if (key === 'nextSibling' || key === 'guid') {\n                builder.expr(values[i]);\n            } else {\n                throw new Error(`SYNTAX ERROR: #in-element does not take a \\`${keys[0]}\\` option`);\n            }\n        }\n        builder.expr(params[0]);\n        builder.dup();\n        builder.enter(4);\n        builder.jumpUnless('ELSE');\n        builder.pushRemoteElement();\n        builder.invokeStaticBlock(template);\n        builder.popRemoteElement();\n        builder.label('ELSE');\n        builder.exit();\n        builder.return();\n        builder.label('END');\n        builder.popFrame();\n        builder.stopLabels();\n    });\n    blocks.add('-with-dynamic-vars', (_params, hash, template, _inverse, builder) => {\n        if (hash) {\n            let [names, expressions] = hash;\n            builder.compileParams(expressions);\n            builder.pushDynamicScope();\n            builder.bindDynamicScope(names);\n            builder.invokeStaticBlock(template);\n            builder.popDynamicScope();\n        } else {\n            builder.invokeStaticBlock(template);\n        }\n    });\n    blocks.add('component', (_params, hash, template, inverse, builder) => {\n        (false && assert(_params && _params.length, 'SYNTAX ERROR: #component requires at least one argument'));\n\n        let tag = _params[0];\n        if (typeof tag === 'string') {\n            let returned = builder.staticComponentHelper(_params[0], hash, template);\n            if (returned) return;\n        }\n        let [definition, ...params] = _params;\n        builder.dynamicComponent(definition, params, hash, true, template, inverse);\n    });\n    inlines.add('component', (_name, _params, hash, builder) => {\n        (false && assert(_params && _params.length, 'SYNTAX ERROR: component helper requires at least one argument'));\n\n        let tag = _params && _params[0];\n        if (typeof tag === 'string') {\n            let returned = builder.staticComponentHelper(tag, hash, null);\n            if (returned) return true;\n        }\n        let [definition, ...params] = _params;\n        builder.dynamicComponent(definition, params, hash, true, null, null);\n        return true;\n    });\n    return { blocks, inlines };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\nimport { debugSlice } from './debug';\nimport { statementCompiler } from './syntax';\nexport const PLACEHOLDER_HANDLE = -1;\nexport default class CompilableTemplate {\n    constructor(statements, containingLayout, options, symbolTable) {\n        this.statements = statements;\n        this.containingLayout = containingLayout;\n        this.options = options;\n        this.symbolTable = symbolTable;\n        this.compiled = null;\n        this.statementCompiler = statementCompiler();\n    }\n    static topLevel(block, options) {\n        return new CompilableTemplate(block.statements, { block, referrer: options.referrer }, options, { referrer: options.referrer, hasEval: block.hasEval, symbols: block.symbols });\n    }\n    compile(stdLib) {\n        let { compiled } = this;\n        if (compiled !== null) return compiled;\n        // Track that compilation has started but not yet finished by temporarily\n        // using a placeholder handle. In eager compilation mode, where compile()\n        // may be called recursively, we use this as a signal that the handle cannot\n        // be known synchronously and must be linked lazily.\n        this.compiled = PLACEHOLDER_HANDLE;\n        let { options, statements, containingLayout } = this;\n        let { referrer } = containingLayout;\n        let { program, resolver, macros, asPartial, Builder } = options;\n        let builder = new Builder(program, resolver, referrer, macros, containingLayout, asPartial, stdLib);\n        for (let i = 0; i < statements.length; i++) {\n            this.statementCompiler.compile(statements[i], builder);\n        }\n        let handle = builder.commit(program.heap, containingLayout.block.symbols.length);\n        if (false) {\n            let { heap } = program;\n            let start = heap.getaddr(handle);\n            let end = start + heap.sizeof(handle);\n            debugSlice(program, start, end);\n        }\n        return this.compiled = handle;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGlsYWJsZS10ZW1wbGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL29wY29kZS1jb21waWxlci9saWIvY29tcGlsYWJsZS10ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBT0EsQUFBTyxTQUFFLEFBQVUsQUFBRSxrQkFBTSxBQUFTLEFBQUM7QUFFckMsQUFBTyxTQUFrQixBQUFpQixBQUFhLHlCQUFNLEFBQVUsQUFBQztBQUt4RSxBQUFNLE9BQUMsTUFBTSxBQUFrQixxQkFBRyxDQUFDLEFBQUMsQUFBQztBQUVyQyxBQUFNLEFBQUMsQUFBTztBQWNaLGdCQUFvQixBQUF1QixZQUFVLEFBQThCLGtCQUFVLEFBQXFDLFNBQVMsQUFBYztBQUFySSxhQUFVLGFBQVYsQUFBVSxBQUFhO0FBQVUsYUFBZ0IsbUJBQWhCLEFBQWdCLEFBQWM7QUFBVSxhQUFPLFVBQVAsQUFBTyxBQUE4QjtBQUFTLGFBQVcsY0FBWCxBQUFXLEFBQUc7QUFKakosYUFBUSxXQUFtQixBQUFJLEFBQUM7QUFLdEMsQUFBSSxhQUFDLEFBQWlCLG9CQUFHLEFBQWlCLEFBQUUsQUFBQyxBQUMvQztBQUFDO0FBZkQsQUFBTSxXQUFDLEFBQVEsU0FBZSxBQUE4QixPQUFFLEFBQXFDO0FBQ2pHLEFBQU0sZUFBQyxJQUFJLEFBQWtCLG1CQUMzQixBQUFLLE1BQUMsQUFBVSxZQUNoQixFQUFFLEFBQUssT0FBRSxBQUFRLFVBQUUsQUFBTyxRQUFDLEFBQVEsQUFBRSxZQUNyQyxBQUFPLFNBQ1AsRUFBRSxBQUFRLFVBQUUsQUFBTyxRQUFDLEFBQVEsVUFBRSxBQUFPLFNBQUUsQUFBSyxNQUFDLEFBQU8sU0FBRSxBQUFPLFNBQUUsQUFBSyxNQUFDLEFBQU8sQUFBRSxBQUMvRSxBQUFDLEFBQ0o7QUFBQztBQVVELEFBQU8sWUFBQyxBQUFlO0FBQ3JCLFlBQUksRUFBRSxBQUFRLEFBQUUsYUFBRyxBQUFJLEFBQUM7QUFDeEIsQUFBRSxBQUFDLFlBQUMsQUFBUSxhQUFLLEFBQUksQUFBQyxNQUFDLEFBQU0sT0FBQyxBQUFRLEFBQUM7QUFFdkMsQUFBeUU7QUFDekUsQUFBeUU7QUFDekUsQUFBNEU7QUFDNUUsQUFBb0Q7QUFDcEQsQUFBSSxhQUFDLEFBQVEsV0FBRyxBQUFrQixBQUFDO0FBRW5DLFlBQUksRUFBRSxBQUFPLFNBQUUsQUFBVSxZQUFFLEFBQWdCLEFBQUUscUJBQUcsQUFBSSxBQUFDO0FBQ3JELFlBQUksRUFBRSxBQUFRLEFBQUUsYUFBRyxBQUFnQixBQUFDO0FBQ3BDLFlBQUksRUFBRSxBQUFPLFNBQUUsQUFBUSxVQUFFLEFBQU0sUUFBRSxBQUFTLFdBQUUsQUFBTyxBQUFFLFlBQUcsQUFBTyxBQUFDO0FBRWhFLFlBQUksQUFBTyxVQUFHLElBQUksQUFBTyxRQUFDLEFBQU8sU0FBRSxBQUFRLFVBQUUsQUFBUSxVQUFFLEFBQU0sUUFBRSxBQUFnQixrQkFBRSxBQUFTLFdBQUUsQUFBTSxBQUFDLEFBQUM7QUFFcEcsQUFBRyxBQUFDLGFBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFVLFdBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDM0MsQUFBSSxpQkFBQyxBQUFpQixrQkFBQyxBQUFPLFFBQUMsQUFBVSxXQUFDLEFBQUMsQUFBQyxJQUFFLEFBQU8sQUFBQyxBQUFDLEFBQ3pEO0FBQUM7QUFFRCxZQUFJLEFBQU0sU0FBRyxBQUFPLFFBQUMsQUFBTSxPQUFDLEFBQU8sUUFBQyxBQUFJLE1BQUUsQUFBZ0IsaUJBQUMsQUFBSyxNQUFDLEFBQU8sUUFBQyxBQUFNLEFBQUMsQUFBQztBQUVqRixBQUFFLEFBQUMsQUFBQyxBQUFLLEFBQUMsbUJBQUMsQUFBQztBQUNWLGdCQUFJLEVBQUUsQUFBSSxBQUFFLFNBQUcsQUFBTyxBQUFDO0FBQ3ZCLGdCQUFJLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQU0sQUFBQyxBQUFDO0FBQ2pDLGdCQUFJLEFBQUcsTUFBRyxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFNLEFBQUMsQUFBQztBQUV0QyxBQUFVLHVCQUFDLEFBQU8sU0FBRSxBQUFLLE9BQUUsQUFBRyxBQUFDLEFBQUMsQUFDbEM7QUFBQztBQUVELEFBQU0sQUFBQyxlQUFDLEFBQUksS0FBQyxBQUFRLFdBQUcsQUFBTSxBQUFDLEFBQUMsQUFDbEM7QUFBQyxBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgT3B0aW9uLFxuICBTeW1ib2xUYWJsZSxcbiAgUHJvZ3JhbVN5bWJvbFRhYmxlXG59IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgU3RhdGVtZW50LCBTZXJpYWxpemVkVGVtcGxhdGVCbG9jayB9IGZyb20gJ0BnbGltbWVyL3dpcmUtZm9ybWF0JztcbmltcG9ydCB7IERFQlVHIH0gZnJvbSAnQGdsaW1tZXIvbG9jYWwtZGVidWctZmxhZ3MnO1xuaW1wb3J0IHsgZGVidWdTbGljZSB9IGZyb20gJy4vZGVidWcnO1xuaW1wb3J0IHsgQ29tcGlsYWJsZVRlbXBsYXRlIGFzIElDb21waWxhYmxlVGVtcGxhdGUsIFBhcnNlZExheW91dCB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDb21waWxlT3B0aW9ucywgc3RhdGVtZW50Q29tcGlsZXIsIENvbXBpbGVycyB9IGZyb20gJy4vc3ludGF4JztcbmltcG9ydCB7IFNURExpYiB9IGZyb20gJy4vb3Bjb2RlLWJ1aWxkZXInO1xuXG5leHBvcnQgeyBJQ29tcGlsYWJsZVRlbXBsYXRlIH07XG5cbmV4cG9ydCBjb25zdCBQTEFDRUhPTERFUl9IQU5ETEUgPSAtMTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcGlsYWJsZVRlbXBsYXRlPFMgZXh0ZW5kcyBTeW1ib2xUYWJsZSwgVGVtcGxhdGVNZXRhPiBpbXBsZW1lbnRzIElDb21waWxhYmxlVGVtcGxhdGU8Uz4ge1xuICBzdGF0aWMgdG9wTGV2ZWw8VGVtcGxhdGVNZXRhPihibG9jazogU2VyaWFsaXplZFRlbXBsYXRlQmxvY2ssIG9wdGlvbnM6IENvbXBpbGVPcHRpb25zPFRlbXBsYXRlTWV0YT4pOiBJQ29tcGlsYWJsZVRlbXBsYXRlPFByb2dyYW1TeW1ib2xUYWJsZT4ge1xuICAgIHJldHVybiBuZXcgQ29tcGlsYWJsZVRlbXBsYXRlPFByb2dyYW1TeW1ib2xUYWJsZSwgVGVtcGxhdGVNZXRhPihcbiAgICAgIGJsb2NrLnN0YXRlbWVudHMsXG4gICAgICB7IGJsb2NrLCByZWZlcnJlcjogb3B0aW9ucy5yZWZlcnJlciB9LFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHsgcmVmZXJyZXI6IG9wdGlvbnMucmVmZXJyZXIsIGhhc0V2YWw6IGJsb2NrLmhhc0V2YWwsIHN5bWJvbHM6IGJsb2NrLnN5bWJvbHMgfVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGNvbXBpbGVkOiBPcHRpb248bnVtYmVyPiA9IG51bGw7XG5cbiAgcHJpdmF0ZSBzdGF0ZW1lbnRDb21waWxlcjogQ29tcGlsZXJzPFN0YXRlbWVudD47XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGF0ZW1lbnRzOiBTdGF0ZW1lbnRbXSwgcHJpdmF0ZSBjb250YWluaW5nTGF5b3V0OiBQYXJzZWRMYXlvdXQsIHByaXZhdGUgb3B0aW9uczogQ29tcGlsZU9wdGlvbnM8VGVtcGxhdGVNZXRhPiwgcHVibGljIHN5bWJvbFRhYmxlOiBTKSB7XG4gICAgdGhpcy5zdGF0ZW1lbnRDb21waWxlciA9IHN0YXRlbWVudENvbXBpbGVyKCk7XG4gIH1cblxuICBjb21waWxlKHN0ZExpYj86IFNURExpYik6IG51bWJlciB7XG4gICAgbGV0IHsgY29tcGlsZWQgfSA9IHRoaXM7XG4gICAgaWYgKGNvbXBpbGVkICE9PSBudWxsKSByZXR1cm4gY29tcGlsZWQ7XG5cbiAgICAvLyBUcmFjayB0aGF0IGNvbXBpbGF0aW9uIGhhcyBzdGFydGVkIGJ1dCBub3QgeWV0IGZpbmlzaGVkIGJ5IHRlbXBvcmFyaWx5XG4gICAgLy8gdXNpbmcgYSBwbGFjZWhvbGRlciBoYW5kbGUuIEluIGVhZ2VyIGNvbXBpbGF0aW9uIG1vZGUsIHdoZXJlIGNvbXBpbGUoKVxuICAgIC8vIG1heSBiZSBjYWxsZWQgcmVjdXJzaXZlbHksIHdlIHVzZSB0aGlzIGFzIGEgc2lnbmFsIHRoYXQgdGhlIGhhbmRsZSBjYW5ub3RcbiAgICAvLyBiZSBrbm93biBzeW5jaHJvbm91c2x5IGFuZCBtdXN0IGJlIGxpbmtlZCBsYXppbHkuXG4gICAgdGhpcy5jb21waWxlZCA9IFBMQUNFSE9MREVSX0hBTkRMRTtcblxuICAgIGxldCB7IG9wdGlvbnMsIHN0YXRlbWVudHMsIGNvbnRhaW5pbmdMYXlvdXQgfSA9IHRoaXM7XG4gICAgbGV0IHsgcmVmZXJyZXIgfSA9IGNvbnRhaW5pbmdMYXlvdXQ7XG4gICAgbGV0IHsgcHJvZ3JhbSwgcmVzb2x2ZXIsIG1hY3JvcywgYXNQYXJ0aWFsLCBCdWlsZGVyIH0gPSBvcHRpb25zO1xuXG4gICAgbGV0IGJ1aWxkZXIgPSBuZXcgQnVpbGRlcihwcm9ncmFtLCByZXNvbHZlciwgcmVmZXJyZXIsIG1hY3JvcywgY29udGFpbmluZ0xheW91dCwgYXNQYXJ0aWFsLCBzdGRMaWIpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdGF0ZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLnN0YXRlbWVudENvbXBpbGVyLmNvbXBpbGUoc3RhdGVtZW50c1tpXSwgYnVpbGRlcik7XG4gICAgfVxuXG4gICAgbGV0IGhhbmRsZSA9IGJ1aWxkZXIuY29tbWl0KHByb2dyYW0uaGVhcCwgY29udGFpbmluZ0xheW91dC5ibG9jay5zeW1ib2xzLmxlbmd0aCk7XG5cbiAgICBpZiAoREVCVUcpIHtcbiAgICAgIGxldCB7IGhlYXAgfSA9IHByb2dyYW07XG4gICAgICBsZXQgc3RhcnQgPSBoZWFwLmdldGFkZHIoaGFuZGxlKTtcbiAgICAgIGxldCBlbmQgPSBzdGFydCArIGhlYXAuc2l6ZW9mKGhhbmRsZSk7XG5cbiAgICAgIGRlYnVnU2xpY2UocHJvZ3JhbSwgc3RhcnQsIGVuZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLmNvbXBpbGVkID0gaGFuZGxlKTtcbiAgfVxufVxuIl19","import { Register } from '@glimmer/vm';\nimport CompilableTemplate from './compilable-template';\nimport { debugSlice } from './debug';\nimport { ATTRS_BLOCK } from './syntax';\n\nimport { EMPTY_ARRAY } from \"@glimmer/util\";\nexport class WrappedBuilder {\n    constructor(options, layout, capabilities) {\n        this.options = options;\n        this.layout = layout;\n        this.capabilities = capabilities;\n        let { block } = layout;\n        let referrer = this.referrer = layout.referrer;\n        this.symbolTable = {\n            referrer,\n            hasEval: block.hasEval,\n            symbols: block.symbols.concat([ATTRS_BLOCK])\n        };\n    }\n    compile() {\n        //========DYNAMIC\n        //        PutValue(TagExpr)\n        //        Test\n        //        JumpUnless(BODY)\n        //        OpenDynamicPrimitiveElement\n        //        DidCreateElement\n        //        ...attr statements...\n        //        FlushElement\n        // BODY:  Noop\n        //        ...body statements...\n        //        PutValue(TagExpr)\n        //        Test\n        //        JumpUnless(END)\n        //        CloseElement\n        // END:   Noop\n        //        DidRenderLayout\n        //        Exit\n        //\n        //========STATIC\n        //        OpenPrimitiveElementOpcode\n        //        DidCreateElement\n        //        ...attr statements...\n        //        FlushElement\n        //        ...body statements...\n        //        CloseElement\n        //        DidRenderLayout\n        //        Exit\n        let { options, layout, referrer } = this;\n        let { program, resolver, macros, asPartial } = options;\n        let { Builder } = options;\n        let b = new Builder(program, resolver, referrer, macros, layout, asPartial);\n        b.startLabels();\n        if (this.capabilities.dynamicTag) {\n            b.fetch(Register.s1);\n            b.getComponentTagName(Register.s0);\n            b.primitiveReference();\n            b.dup();\n            b.load(Register.s1);\n            b.jumpUnless('BODY');\n            b.fetch(Register.s1);\n            b.putComponentOperations();\n            b.openDynamicElement();\n            b.didCreateElement(Register.s0);\n            b.flushElement();\n            b.label('BODY');\n        }\n        b.invokeStaticBlock(blockFor(layout, this.options));\n        if (this.capabilities.dynamicTag) {\n            b.fetch(Register.s1);\n            b.jumpUnless('END');\n            b.closeElement();\n            b.label('END');\n            b.load(Register.s1);\n            b.stopLabels();\n        }\n        let handle = b.commit(options.program.heap, layout.block.symbols.length);\n        if (false) {\n            let { program, program: { heap } } = options;\n            let start = heap.getaddr(handle);\n            let end = start + heap.sizeof(handle);\n            debugSlice(program, start, end);\n        }\n        return handle;\n    }\n}\nfunction blockFor(layout, options) {\n    let { block, referrer } = layout;\n    return new CompilableTemplate(block.statements, layout, options, { referrer, parameters: EMPTY_ARRAY });\n}\nexport class ComponentBuilder {\n    constructor(builder) {\n        this.builder = builder;\n    }\n    static(handle, args) {\n        let [params, hash, _default, inverse] = args;\n        let { builder } = this;\n        let { resolver } = builder;\n        if (handle !== null) {\n            let capabilities = resolver.getCapabilities(handle);\n            if (capabilities.dynamicLayout === false) {\n                let layout = resolver.getLayout(handle);\n                builder.pushComponentDefinition(handle);\n                builder.invokeStaticComponent(capabilities, layout, null, params, hash, false, _default, inverse);\n            } else {\n                builder.pushComponentDefinition(handle);\n                builder.invokeComponent(null, params, hash, false, _default, inverse);\n            }\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export class InstructionEncoder {\n    constructor(buffer) {\n        this.buffer = buffer;\n        this.typePos = 0;\n        this.size = 0;\n    }\n    encode(type, machine) {\n        if (type > 255 /* TYPE_SIZE */) {\n                throw new Error(`Opcode type over 8-bits. Got ${type}.`);\n            }\n        this.buffer.push(type | machine | arguments.length - 2 << 8 /* ARG_SHIFT */);\n        this.typePos = this.buffer.length - 1;\n        for (let i = 2; i < arguments.length; i++) {\n            let op = arguments[i];\n            if (typeof op === 'number' && op > 65535 /* MAX_SIZE */) {\n                    throw new Error(`Operand over 16-bits. Got ${op}.`);\n                }\n            this.buffer.push(op);\n        }\n        ;\n        this.size = this.buffer.length;\n    }\n    patch(position, operand) {\n        if (this.buffer[position + 1] === -1) {\n            this.buffer[position + 1] = operand;\n        } else {\n            throw new Error('Trying to patch operand in populated slot instead of a reserved slot.');\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jb2Rlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL2VuY29kZXIvbGliL2VuY29kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYUEsQUFBTTtBQUNKLGdCQUFtQixBQUFpQjtBQUFqQixhQUFNLFNBQU4sQUFBTSxBQUFXO0FBQ3BDLGFBQU8sVUFBRyxBQUFDLEFBQUM7QUFDWixhQUFJLE9BQUcsQUFBQyxBQUFDLEFBRjhCO0FBQUM7QUFLeEMsQUFBTSxXQUFDLEFBQVEsTUFBRSxBQUFvQztBQUNuRCxBQUFFLEFBQUMsWUFBQyxBQUFjLFdBQXVCLEFBQUMsaUJBQUMsQUFBQztBQUMxQyxzQkFBTSxJQUFJLEFBQUssQUFBQyxzQ0FBZ0MsQUFBSSxJQUFHLEFBQUMsQUFBQyxBQUMzRDtBQUFDO0FBRUQsQUFBSSxhQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUMsS0FBQyxBQUFJLE9BQUcsQUFBTyxBQUFHLFVBQUMsQUFBUyxVQUFDLEFBQU0sU0FBRyxBQUFDLE9BQXdCLEFBQUMsQUFBQyxBQUFDLEFBQUM7QUFFcEYsQUFBSSxhQUFDLEFBQU8sVUFBRyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUM7QUFFdEMsQUFBRyxBQUFDLGFBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFTLFVBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDMUMsZ0JBQUksQUFBRSxLQUFHLEFBQVMsVUFBQyxBQUFDLEFBQUMsQUFBQztBQUN0QixBQUFFLEFBQUMsZ0JBQUMsT0FBTyxBQUFFLE9BQUssQUFBUSxZQUFJLEFBQUUsV0FBc0IsQUFBQyxnQkFBQyxBQUFDO0FBQ3ZELDBCQUFNLElBQUksQUFBSyxBQUFDLG1DQUE2QixBQUFFLEVBQUcsQUFBQyxBQUFDLEFBQ3REO0FBQUM7QUFDRCxBQUFJLGlCQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBRSxBQUFDLEFBQUMsQUFDdkI7QUFBQztBQUFBLEFBQUM7QUFFRixBQUFJLGFBQUMsQUFBSSxPQUFHLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBTSxBQUFDLEFBQ2pDO0FBQUM7QUFFRCxBQUFLLFVBQUMsQUFBZ0IsVUFBRSxBQUFlO0FBQ3JDLEFBQUUsQUFBQyxZQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBUSxXQUFHLEFBQUMsQUFBQyxPQUFLLENBQUMsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUNyQyxBQUFJLGlCQUFDLEFBQU0sT0FBQyxBQUFRLFdBQUcsQUFBQyxBQUFDLEtBQUcsQUFBTyxBQUFDLEFBQ3RDO0FBQUMsQUFBQyxBQUFJLGVBQUMsQUFBQztBQUNOLGtCQUFNLElBQUksQUFBSyxNQUFDLEFBQXVFLEFBQUMsQUFBQyxBQUMzRjtBQUFDLEFBQ0g7QUFBQyxBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3AgfSBmcm9tIFwiQGdsaW1tZXIvdm1cIjtcblxuZXhwb3J0IGNvbnN0IGVudW0gT3Bjb2RlU2l6ZSB7XG4gIEFSR19TSElGVCA9IDgsXG4gIE1BWF9TSVpFICA9IDBiMTExMTExMTExMTExMTExMSxcbiAgVFlQRV9TSVpFID0gMGIxMTExMTExMSxcbiAgVFlQRV9NQVNLICAgICAgICA9IDBiMDAwMDAwMDAxMTExMTExMSxcbiAgT1BFUkFORF9MRU5fTUFTSyA9IDBiMDAwMDAwMTEwMDAwMDAwMCxcbiAgTUFDSElORV9NQVNLICAgICA9IDBiMDAwMDAxMDAwMDAwMDAwMCxcbn1cblxuZXhwb3J0IHR5cGUgT3BlcmFuZCA9IG51bWJlciB8ICgoKSA9PiBudW1iZXIpO1xuXG5leHBvcnQgY2xhc3MgSW5zdHJ1Y3Rpb25FbmNvZGVyIHtcbiAgY29uc3RydWN0b3IocHVibGljIGJ1ZmZlcjogT3BlcmFuZFtdKSB7fVxuICB0eXBlUG9zID0gMDtcbiAgc2l6ZSA9IDA7XG5cbiAgZW5jb2RlKHR5cGU6IE9wLCBtYWNoaW5lOiAwIHwgT3Bjb2RlU2l6ZS5NQUNISU5FX01BU0ssIC4uLm9wZXJhbmRzOiBPcGVyYW5kW10pOiB2b2lkO1xuICBlbmNvZGUodHlwZTogT3AsIG1hY2hpbmU6IDAgfCBPcGNvZGVTaXplLk1BQ0hJTkVfTUFTSykge1xuICAgIGlmICh0eXBlIGFzIG51bWJlciA+IE9wY29kZVNpemUuVFlQRV9TSVpFKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE9wY29kZSB0eXBlIG92ZXIgOC1iaXRzLiBHb3QgJHt0eXBlfS5gKTtcbiAgICB9XG5cbiAgICB0aGlzLmJ1ZmZlci5wdXNoKCh0eXBlIHwgbWFjaGluZSB8IChhcmd1bWVudHMubGVuZ3RoIC0gMiA8PCBPcGNvZGVTaXplLkFSR19TSElGVCkpKTtcblxuICAgIHRoaXMudHlwZVBvcyA9IHRoaXMuYnVmZmVyLmxlbmd0aCAtIDE7XG5cbiAgICBmb3IgKGxldCBpID0gMjsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IG9wID0gYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKHR5cGVvZiBvcCA9PT0gJ251bWJlcicgJiYgb3AgPiBPcGNvZGVTaXplLk1BWF9TSVpFKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgT3BlcmFuZCBvdmVyIDE2LWJpdHMuIEdvdCAke29wfS5gKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYnVmZmVyLnB1c2gob3ApO1xuICAgIH07XG5cbiAgICB0aGlzLnNpemUgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gIH1cblxuICBwYXRjaChwb3NpdGlvbjogbnVtYmVyLCBvcGVyYW5kOiBudW1iZXIpIHtcbiAgICBpZiAodGhpcy5idWZmZXJbcG9zaXRpb24gKyAxXSA9PT0gLTEpIHtcbiAgICAgIHRoaXMuYnVmZmVyW3Bvc2l0aW9uICsgMV0gPSBvcGVyYW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RyeWluZyB0byBwYXRjaCBvcGVyYW5kIGluIHBvcHVsYXRlZCBzbG90IGluc3RlYWQgb2YgYSByZXNlcnZlZCBzbG90LicpO1xuICAgIH1cbiAgfVxufVxuIl19","import { dict, EMPTY_ARRAY, Stack, unreachable } from '@glimmer/util';\nimport { Register } from '@glimmer/vm';\nimport { ATTRS_BLOCK, expressionCompiler } from './syntax';\nimport CompilableTemplate, { PLACEHOLDER_HANDLE } from './compilable-template';\nimport { ComponentBuilder } from './wrapped-component';\nimport { InstructionEncoder } from \"@glimmer/encoder\";\nclass Labels {\n    constructor() {\n        this.labels = dict();\n        this.targets = [];\n    }\n    label(name, index) {\n        this.labels[name] = index;\n    }\n    target(at, target) {\n        this.targets.push({ at, target });\n    }\n    patch(encoder) {\n        let { targets, labels } = this;\n        for (let i = 0; i < targets.length; i++) {\n            let { at, target } = targets[i];\n            let address = labels[target] - at;\n            encoder.patch(at, address);\n        }\n    }\n}\nexport class SimpleOpcodeBuilder {\n    constructor() {\n        this.encoder = new InstructionEncoder([]);\n    }\n    push(name) {\n        switch (arguments.length) {\n            case 1:\n                return this.encoder.encode(name, 0);\n            case 2:\n                return this.encoder.encode(name, 0, arguments[1]);\n            case 3:\n                return this.encoder.encode(name, 0, arguments[1], arguments[2]);\n            default:\n                return this.encoder.encode(name, 0, arguments[1], arguments[2], arguments[3]);\n        }\n    }\n    pushMachine(name) {\n        switch (arguments.length) {\n            case 1:\n                return this.encoder.encode(name, 1024 /* MACHINE_MASK */);\n            case 2:\n                return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1]);\n            case 3:\n                return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1], arguments[2]);\n            default:\n                return this.encoder.encode(name, 1024 /* MACHINE_MASK */, arguments[1], arguments[2], arguments[3]);\n        }\n    }\n    commit(heap, scopeSize) {\n        this.pushMachine(20 /* Return */);\n        let { buffer } = this.encoder;\n        // TODO: change the whole malloc API and do something more efficient\n        let handle = heap.malloc();\n        for (let i = 0; i < buffer.length; i++) {\n            let value = buffer[i];\n            typeof value === 'function' ? heap.pushPlaceholder(value) : heap.push(value);\n        }\n        heap.finishMalloc(handle, scopeSize);\n        return handle;\n    }\n    reserve(name) {\n        this.encoder.encode(name, 0, -1);\n    }\n    reserveMachine(name) {\n        this.encoder.encode(name, 1024 /* MACHINE_MASK */, -1);\n    }\n    ///\n    main() {\n        this.push(56 /* Main */, Register.s0);\n        this.invokePreparedComponent(false);\n    }\n    dynamicContent() {\n        this.push(24 /* DynamicContent */);\n    }\n    beginComponentTransaction() {\n        this.push(75 /* BeginComponentTransaction */);\n    }\n    commitComponentTransaction() {\n        this.push(76 /* CommitComponentTransaction */);\n    }\n    pushDynamicScope() {\n        this.push(36 /* PushDynamicScope */);\n    }\n    popDynamicScope() {\n        this.push(37 /* PopDynamicScope */);\n    }\n    pushRemoteElement() {\n        this.push(33 /* PushRemoteElement */);\n    }\n    popRemoteElement() {\n        this.push(34 /* PopRemoteElement */);\n    }\n    pushRootScope(symbols, bindCallerScope) {\n        this.push(17 /* RootScope */, symbols, bindCallerScope ? 1 : 0);\n    }\n    pushChildScope() {\n        this.push(18 /* ChildScope */);\n    }\n    popScope() {\n        this.push(19 /* PopScope */);\n    }\n    prepareArgs(state) {\n        this.push(65 /* PrepareArgs */, state);\n    }\n    createComponent(state, hasDefault) {\n        let flag = hasDefault | 0;\n        this.push(67 /* CreateComponent */, flag, state);\n    }\n    registerComponentDestructor(state) {\n        this.push(68 /* RegisterComponentDestructor */, state);\n    }\n    putComponentOperations() {\n        this.push(69 /* PutComponentOperations */);\n    }\n    getComponentSelf(state) {\n        this.push(70 /* GetComponentSelf */, state);\n    }\n    getComponentTagName(state) {\n        this.push(71 /* GetComponentTagName */, state);\n    }\n    getComponentLayout(state) {\n        this.push(72 /* GetComponentLayout */, state);\n    }\n    invokeComponentLayout(state) {\n        this.push(74 /* InvokeComponentLayout */, state);\n    }\n    didCreateElement(state) {\n        this.push(77 /* DidCreateElement */, state);\n    }\n    didRenderLayout(state) {\n        this.push(78 /* DidRenderLayout */, state);\n    }\n    pushFrame() {\n        this.pushMachine(47 /* PushFrame */);\n    }\n    popFrame() {\n        this.pushMachine(48 /* PopFrame */);\n    }\n    invokeVirtual() {\n        this.pushMachine(41 /* InvokeVirtual */);\n    }\n    invokeYield() {\n        this.push(43 /* InvokeYield */);\n    }\n    toBoolean() {\n        this.push(51 /* ToBoolean */);\n    }\n    invokePreparedComponent(hasBlock, populateLayout = null) {\n        this.beginComponentTransaction();\n        this.pushDynamicScope();\n        this.createComponent(Register.s0, hasBlock);\n        // this has to run after createComponent to allow\n        // for late-bound layouts, but a caller is free\n        // to populate the layout earlier if it wants to\n        // and do nothing here.\n        if (populateLayout) populateLayout();\n        this.registerComponentDestructor(Register.s0);\n        this.getComponentSelf(Register.s0);\n        this.invokeComponentLayout(Register.s0);\n        this.didRenderLayout(Register.s0);\n        this.popFrame();\n        this.popScope();\n        this.popDynamicScope();\n        this.commitComponentTransaction();\n    }\n    get pos() {\n        return this.encoder.typePos;\n    }\n    get nextPos() {\n        return this.encoder.size;\n    }\n}\nexport class OpcodeBuilder extends SimpleOpcodeBuilder {\n    constructor(program, resolver, referrer, macros, containingLayout, asPartial, stdLib) {\n        super();\n        this.program = program;\n        this.resolver = resolver;\n        this.referrer = referrer;\n        this.macros = macros;\n        this.containingLayout = containingLayout;\n        this.asPartial = asPartial;\n        this.stdLib = stdLib;\n        this.component = new ComponentBuilder(this);\n        this.expressionCompiler = expressionCompiler();\n        this.labelsStack = new Stack();\n        this.isComponentAttrs = false;\n        this.constants = program.constants;\n    }\n    label(name) {\n        this.labels.label(name, this.nextPos);\n    }\n    setComponentAttrs(enabled) {\n        this.isComponentAttrs = enabled;\n    }\n    expr(expression) {\n        if (Array.isArray(expression)) {\n            this.expressionCompiler.compile(expression, this);\n        } else {\n            this.pushPrimitiveReference(expression);\n        }\n    }\n    // args\n    pushArgs(names, flags) {\n        let serialized = this.constants.stringArray(names);\n        this.push(63 /* PushArgs */, serialized, flags);\n    }\n    // helpers\n    get labels() {\n        return this.labelsStack.current;\n    }\n    startLabels() {\n        this.labelsStack.push(new Labels());\n    }\n    stopLabels() {\n        let label = this.labelsStack.pop();\n        label.patch(this.encoder);\n    }\n    // components\n    pushComponentDefinition(handle) {\n        this.push(59 /* PushComponentDefinition */, this.constants.handle(handle));\n    }\n    pushCurriedComponent() {\n        this.push(61 /* PushCurriedComponent */);\n    }\n    pushDynamicComponentInstance() {\n        this.push(60 /* PushDynamicComponentInstance */);\n    }\n    resolveDynamicComponent(referrer) {\n        this.push(62 /* ResolveDynamicComponent */, this.constants.serializable(referrer));\n    }\n    staticComponentHelper(tag, hash, template) {\n        let handle = this.resolver.lookupComponentDefinition(tag, this.referrer);\n        if (handle) {\n            let capabilities = this.resolver.getCapabilities(handle);\n            if (capabilities.dynamicLayout === false) {\n                if (hash) {\n                    for (let i = 0; i < hash.length; i = i + 2) {\n                        hash[i][0] = `@${hash[i][0]}`;\n                    }\n                }\n                let layout = this.resolver.getLayout(handle);\n                this.pushComponentDefinition(handle);\n                this.invokeStaticComponent(capabilities, layout, null, null, hash, false, template && template);\n                return true;\n            }\n        }\n        return false;\n    }\n    // partial\n    invokePartial(referrer, symbols, evalInfo) {\n        let _meta = this.constants.serializable(referrer);\n        let _symbols = this.constants.stringArray(symbols);\n        let _evalInfo = this.constants.array(evalInfo);\n        this.push(79 /* InvokePartial */, _meta, _symbols, _evalInfo);\n    }\n    resolveMaybeLocal(name) {\n        this.push(80 /* ResolveMaybeLocal */, this.string(name));\n    }\n    // debugger\n    debugger(symbols, evalInfo) {\n        this.push(81 /* Debugger */, this.constants.stringArray(symbols), this.constants.array(evalInfo));\n    }\n    // dom\n    text(text) {\n        this.push(22 /* Text */, this.constants.string(text));\n    }\n    openPrimitiveElement(tag) {\n        this.push(25 /* OpenElement */, this.constants.string(tag));\n    }\n    openDynamicElement() {\n        this.push(26 /* OpenDynamicElement */);\n    }\n    flushElement() {\n        this.push(30 /* FlushElement */);\n    }\n    closeElement() {\n        this.push(31 /* CloseElement */);\n    }\n    staticAttr(_name, _namespace, _value) {\n        let name = this.constants.string(_name);\n        let namespace = _namespace ? this.constants.string(_namespace) : 0;\n        if (this.isComponentAttrs) {\n            this.pushPrimitiveReference(_value);\n            this.push(29 /* ComponentAttr */, name, 1, namespace);\n        } else {\n            let value = this.constants.string(_value);\n            this.push(27 /* StaticAttr */, name, value, namespace);\n        }\n    }\n    dynamicAttr(_name, _namespace, trusting) {\n        let name = this.constants.string(_name);\n        let namespace = _namespace ? this.constants.string(_namespace) : 0;\n        if (this.isComponentAttrs) {\n            this.push(29 /* ComponentAttr */, name, trusting === true ? 1 : 0, namespace);\n        } else {\n            this.push(28 /* DynamicAttr */, name, trusting === true ? 1 : 0, namespace);\n        }\n    }\n    comment(_comment) {\n        let comment = this.constants.string(_comment);\n        this.push(23 /* Comment */, comment);\n    }\n    modifier(locator, params, hash) {\n        this.pushFrame();\n        this.compileArgs(params, hash, null, true);\n        this.push(32 /* Modifier */, this.constants.handle(locator));\n        this.popFrame();\n    }\n    // lists\n    putIterator() {\n        this.push(54 /* PutIterator */);\n    }\n    enterList(start) {\n        this.reserve(52 /* EnterList */);\n        this.labels.target(this.pos, start);\n    }\n    exitList() {\n        this.push(53 /* ExitList */);\n    }\n    iterate(breaks) {\n        this.reserve(55 /* Iterate */);\n        this.labels.target(this.pos, breaks);\n    }\n    // expressions\n    setVariable(symbol) {\n        this.push(2 /* SetVariable */, symbol);\n    }\n    setBlock(symbol) {\n        this.push(3 /* SetBlock */, symbol);\n    }\n    getVariable(symbol) {\n        this.push(4 /* GetVariable */, symbol);\n    }\n    getProperty(key) {\n        this.push(5 /* GetProperty */, this.string(key));\n    }\n    getBlock(symbol) {\n        this.push(6 /* GetBlock */, symbol);\n    }\n    hasBlock(symbol) {\n        this.push(7 /* HasBlock */, symbol);\n    }\n    hasBlockParams(to) {\n        this.getBlock(to);\n        this.resolveBlock();\n        this.push(8 /* HasBlockParams */);\n    }\n    concat(size) {\n        this.push(9 /* Concat */, size);\n    }\n    load(register) {\n        this.push(15 /* Load */, register);\n    }\n    fetch(register) {\n        this.push(16 /* Fetch */, register);\n    }\n    dup(register = Register.sp, offset = 0) {\n        return this.push(13 /* Dup */, register, offset);\n    }\n    pop(count = 1) {\n        return this.push(14 /* Pop */, count);\n    }\n    // vm\n    returnTo(label) {\n        this.reserveMachine(21 /* ReturnTo */);\n        this.labels.target(this.pos, label);\n    }\n    primitive(_primitive) {\n        let type = 0 /* NUMBER */;\n        let primitive;\n        switch (typeof _primitive) {\n            case 'number':\n                if (_primitive % 1 === 0) {\n                    if (_primitive > -1) {\n                        primitive = _primitive;\n                    } else {\n                        primitive = this.negative(_primitive);\n                        type = 4 /* NEGATIVE */;\n                    }\n                } else {\n                    primitive = this.float(_primitive);\n                    type = 1 /* FLOAT */;\n                }\n                break;\n            case 'string':\n                primitive = this.string(_primitive);\n                type = 2 /* STRING */;\n                break;\n            case 'boolean':\n                primitive = _primitive | 0;\n                type = 3 /* BOOLEAN_OR_VOID */;\n                break;\n            case 'object':\n                // assume null\n                primitive = 2;\n                type = 3 /* BOOLEAN_OR_VOID */;\n                break;\n            case 'undefined':\n                primitive = 3;\n                type = 3 /* BOOLEAN_OR_VOID */;\n                break;\n            default:\n                throw new Error('Invalid primitive passed to pushPrimitive');\n        }\n        this.push(11 /* Primitive */, primitive << 3 | type);\n    }\n    float(num) {\n        return this.constants.float(num);\n    }\n    negative(num) {\n        return this.constants.negative(num);\n    }\n    pushPrimitiveReference(primitive) {\n        this.primitive(primitive);\n        this.primitiveReference();\n    }\n    primitiveReference() {\n        this.push(12 /* PrimitiveReference */);\n    }\n    helper(helper, params, hash) {\n        this.pushFrame();\n        this.compileArgs(params, hash, null, true);\n        this.push(1 /* Helper */, this.constants.handle(helper));\n        this.popFrame();\n        this.fetch(Register.v0);\n    }\n    bindDynamicScope(_names) {\n        this.push(35 /* BindDynamicScope */, this.names(_names));\n    }\n    enter(args) {\n        this.push(49 /* Enter */, args);\n    }\n    exit() {\n        this.push(50 /* Exit */);\n    }\n    return() {\n        this.pushMachine(20 /* Return */);\n    }\n    jump(target) {\n        this.reserveMachine(44 /* Jump */);\n        this.labels.target(this.pos, target);\n    }\n    jumpIf(target) {\n        this.reserve(45 /* JumpIf */);\n        this.labels.target(this.pos, target);\n    }\n    jumpUnless(target) {\n        this.reserve(46 /* JumpUnless */);\n        this.labels.target(this.pos, target);\n    }\n    // internal helpers\n    string(_string) {\n        return this.constants.string(_string);\n    }\n    names(_names) {\n        let names = [];\n        for (let i = 0; i < _names.length; i++) {\n            let n = _names[i];\n            names[i] = this.constants.string(n);\n        }\n        return this.constants.array(names);\n    }\n    symbols(symbols) {\n        return this.constants.array(symbols);\n    }\n    // convenience methods\n    inlineBlock(block) {\n        let { parameters, statements } = block;\n        let symbolTable = { parameters, referrer: this.containingLayout.referrer };\n        let options = {\n            program: this.program,\n            macros: this.macros,\n            Builder: this.constructor,\n            resolver: this.resolver,\n            asPartial: this.asPartial,\n            referrer: this.referrer\n        };\n        return new CompilableTemplate(statements, this.containingLayout, options, symbolTable);\n    }\n    evalSymbols() {\n        let { containingLayout: { block } } = this;\n        return block.hasEval ? block.symbols : null;\n    }\n    compileParams(params) {\n        if (!params) return 0;\n        for (let i = 0; i < params.length; i++) {\n            this.expr(params[i]);\n        }\n        return params.length;\n    }\n    compileArgs(params, hash, blocks, synthetic) {\n        if (blocks) {\n            this.pushYieldableBlock(blocks.main);\n            this.pushYieldableBlock(blocks.else);\n            this.pushYieldableBlock(blocks.attrs);\n        }\n        let count = this.compileParams(params);\n        let flags = count << 4;\n        if (synthetic) flags |= 0b1000;\n        if (blocks) {\n            flags |= 0b111;\n        }\n        let names = EMPTY_ARRAY;\n        if (hash) {\n            names = hash[0];\n            let val = hash[1];\n            for (let i = 0; i < val.length; i++) {\n                this.expr(val[i]);\n            }\n        }\n        this.pushArgs(names, flags);\n    }\n    invokeStaticBlock(block, callerCount = 0) {\n        let { parameters } = block.symbolTable;\n        let calleeCount = parameters.length;\n        let count = Math.min(callerCount, calleeCount);\n        this.pushFrame();\n        if (count) {\n            this.pushChildScope();\n            for (let i = 0; i < count; i++) {\n                this.dup(Register.fp, callerCount - i);\n                this.setVariable(parameters[i]);\n            }\n        }\n        this.pushBlock(block);\n        this.resolveBlock();\n        this.invokeVirtual();\n        if (count) {\n            this.popScope();\n        }\n        this.popFrame();\n    }\n    builtInGuardedAppend() {\n        this.dup();\n        this.startLabels();\n        this.isComponent();\n        this.enter(2);\n        this.jumpUnless('ELSE');\n        this.pushCurriedComponent();\n        this.pushDynamicComponentInstance();\n        this.invokeComponent(null, null, null, false, null, null);\n        this.exit();\n        this.return();\n        this.label('ELSE');\n        this.dynamicContent();\n        this.exit();\n        this.return();\n        this.stopLabels();\n    }\n    guardedAppend(expression, trusting) {\n        this.startLabels();\n        this.pushFrame();\n        this.returnTo('END');\n        if (this.stdLib) {\n            this.primitive(!!trusting);\n            this.load(Register.t0);\n            this.expr(expression);\n            this.primitive(this.stdLib.guardedAppend);\n            this.invokeVirtual();\n        } else {\n            this.expr(expression);\n            this.dup();\n            this.isComponent();\n            this.enter(2);\n            this.jumpUnless('ELSE');\n            this.pushCurriedComponent();\n            this.pushDynamicComponentInstance();\n            this.invokeComponent(null, null, null, false, null, null);\n            this.exit();\n            this.return();\n            this.label('ELSE');\n            this.primitive(!!trusting);\n            this.load(Register.t0);\n            this.dynamicContent();\n            this.exit();\n            this.return();\n        }\n        this.label('END');\n        this.popFrame();\n        this.stopLabels();\n    }\n    yield(to, params) {\n        this.compileArgs(params, null, null, false);\n        this.getBlock(to);\n        this.resolveBlock();\n        this.invokeYield();\n        this.popScope();\n        this.popFrame();\n    }\n    populateLayout(state) {\n        this.push(73 /* PopulateLayout */, state);\n    }\n    invokeComponent(attrs, params, hash, synthetic, block, inverse = null, layout) {\n        this.fetch(Register.s0);\n        this.dup(Register.sp, 1);\n        this.load(Register.s0);\n        this.pushFrame();\n        let blocks = { main: block, else: inverse, attrs };\n        this.compileArgs(params, hash, blocks, synthetic);\n        this.prepareArgs(Register.s0);\n        this.invokePreparedComponent(block !== null, () => {\n            if (layout) {\n                this.pushSymbolTable(layout.symbolTable);\n                this.pushLayout(layout);\n                this.resolveLayout();\n            } else {\n                this.getComponentLayout(Register.s0);\n            }\n            this.populateLayout(Register.s0);\n        });\n        this.load(Register.s0);\n    }\n    invokeStaticComponent(capabilities, layout, attrs, params, hash, synthetic, block, inverse = null) {\n        let { symbolTable } = layout;\n        let bailOut = symbolTable.hasEval || capabilities.prepareArgs;\n        if (bailOut) {\n            this.invokeComponent(attrs, params, hash, synthetic, block, inverse, layout);\n            return;\n        }\n        this.fetch(Register.s0);\n        this.dup(Register.sp, 1);\n        this.load(Register.s0);\n        let { symbols } = symbolTable;\n        if (capabilities.createArgs) {\n            this.pushFrame();\n            this.compileArgs(null, hash, null, synthetic);\n        }\n        this.beginComponentTransaction();\n        this.pushDynamicScope();\n        this.createComponent(Register.s0, block !== null);\n        if (capabilities.createArgs) {\n            this.popFrame();\n        }\n        this.registerComponentDestructor(Register.s0);\n        let bindings = [];\n        this.getComponentSelf(Register.s0);\n        bindings.push({ symbol: 0, isBlock: false });\n        for (let i = 0; i < symbols.length; i++) {\n            let symbol = symbols[i];\n            switch (symbol.charAt(0)) {\n                case '&':\n                    let callerBlock = null;\n                    if (symbol === '&default') {\n                        callerBlock = block;\n                    } else if (symbol === '&inverse') {\n                        callerBlock = inverse;\n                    } else if (symbol === ATTRS_BLOCK) {\n                        callerBlock = attrs;\n                    } else {\n                        throw unreachable();\n                    }\n                    if (callerBlock) {\n                        this.pushYieldableBlock(callerBlock);\n                        bindings.push({ symbol: i + 1, isBlock: true });\n                    } else {\n                        this.pushYieldableBlock(null);\n                        bindings.push({ symbol: i + 1, isBlock: true });\n                    }\n                    break;\n                case '@':\n                    if (!hash) {\n                        break;\n                    }\n                    let [keys, values] = hash;\n                    let lookupName = symbol;\n                    if (synthetic) {\n                        lookupName = symbol.slice(1);\n                    }\n                    let index = keys.indexOf(lookupName);\n                    if (index !== -1) {\n                        this.expr(values[index]);\n                        bindings.push({ symbol: i + 1, isBlock: false });\n                    }\n                    break;\n            }\n        }\n        this.pushRootScope(symbols.length + 1, !!(block || inverse || attrs));\n        for (let i = bindings.length - 1; i >= 0; i--) {\n            let { symbol, isBlock } = bindings[i];\n            if (isBlock) {\n                this.setBlock(symbol);\n            } else {\n                this.setVariable(symbol);\n            }\n        }\n        this.pushFrame();\n        this.invokeStatic(layout);\n        this.didRenderLayout(Register.s0);\n        this.popFrame();\n        this.popScope();\n        this.popDynamicScope();\n        this.commitComponentTransaction();\n        this.load(Register.s0);\n    }\n    dynamicComponent(definition, /* TODO: attrs: Option<RawInlineBlock>, */params, hash, synthetic, block, inverse = null) {\n        this.startLabels();\n        this.pushFrame();\n        this.returnTo('END');\n        this.expr(definition);\n        this.dup();\n        this.enter(2);\n        this.jumpUnless('ELSE');\n        this.resolveDynamicComponent(this.referrer);\n        this.pushDynamicComponentInstance();\n        this.invokeComponent(null, params, hash, synthetic, block, inverse);\n        this.label('ELSE');\n        this.exit();\n        this.return();\n        this.label('END');\n        this.popFrame();\n        this.stopLabels();\n    }\n    isComponent() {\n        this.push(57 /* IsComponent */);\n    }\n    curryComponent(definition, /* TODO: attrs: Option<RawInlineBlock>, */params, hash, synthetic) {\n        let referrer = this.referrer;\n        this.pushFrame();\n        this.compileArgs(params, hash, null, synthetic);\n        this.push(66 /* CaptureArgs */);\n        this.expr(definition);\n        this.push(58 /* CurryComponent */, this.constants.serializable(referrer));\n        this.popFrame();\n        this.fetch(Register.v0);\n    }\n    pushSymbolTable(table) {\n        if (table) {\n            let constant = this.constants.serializable(table);\n            this.push(40 /* PushSymbolTable */, constant);\n        } else {\n            this.primitive(null);\n        }\n    }\n    pushBlockScope() {\n        this.push(39 /* PushBlockScope */);\n    }\n    pushYieldableBlock(block) {\n        this.pushSymbolTable(block && block.symbolTable);\n        this.pushBlockScope();\n        this.pushBlock(block);\n    }\n    template(block) {\n        if (!block) return null;\n        return this.inlineBlock(block);\n    }\n}\nexport default OpcodeBuilder;\nexport class LazyOpcodeBuilder extends OpcodeBuilder {\n    pushBlock(block) {\n        if (block) {\n            this.pushOther(block);\n        } else {\n            this.primitive(null);\n        }\n    }\n    resolveBlock() {\n        this.push(38 /* CompileBlock */);\n    }\n    pushLayout(layout) {\n        if (layout) {\n            this.pushOther(layout);\n        } else {\n            this.primitive(null);\n        }\n    }\n    resolveLayout() {\n        this.push(38 /* CompileBlock */);\n    }\n    invokeStatic(compilable) {\n        this.pushOther(compilable);\n        this.push(38 /* CompileBlock */);\n        this.pushMachine(41 /* InvokeVirtual */);\n    }\n    pushOther(value) {\n        this.push(10 /* Constant */, this.other(value));\n    }\n    other(value) {\n        return this.constants.other(value);\n    }\n}\nexport class EagerOpcodeBuilder extends OpcodeBuilder {\n    pushBlock(block) {\n        let handle = block ? block.compile(this.stdLib) : null;\n        this.primitive(handle);\n    }\n    resolveBlock() {\n        return;\n    }\n    pushLayout(layout) {\n        if (layout) {\n            this.primitive(layout.compile(this.stdLib));\n        } else {\n            this.primitive(null);\n        }\n    }\n    resolveLayout() {}\n    invokeStatic(compilable) {\n        let handle = compilable.compile();\n        // If the handle for the invoked component is not yet known (for example,\n        // because this is a recursive invocation and we're still compiling), push a\n        // function that will produce the correct handle when the heap is\n        // serialized.\n        if (handle === PLACEHOLDER_HANDLE) {\n            this.pushMachine(42 /* InvokeStatic */, () => compilable.compile(this.stdLib));\n        } else {\n            this.pushMachine(42 /* InvokeStatic */, handle);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { dict, EMPTY_ARRAY } from '@glimmer/util';\nimport { combineTagged } from '@glimmer/reference';\nimport { CONSTANT_TAG } from '@glimmer/reference';\nimport { PrimitiveReference, UNDEFINED_REFERENCE } from '../references';\n\nexport class Arguments {\n    constructor() {\n        this.stack = null;\n        this.positional = new PositionalArguments();\n        this.named = new NamedArguments();\n        this.blocks = new BlockArguments();\n    }\n    setup(stack, names, blockNames, positionalCount, synthetic) {\n        this.stack = stack;\n        /*\n               | ... | blocks      | positional  | named |\n               | ... | b0    b1    | p0 p1 p2 p3 | n0 n1 |\n         index | ... | 4/5/6 7/8/9 | 10 11 12 13 | 14 15 |\n                       ^             ^             ^  ^\n                     bbase         pbase       nbase  sp\n        */\n        let named = this.named;\n        let namedCount = names.length;\n        let namedBase = stack.sp - namedCount + 1;\n        named.setup(stack, namedBase, namedCount, names, synthetic);\n        let positional = this.positional;\n        let positionalBase = namedBase - positionalCount;\n        positional.setup(stack, positionalBase, positionalCount);\n        let blocks = this.blocks;\n        let blocksCount = blockNames.length;\n        let blocksBase = positionalBase - blocksCount * 3;\n        blocks.setup(stack, blocksBase, blocksCount, blockNames);\n    }\n    get tag() {\n        return combineTagged([this.positional, this.named]);\n    }\n    get base() {\n        return this.blocks.base;\n    }\n    get length() {\n        return this.positional.length + this.named.length + this.blocks.length * 3;\n    }\n    at(pos) {\n        return this.positional.at(pos);\n    }\n    realloc(offset) {\n        if (offset > 0) {\n            let { positional, named, stack } = this;\n            let newBase = positional.base + offset;\n            let length = positional.length + named.length;\n            for (let i = length - 1; i >= 0; i--) {\n                stack.copy(i + positional.base, i + newBase);\n            }\n            positional.base += offset;\n            named.base += offset;\n            stack.sp += offset;\n        }\n    }\n    capture() {\n        let positional = this.positional.length === 0 ? EMPTY_POSITIONAL : this.positional.capture();\n        let named = this.named.length === 0 ? EMPTY_NAMED : this.named.capture();\n        return {\n            tag: this.tag,\n            length: this.length,\n            positional,\n            named\n        };\n    }\n    clear() {\n        let { stack, length } = this;\n        stack.pop(length);\n    }\n}\nexport class PositionalArguments {\n    constructor() {\n        this.base = 0;\n        this.length = 0;\n        this.stack = null;\n        this._tag = null;\n        this._references = null;\n    }\n    setup(stack, base, length) {\n        this.stack = stack;\n        this.base = base;\n        this.length = length;\n        if (length === 0) {\n            this._tag = CONSTANT_TAG;\n            this._references = EMPTY_ARRAY;\n        } else {\n            this._tag = null;\n            this._references = null;\n        }\n    }\n    get tag() {\n        let tag = this._tag;\n        if (!tag) {\n            tag = this._tag = combineTagged(this.references);\n        }\n        return tag;\n    }\n    at(position) {\n        let { base, length, stack } = this;\n        if (position < 0 || position >= length) {\n            return UNDEFINED_REFERENCE;\n        }\n        return stack.get(position, base);\n    }\n    capture() {\n        return new CapturedPositionalArguments(this.tag, this.references);\n    }\n    prepend(other) {\n        let additions = other.length;\n        if (additions > 0) {\n            let { base, length, stack } = this;\n            this.base = base = base - additions;\n            this.length = length + additions;\n            for (let i = 0; i < additions; i++) {\n                stack.set(other.at(i), i, base);\n            }\n            this._tag = null;\n            this._references = null;\n        }\n    }\n    get references() {\n        let references = this._references;\n        if (!references) {\n            let { stack, base, length } = this;\n            references = this._references = stack.sliceArray(base, base + length);\n        }\n        return references;\n    }\n}\nexport class CapturedPositionalArguments {\n    constructor(tag, references, length = references.length) {\n        this.tag = tag;\n        this.references = references;\n        this.length = length;\n    }\n    static empty() {\n        return new CapturedPositionalArguments(CONSTANT_TAG, EMPTY_ARRAY, 0);\n    }\n    at(position) {\n        return this.references[position];\n    }\n    value() {\n        return this.references.map(this.valueOf);\n    }\n    get(name) {\n        let { references, length } = this;\n        if (name === 'length') {\n            return PrimitiveReference.create(length);\n        } else {\n            let idx = parseInt(name, 10);\n            if (idx < 0 || idx >= length) {\n                return UNDEFINED_REFERENCE;\n            } else {\n                return references[idx];\n            }\n        }\n    }\n    valueOf(reference) {\n        return reference.value();\n    }\n}\nexport class NamedArguments {\n    constructor() {\n        this.base = 0;\n        this.length = 0;\n        this._references = null;\n        this._names = EMPTY_ARRAY;\n        this._atNames = EMPTY_ARRAY;\n    }\n    setup(stack, base, length, names, synthetic) {\n        this.stack = stack;\n        this.base = base;\n        this.length = length;\n        if (length === 0) {\n            this._references = EMPTY_ARRAY;\n            this._names = EMPTY_ARRAY;\n            this._atNames = EMPTY_ARRAY;\n        } else {\n            this._references = null;\n            if (synthetic) {\n                this._names = names;\n                this._atNames = null;\n            } else {\n                this._names = null;\n                this._atNames = names;\n            }\n        }\n    }\n    get tag() {\n        return combineTagged(this.references);\n    }\n    get names() {\n        let names = this._names;\n        if (!names) {\n            names = this._names = this._atNames.map(this.toSyntheticName);\n        }\n        return names;\n    }\n    get atNames() {\n        let atNames = this._atNames;\n        if (!atNames) {\n            atNames = this._atNames = this._names.map(this.toAtName);\n        }\n        return atNames;\n    }\n    has(name) {\n        return this.names.indexOf(name) !== -1;\n    }\n    get(name, synthetic = true) {\n        let { base, stack } = this;\n        let names = synthetic ? this.names : this.atNames;\n        let idx = names.indexOf(name);\n        if (idx === -1) {\n            return UNDEFINED_REFERENCE;\n        }\n        return stack.get(idx, base);\n    }\n    capture() {\n        return new CapturedNamedArguments(this.tag, this.names, this.references);\n    }\n    merge(other) {\n        let { length: extras } = other;\n        if (extras > 0) {\n            let { names, length, stack } = this;\n            let { names: extraNames } = other;\n            if (Object.isFrozen(names) && names.length === 0) {\n                names = [];\n            }\n            for (let i = 0; i < extras; i++) {\n                let name = extraNames[i];\n                let idx = names.indexOf(name);\n                if (idx === -1) {\n                    length = names.push(name);\n                    stack.push(other.references[i]);\n                }\n            }\n            this.length = length;\n            this._references = null;\n            this._names = names;\n            this._atNames = null;\n        }\n    }\n    get references() {\n        let references = this._references;\n        if (!references) {\n            let { base, length, stack } = this;\n            references = this._references = stack.sliceArray(base, base + length);\n        }\n        return references;\n    }\n    toSyntheticName(name) {\n        return name.slice(1);\n    }\n    toAtName(name) {\n        return `@${name}`;\n    }\n}\nexport class CapturedNamedArguments {\n    constructor(tag, names, references) {\n        this.tag = tag;\n        this.names = names;\n        this.references = references;\n        this.length = names.length;\n        this._map = null;\n    }\n    get map() {\n        let map = this._map;\n        if (!map) {\n            let { names, references } = this;\n            map = this._map = dict();\n            for (let i = 0; i < names.length; i++) {\n                let name = names[i];\n                map[name] = references[i];\n            }\n        }\n        return map;\n    }\n    has(name) {\n        return this.names.indexOf(name) !== -1;\n    }\n    get(name) {\n        let { names, references } = this;\n        let idx = names.indexOf(name);\n        if (idx === -1) {\n            return UNDEFINED_REFERENCE;\n        } else {\n            return references[idx];\n        }\n    }\n    value() {\n        let { names, references } = this;\n        let out = dict();\n        for (let i = 0; i < names.length; i++) {\n            let name = names[i];\n            out[name] = references[i].value();\n        }\n        return out;\n    }\n}\nexport class BlockArguments {\n    constructor() {\n        this.internalValues = null;\n        this.internalTag = null;\n        this.names = EMPTY_ARRAY;\n        this.length = 0;\n        this.base = 0;\n    }\n    setup(stack, base, length, names) {\n        this.stack = stack;\n        this.names = names;\n        this.base = base;\n        this.length = length;\n        if (length === 0) {\n            this.internalTag = CONSTANT_TAG;\n            this.internalValues = EMPTY_ARRAY;\n        } else {\n            this.internalTag = null;\n            this.internalValues = null;\n        }\n    }\n    get values() {\n        let values = this.internalValues;\n        if (!values) {\n            let { base, length, stack } = this;\n            values = this.internalValues = stack.sliceArray(base, base + length * 3);\n        }\n        return values;\n    }\n    has(name) {\n        return this.names.indexOf(name) !== -1;\n    }\n    get(name) {\n        let { base, stack, names } = this;\n        let idx = names.indexOf(name);\n        if (names.indexOf(name) === -1) {\n            return null;\n        }\n        let table = stack.get(idx * 3, base);\n        let scope = stack.get(idx * 3 + 1, base); // FIXME(mmun): shouldn't need to cast this\n        let handle = stack.get(idx * 3 + 2, base);\n        return handle === null ? null : [handle, scope, table];\n    }\n    capture() {\n        return new CapturedBlockArguments(this.names, this.values);\n    }\n}\nclass CapturedBlockArguments {\n    constructor(names, values) {\n        this.names = names;\n        this.values = values;\n        this.length = names.length;\n    }\n    has(name) {\n        return this.names.indexOf(name) !== -1;\n    }\n    get(name) {\n        let idx = this.names.indexOf(name);\n        if (idx === -1) return null;\n        return [this.values[idx * 3 + 2], this.values[idx * 3 + 1], this.values[idx * 3]];\n    }\n}\nconst EMPTY_NAMED = new CapturedNamedArguments(CONSTANT_TAG, EMPTY_ARRAY, EMPTY_ARRAY);\nconst EMPTY_POSITIONAL = new CapturedPositionalArguments(CONSTANT_TAG, EMPTY_ARRAY);\nexport const EMPTY_ARGS = { tag: CONSTANT_TAG, length: 0, positional: EMPTY_POSITIONAL, named: EMPTY_NAMED };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","const CURRIED_COMPONENT_DEFINITION_BRAND = 'CURRIED COMPONENT DEFINITION [id=6f00feb9-a0ef-4547-99ea-ac328f80acea]';\nexport function isCurriedComponentDefinition(definition) {\n    return !!(definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND]);\n}\nexport function isComponentDefinition(definition) {\n    return definition && definition[CURRIED_COMPONENT_DEFINITION_BRAND];\n}\nexport class CurriedComponentDefinition {\n    /** @internal */\n    constructor(inner, args) {\n        this.inner = inner;\n        this.args = args;\n        this[CURRIED_COMPONENT_DEFINITION_BRAND] = true;\n    }\n    unwrap(args) {\n        args.realloc(this.offset);\n        let definition = this;\n        while (true) {\n            let { args: curriedArgs, inner } = definition;\n            if (curriedArgs) {\n                args.positional.prepend(curriedArgs.positional);\n                args.named.merge(curriedArgs.named);\n            }\n            if (!isCurriedComponentDefinition(inner)) {\n                return inner;\n            }\n            definition = inner;\n        }\n    }\n    /** @internal */\n    get offset() {\n        let { inner, args } = this;\n        let length = args ? args.positional.length : 0;\n        return isCurriedComponentDefinition(inner) ? length + inner.offset : length;\n    }\n}\nexport function curry(spec, args = null) {\n    return new CurriedComponentDefinition(spec, args);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycmllZC1jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9ydW50aW1lL2xpYi9jb21wb25lbnQvY3VycmllZC1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsTUFBTSxBQUFrQyxxQ0FBRyxBQUF3RSxBQUFDO0FBRXBILEFBQU0sNkNBQXVDLEFBQWtCO0FBQzdELEFBQU0sV0FBQyxDQUFDLEFBQUMsRUFBQyxBQUFVLGNBQUksQUFBVSxXQUFDLEFBQWtDLEFBQUMsQUFBQyxBQUFDLEFBQzFFO0FBQUM7QUFFRCxBQUFNLHNDQUFnQyxBQUFrQjtBQUN0RCxBQUFNLFdBQUMsQUFBVSxjQUFJLEFBQVUsV0FBQyxBQUFrQyxBQUFDLEFBQUMsQUFDdEU7QUFBQztBQUVELEFBQU07QUFDSixBQUFnQjtBQUNoQixnQkFBc0IsQUFBdUQsT0FBWSxBQUFnQztBQUFuRyxhQUFLLFFBQUwsQUFBSyxBQUFrRDtBQUFZLGFBQUksT0FBSixBQUFJLEFBQTRCO0FBQ3ZILEFBQUksYUFBQyxBQUFrQyxBQUFDLHNDQUFHLEFBQUksQUFBQyxBQUNsRDtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQWU7QUFDcEIsQUFBSSxhQUFDLEFBQU8sUUFBQyxBQUFJLEtBQUMsQUFBTSxBQUFDLEFBQUM7QUFFMUIsWUFBSSxBQUFVLGFBQStCLEFBQUksQUFBQztBQUVsRCxlQUFPLEFBQUksTUFBRSxBQUFDO0FBQ1osZ0JBQUksRUFBRSxBQUFJLE1BQUUsQUFBVyxhQUFFLEFBQUssQUFBRSxVQUFHLEFBQVUsQUFBQztBQUU5QyxBQUFFLEFBQUMsZ0JBQUMsQUFBVyxBQUFDLGFBQUMsQUFBQztBQUNoQixBQUFJLHFCQUFDLEFBQVUsV0FBQyxBQUFPLFFBQUMsQUFBVyxZQUFDLEFBQVUsQUFBQyxBQUFDO0FBQ2hELEFBQUkscUJBQUMsQUFBSyxNQUFDLEFBQUssTUFBQyxBQUFXLFlBQUMsQUFBSyxBQUFDLEFBQUMsQUFDdEM7QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxDQUFDLEFBQTRCLDZCQUFDLEFBQUssQUFBQyxBQUFDLFFBQUMsQUFBQztBQUN6QyxBQUFNLHVCQUFDLEFBQUssQUFBQyxBQUNmO0FBQUM7QUFFRCxBQUFVLHlCQUFHLEFBQUssQUFBQyxBQUNyQjtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQWdCO0FBQ2hCLFFBQUksQUFBTTtBQUNSLFlBQUksRUFBRSxBQUFLLE9BQUUsQUFBSSxBQUFFLFNBQUcsQUFBSSxBQUFDO0FBQzNCLFlBQUksQUFBTSxTQUFHLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBVSxXQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUM7QUFDL0MsQUFBTSxlQUFDLEFBQTRCLDZCQUFDLEFBQUssQUFBQyxTQUFHLEFBQU0sU0FBRyxBQUFLLE1BQUMsQUFBTSxTQUFHLEFBQU0sQUFBQyxBQUM5RTtBQUFDLEFBQ0Y7O0FBRUQsQUFBTSxzQkFBZ0IsQUFBK0IsTUFBRSxPQUFtQyxBQUFJO0FBQzVGLEFBQU0sV0FBQyxJQUFJLEFBQTBCLDJCQUFDLEFBQTJCLE1BQUUsQUFBSSxBQUFDLEFBQUMsQUFDM0U7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wYXF1ZSwgT3B0aW9uIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmltcG9ydCB7IENvbXBvbmVudERlZmluaXRpb24sIFB1YmxpY0NvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgSUNhcHR1cmVkQXJndW1lbnRzLCBBcmd1bWVudHMgfSBmcm9tICcuLi92bS9hcmd1bWVudHMnO1xuXG5jb25zdCBDVVJSSUVEX0NPTVBPTkVOVF9ERUZJTklUSU9OX0JSQU5EID0gJ0NVUlJJRUQgQ09NUE9ORU5UIERFRklOSVRJT04gW2lkPTZmMDBmZWI5LWEwZWYtNDU0Ny05OWVhLWFjMzI4ZjgwYWNlYV0nO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbihkZWZpbml0aW9uOiBPcGFxdWUpOiBkZWZpbml0aW9uIGlzIEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uIHtcbiAgcmV0dXJuICEhKGRlZmluaXRpb24gJiYgZGVmaW5pdGlvbltDVVJSSUVEX0NPTVBPTkVOVF9ERUZJTklUSU9OX0JSQU5EXSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXBvbmVudERlZmluaXRpb24oZGVmaW5pdGlvbjogT3BhcXVlKTogZGVmaW5pdGlvbiBpcyBDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiB7XG4gIHJldHVybiBkZWZpbml0aW9uICYmIGRlZmluaXRpb25bQ1VSUklFRF9DT01QT05FTlRfREVGSU5JVElPTl9CUkFORF07XG59XG5cbmV4cG9ydCBjbGFzcyBDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiB7XG4gIC8qKiBAaW50ZXJuYWwgKi9cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGlubmVyOiBDb21wb25lbnREZWZpbml0aW9uIHwgQ3VycmllZENvbXBvbmVudERlZmluaXRpb24sIHByb3RlY3RlZCBhcmdzOiBPcHRpb248SUNhcHR1cmVkQXJndW1lbnRzPikge1xuICAgIHRoaXNbQ1VSUklFRF9DT01QT05FTlRfREVGSU5JVElPTl9CUkFORF0gPSB0cnVlO1xuICB9XG5cbiAgdW53cmFwKGFyZ3M6IEFyZ3VtZW50cyk6IENvbXBvbmVudERlZmluaXRpb24ge1xuICAgIGFyZ3MucmVhbGxvYyh0aGlzLm9mZnNldCk7XG5cbiAgICBsZXQgZGVmaW5pdGlvbjogQ3VycmllZENvbXBvbmVudERlZmluaXRpb24gPSB0aGlzO1xuXG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxldCB7IGFyZ3M6IGN1cnJpZWRBcmdzLCBpbm5lciB9ID0gZGVmaW5pdGlvbjtcblxuICAgICAgaWYgKGN1cnJpZWRBcmdzKSB7XG4gICAgICAgIGFyZ3MucG9zaXRpb25hbC5wcmVwZW5kKGN1cnJpZWRBcmdzLnBvc2l0aW9uYWwpO1xuICAgICAgICBhcmdzLm5hbWVkLm1lcmdlKGN1cnJpZWRBcmdzLm5hbWVkKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0N1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKGlubmVyKSkge1xuICAgICAgICByZXR1cm4gaW5uZXI7XG4gICAgICB9XG5cbiAgICAgIGRlZmluaXRpb24gPSBpbm5lcjtcbiAgICB9XG4gIH1cblxuICAvKiogQGludGVybmFsICovXG4gIGdldCBvZmZzZXQoKTogbnVtYmVyIHtcbiAgICBsZXQgeyBpbm5lciwgYXJncyB9ID0gdGhpcztcbiAgICBsZXQgbGVuZ3RoID0gYXJncyA/IGFyZ3MucG9zaXRpb25hbC5sZW5ndGggOiAwO1xuICAgIHJldHVybiBpc0N1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKGlubmVyKSA/IGxlbmd0aCArIGlubmVyLm9mZnNldCA6IGxlbmd0aDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3Vycnkoc3BlYzogUHVibGljQ29tcG9uZW50RGVmaW5pdGlvbiwgYXJnczogT3B0aW9uPElDYXB0dXJlZEFyZ3VtZW50cz4gPSBudWxsKTogQ3VycmllZENvbXBvbmVudERlZmluaXRpb24ge1xuICByZXR1cm4gbmV3IEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKHNwZWMgYXMgQ29tcG9uZW50RGVmaW5pdGlvbiwgYXJncyk7XG59XG4iXX0=","import { isConst } from '@glimmer/reference';\nimport { Register } from '@glimmer/vm';\n\nimport { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';\nimport { ConditionalReference } from '../../references';\nimport { isCurriedComponentDefinition } from '../../component/curried-component';\n\nexport class IsCurriedComponentDefinitionReference extends ConditionalReference {\n    static create(inner) {\n        return new IsCurriedComponentDefinitionReference(inner);\n    }\n    toBool(value) {\n        return isCurriedComponentDefinition(value);\n    }\n}\nAPPEND_OPCODES.add(24 /* DynamicContent */, vm => {\n    let reference = vm.stack.pop();\n    let isTrusting = vm.fetchValue(Register.t0);\n    let value = reference.value();\n    let content;\n    if (isTrusting) {\n        content = vm.elements().appendTrustingDynamicContent(value);\n    } else {\n        content = vm.elements().appendCautiousDynamicContent(value);\n    }\n    if (!isConst(reference)) {\n        vm.updateWith(new UpdateDynamicContentOpcode(reference, content));\n    }\n    vm.loadValue(Register.t0, null);\n});\nclass UpdateDynamicContentOpcode extends UpdatingOpcode {\n    constructor(reference, content) {\n        super();\n        this.reference = reference;\n        this.content = content;\n        this.tag = reference.tag;\n    }\n    evaluate(vm) {\n        let { content, reference } = this;\n        content.update(vm.env, reference.value());\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvY29udGVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQUUsQUFBTyxBQUFzQyxlQUFNLEFBQW9CLEFBQUM7QUFDakYsQUFBTyxTQUFNLEFBQVEsQUFBRSxnQkFBTSxBQUFhLEFBQUMsQUFDM0MsQUFBTyxBQUFFLEFBQUssQUFBRSxBQUFpQixBQUFFLEFBQU0sQUFBZ0IsQUFBQzs7QUFJMUQsQUFBTyxTQUFFLEFBQWMsZ0JBQUUsQUFBYyxBQUFFLHNCQUFNLEFBQWUsQUFBQztBQUUvRCxBQUFPLFNBQUUsQUFBb0IsQUFBRSw0QkFBTSxBQUFrQixBQUFDO0FBQ3hELEFBQU8sU0FBRSxBQUE0QixBQUFFLG9DQUFNLEFBQW1DLEFBQUMsQUFDakYsQUFBTyxBQUFFLEFBQWtCLEFBQUUsQUFBTSxBQUFnQixBQUFDOztBQUVwRCxBQUFNLGFBQTZDLDhDQUFRLEFBQW9CO0FBQzdFLEFBQU0sV0FBQyxBQUFNLE9BQUMsQUFBd0I7QUFDcEMsQUFBTSxlQUFDLElBQUksQUFBcUMsc0NBQUMsQUFBSyxBQUFDLEFBQUMsQUFDMUQ7QUFBQztBQUVELEFBQU0sV0FBQyxBQUFhO0FBQ2xCLEFBQU0sZUFBQyxBQUE0Qiw2QkFBQyxBQUFLLEFBQUMsQUFBQyxBQUM3QztBQUFDLEFBQ0Y7O0FBRUQsQUFBYyxlQUFDLEFBQUcsNkJBQXFCLEFBQUUsRUFBSDtBQUNwQyxRQUFJLEFBQVMsQUFBRyxBQUFLLFlBQUMsQUFBRSxHQUFDLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBRSxBQUFrQixBQUFDLEFBQUM7QUFDMUQsUUFBSSxBQUFVLGFBQUcsQUFBRSxHQUFDLEFBQVUsV0FBQyxBQUFRLFNBQUMsQUFBRSxBQUFDLEFBQUM7QUFFNUMsUUFBSSxBQUFLLFFBQUcsQUFBUyxVQUFDLEFBQUssQUFBRSxBQUFDO0FBQzlCLFFBQUksQUFBOEIsQUFBQztBQUVuQyxBQUFFLEFBQUMsUUFBQyxBQUFVLEFBQUMsWUFBQyxBQUFDO0FBQ2YsQUFBTyxrQkFBRyxBQUFFLEdBQUMsQUFBUSxBQUFFLFdBQUMsQUFBNEIsNkJBQUMsQUFBSyxBQUFDLEFBQUMsQUFDOUQ7QUFBQyxBQUFDLEFBQUksV0FBQyxBQUFDO0FBQ04sQUFBTyxrQkFBRyxBQUFFLEdBQUMsQUFBUSxBQUFFLFdBQUMsQUFBNEIsNkJBQUMsQUFBSyxBQUFDLEFBQUMsQUFDOUQ7QUFBQztBQUVELEFBQUUsQUFBQyxRQUFDLENBQUMsQUFBTyxRQUFDLEFBQVMsQUFBQyxBQUFDLFlBQUMsQUFBQztBQUN4QixBQUFFLFdBQUMsQUFBVSxXQUFDLElBQUksQUFBMEIsMkJBQUMsQUFBUyxXQUFFLEFBQU8sQUFBQyxBQUFDLEFBQUMsQUFDcEU7QUFBQztBQUVELEFBQUUsT0FBQyxBQUFTLFVBQUMsQUFBUSxTQUFDLEFBQUUsSUFBRSxBQUFJLEFBQUMsQUFBQyxBQUNoQyxBQUFpQixBQUFDLEFBQUUsQUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQUUsQUFBZ0IsQUFBQyxBQUFDLEFBQ3BEO0FBQUMsQUFBQyxBQUFDO0FBRUgsTUFBaUMsbUNBQVEsQUFBYztBQUdyRCxnQkFBb0IsQUFBcUMsV0FBVSxBQUE4QjtBQUMvRixBQUFLLEFBQUUsQUFBQztBQURVLGFBQVMsWUFBVCxBQUFTLEFBQTRCO0FBQVUsYUFBTyxVQUFQLEFBQU8sQUFBdUI7QUFFL0YsQUFBSSxhQUFDLEFBQUcsTUFBRyxBQUFTLFVBQUMsQUFBRyxBQUFDLEFBQzNCO0FBQUM7QUFFRCxBQUFRLGFBQUMsQUFBYztBQUNyQixZQUFJLEVBQUUsQUFBTyxTQUFFLEFBQVMsQUFBRSxjQUFHLEFBQUksQUFBQztBQUNsQyxBQUFPLGdCQUFDLEFBQU0sT0FBQyxBQUFFLEdBQUMsQUFBRyxLQUFFLEFBQVMsVUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQzVDO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGlzQ29uc3QsIFJlZmVyZW5jZSwgVGFnLCBWZXJzaW9uZWRSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgT3AsIFJlZ2lzdGVyIH0gZnJvbSAnQGdsaW1tZXIvdm0nO1xuaW1wb3J0IHsgY2hlY2ssIGV4cGVjdFN0YWNrQ2hhbmdlIH0gZnJvbSAnQGdsaW1tZXIvZGVidWcnO1xuaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmltcG9ydCB7IER5bmFtaWNDb250ZW50V3JhcHBlciB9IGZyb20gJy4uLy4uL3ZtL2NvbnRlbnQvZHluYW1pYyc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUywgVXBkYXRpbmdPcGNvZGUgfSBmcm9tICcuLi8uLi9vcGNvZGVzJztcbmltcG9ydCB7IFVwZGF0aW5nVk0gfSBmcm9tICcuLi8uLi92bSc7XG5pbXBvcnQgeyBDb25kaXRpb25hbFJlZmVyZW5jZSB9IGZyb20gJy4uLy4uL3JlZmVyZW5jZXMnO1xuaW1wb3J0IHsgaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiB9IGZyb20gJy4uLy4uL2NvbXBvbmVudC9jdXJyaWVkLWNvbXBvbmVudCc7XG5pbXBvcnQgeyBDaGVja1BhdGhSZWZlcmVuY2UgfSBmcm9tICcuLy1kZWJ1Zy1zdHJpcCc7XG5cbmV4cG9ydCBjbGFzcyBJc0N1cnJpZWRDb21wb25lbnREZWZpbml0aW9uUmVmZXJlbmNlIGV4dGVuZHMgQ29uZGl0aW9uYWxSZWZlcmVuY2Uge1xuICBzdGF0aWMgY3JlYXRlKGlubmVyOiBSZWZlcmVuY2U8T3BhcXVlPik6IElzQ3VycmllZENvbXBvbmVudERlZmluaXRpb25SZWZlcmVuY2Uge1xuICAgIHJldHVybiBuZXcgSXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvblJlZmVyZW5jZShpbm5lcik7XG4gIH1cblxuICB0b0Jvb2wodmFsdWU6IE9wYXF1ZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBpc0N1cnJpZWRDb21wb25lbnREZWZpbml0aW9uKHZhbHVlKTtcbiAgfVxufVxuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRHluYW1pY0NvbnRlbnQsICh2bSkgPT4ge1xuICBsZXQgcmVmZXJlbmNlID0gY2hlY2sodm0uc3RhY2sucG9wKCksIENoZWNrUGF0aFJlZmVyZW5jZSk7XG4gIGxldCBpc1RydXN0aW5nID0gdm0uZmV0Y2hWYWx1ZShSZWdpc3Rlci50MCk7XG5cbiAgbGV0IHZhbHVlID0gcmVmZXJlbmNlLnZhbHVlKCk7XG4gIGxldCBjb250ZW50OiBEeW5hbWljQ29udGVudFdyYXBwZXI7XG5cbiAgaWYgKGlzVHJ1c3RpbmcpIHtcbiAgICBjb250ZW50ID0gdm0uZWxlbWVudHMoKS5hcHBlbmRUcnVzdGluZ0R5bmFtaWNDb250ZW50KHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBjb250ZW50ID0gdm0uZWxlbWVudHMoKS5hcHBlbmRDYXV0aW91c0R5bmFtaWNDb250ZW50KHZhbHVlKTtcbiAgfVxuXG4gIGlmICghaXNDb25zdChyZWZlcmVuY2UpKSB7XG4gICAgdm0udXBkYXRlV2l0aChuZXcgVXBkYXRlRHluYW1pY0NvbnRlbnRPcGNvZGUocmVmZXJlbmNlLCBjb250ZW50KSk7XG4gIH1cblxuICB2bS5sb2FkVmFsdWUoUmVnaXN0ZXIudDAsIG51bGwpO1xuICBleHBlY3RTdGFja0NoYW5nZSh2bS5zdGFjaywgLTEsICdEeW5hbWljQ29udGVudCcpO1xufSk7XG5cbmNsYXNzIFVwZGF0ZUR5bmFtaWNDb250ZW50T3Bjb2RlIGV4dGVuZHMgVXBkYXRpbmdPcGNvZGUge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByZWZlcmVuY2U6IFZlcnNpb25lZFJlZmVyZW5jZTxPcGFxdWU+LCBwcml2YXRlIGNvbnRlbnQ6IER5bmFtaWNDb250ZW50V3JhcHBlcikge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50YWcgPSByZWZlcmVuY2UudGFnO1xuICB9XG5cbiAgZXZhbHVhdGUodm06IFVwZGF0aW5nVk0pOiB2b2lkIHtcbiAgICBsZXQgeyBjb250ZW50LCByZWZlcmVuY2UgfSA9IHRoaXM7XG4gICAgY29udGVudC51cGRhdGUodm0uZW52LCByZWZlcmVuY2UudmFsdWUoKSk7XG4gIH1cbn1cbiJdfQ==","import { CONSTANT_TAG, isConst, isModified, ReferenceCache } from '@glimmer/reference';\nimport { initializeGuid, assert } from '@glimmer/util';\n\nimport { stackAssert } from './assert';\nimport { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';\nimport { PrimitiveReference } from '../../references';\n\nAPPEND_OPCODES.add(18 /* ChildScope */, vm => vm.pushChildScope());\nAPPEND_OPCODES.add(19 /* PopScope */, vm => vm.popScope());\nAPPEND_OPCODES.add(36 /* PushDynamicScope */, vm => vm.pushDynamicScope());\nAPPEND_OPCODES.add(37 /* PopDynamicScope */, vm => vm.popDynamicScope());\nAPPEND_OPCODES.add(10 /* Constant */, (vm, { op1: other }) => {\n    vm.stack.push(vm.constants.getOther(other));\n});\nAPPEND_OPCODES.add(11 /* Primitive */, (vm, { op1: primitive }) => {\n    let stack = vm.stack;\n    let flag = primitive & 7; // 111\n    let value = primitive >> 3;\n    switch (flag) {\n        case 0 /* NUMBER */:\n            stack.push(value);\n            break;\n        case 1 /* FLOAT */:\n            stack.push(vm.constants.getFloat(value));\n            break;\n        case 2 /* STRING */:\n            stack.push(vm.constants.getString(value));\n            break;\n        case 3 /* BOOLEAN_OR_VOID */:\n            stack.pushEncodedImmediate(primitive);\n            break;\n        case 4 /* NEGATIVE */:\n            stack.push(vm.constants.getNegative(value));\n            break;\n    }\n});\nAPPEND_OPCODES.add(12 /* PrimitiveReference */, vm => {\n    let stack = vm.stack;\n    stack.push(PrimitiveReference.create(stack.pop()));\n});\nAPPEND_OPCODES.add(13 /* Dup */, (vm, { op1: register, op2: offset }) => {\n    let position = vm.fetchValue(register) - offset;\n    vm.stack.dup(position);\n});\nAPPEND_OPCODES.add(14 /* Pop */, (vm, { op1: count }) => {\n    vm.stack.pop(count);\n});\nAPPEND_OPCODES.add(15 /* Load */, (vm, { op1: register }) => {\n    vm.load(register);\n});\nAPPEND_OPCODES.add(16 /* Fetch */, (vm, { op1: register }) => {\n    vm.fetch(register);\n});\nAPPEND_OPCODES.add(35 /* BindDynamicScope */, (vm, { op1: _names }) => {\n    let names = vm.constants.getArray(_names);\n    vm.bindDynamicScope(names);\n});\nAPPEND_OPCODES.add(49 /* Enter */, (vm, { op1: args }) => {\n    vm.enter(args);\n});\nAPPEND_OPCODES.add(50 /* Exit */, vm => {\n    vm.exit();\n});\nAPPEND_OPCODES.add(40 /* PushSymbolTable */, (vm, { op1: _table }) => {\n    let stack = vm.stack;\n    stack.push(vm.constants.getSerializable(_table));\n});\nAPPEND_OPCODES.add(39 /* PushBlockScope */, vm => {\n    let stack = vm.stack;\n    stack.push(vm.scope());\n});\nAPPEND_OPCODES.add(38 /* CompileBlock */, vm => {\n    let stack = vm.stack;\n    let block = stack.pop();\n    if (block) {\n        stack.pushSmi(block.compile());\n    } else {\n        stack.pushNull();\n    }\n});\nAPPEND_OPCODES.add(43 /* InvokeYield */, vm => {\n    let { stack } = vm;\n    let handle = stack.pop();\n    let scope = stack.pop(); // FIXME(mmun): shouldn't need to cast this\n    let table = stack.pop();\n    (false && assert(table === null || table && typeof table === 'object' && Array.isArray(table.parameters), stackAssert('Option<BlockSymbolTable>', table)));\n\n    let args = stack.pop();\n    if (table === null) {\n        // To balance the pop{Frame,Scope}\n        vm.pushFrame();\n        vm.pushScope(scope); // Could be null but it doesnt matter as it is immediatelly popped.\n        return;\n    }\n    let invokingScope = scope;\n    // If necessary, create a child scope\n    {\n        let locals = table.parameters;\n        let localsCount = locals.length;\n        if (localsCount > 0) {\n            invokingScope = invokingScope.child();\n            for (let i = 0; i < localsCount; i++) {\n                invokingScope.bindSymbol(locals[i], args.at(i));\n            }\n        }\n    }\n    vm.pushFrame();\n    vm.pushScope(invokingScope);\n    vm.call(handle);\n});\nAPPEND_OPCODES.add(45 /* JumpIf */, (vm, { op1: target }) => {\n    let reference = vm.stack.pop();\n    if (isConst(reference)) {\n        if (reference.value()) {\n            vm.goto(target);\n        }\n    } else {\n        let cache = new ReferenceCache(reference);\n        if (cache.peek()) {\n            vm.goto(target);\n        }\n        vm.updateWith(new Assert(cache));\n    }\n});\nAPPEND_OPCODES.add(46 /* JumpUnless */, (vm, { op1: target }) => {\n    let reference = vm.stack.pop();\n    if (isConst(reference)) {\n        if (!reference.value()) {\n            vm.goto(target);\n        }\n    } else {\n        let cache = new ReferenceCache(reference);\n        if (!cache.peek()) {\n            vm.goto(target);\n        }\n        vm.updateWith(new Assert(cache));\n    }\n});\nAPPEND_OPCODES.add(51 /* ToBoolean */, vm => {\n    let { env, stack } = vm;\n    stack.push(env.toConditionalReference(stack.pop()));\n});\nexport class Assert extends UpdatingOpcode {\n    constructor(cache) {\n        super();\n        this.type = 'assert';\n        this.tag = cache.tag;\n        this.cache = cache;\n    }\n    evaluate(vm) {\n        let { cache } = this;\n        if (isModified(cache.revalidate())) {\n            vm.throw();\n        }\n    }\n}\nexport class JumpIfNotModifiedOpcode extends UpdatingOpcode {\n    constructor(tag, target) {\n        super();\n        this.target = target;\n        this.type = 'jump-if-not-modified';\n        this.tag = tag;\n        this.lastRevision = tag.value();\n    }\n    evaluate(vm) {\n        let { tag, target, lastRevision } = this;\n        if (!vm.alwaysRevalidate && tag.validate(lastRevision)) {\n            vm.goto(target);\n        }\n    }\n    didModify() {\n        this.lastRevision = this.tag.value();\n    }\n}\nexport class DidModifyOpcode extends UpdatingOpcode {\n    constructor(target) {\n        super();\n        this.target = target;\n        this.type = 'did-modify';\n        this.tag = CONSTANT_TAG;\n    }\n    evaluate() {\n        this.target.didModify();\n    }\n}\nexport class LabelOpcode {\n    constructor(label) {\n        this.tag = CONSTANT_TAG;\n        this.type = 'label';\n        this.label = null;\n        this.prev = null;\n        this.next = null;\n        initializeGuid(this);\n        this.label = label;\n    }\n    evaluate() {}\n    inspect() {\n        return `${this.label} [${this._guid}]`;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { ReferenceCache, isConst, isConstTag } from '@glimmer/reference';\n\nimport { Register } from '@glimmer/vm';\nimport { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';\nimport { Assert } from './vm';\n\nAPPEND_OPCODES.add(22 /* Text */, (vm, { op1: text }) => {\n    vm.elements().appendText(vm.constants.getString(text));\n});\nAPPEND_OPCODES.add(23 /* Comment */, (vm, { op1: text }) => {\n    vm.elements().appendComment(vm.constants.getString(text));\n});\nAPPEND_OPCODES.add(25 /* OpenElement */, (vm, { op1: tag }) => {\n    vm.elements().openElement(vm.constants.getString(tag));\n});\nAPPEND_OPCODES.add(26 /* OpenDynamicElement */, vm => {\n    let tagName = vm.stack.pop().value();\n    vm.elements().openElement(tagName);\n});\nAPPEND_OPCODES.add(33 /* PushRemoteElement */, vm => {\n    let elementRef = vm.stack.pop();\n    let nextSiblingRef = vm.stack.pop();\n    let guidRef = vm.stack.pop();\n    let element;\n    let nextSibling;\n    let guid = guidRef.value();\n    if (isConst(elementRef)) {\n        element = elementRef.value();\n    } else {\n        let cache = new ReferenceCache(elementRef);\n        element = cache.peek();\n        vm.updateWith(new Assert(cache));\n    }\n    if (isConst(nextSiblingRef)) {\n        nextSibling = nextSiblingRef.value();\n    } else {\n        let cache = new ReferenceCache(nextSiblingRef);\n        nextSibling = cache.peek();\n        vm.updateWith(new Assert(cache));\n    }\n    vm.elements().pushRemoteElement(element, guid, nextSibling);\n});\nAPPEND_OPCODES.add(34 /* PopRemoteElement */, vm => {\n    vm.elements().popRemoteElement();\n});\nAPPEND_OPCODES.add(30 /* FlushElement */, vm => {\n    let operations = vm.fetchValue(Register.t0);\n    if (operations) {\n        operations.flush(vm);\n        vm.loadValue(Register.t0, null);\n    }\n    vm.elements().flushElement();\n});\nAPPEND_OPCODES.add(31 /* CloseElement */, vm => {\n    vm.elements().closeElement();\n});\nAPPEND_OPCODES.add(32 /* Modifier */, (vm, { op1: handle }) => {\n    let manager = vm.constants.resolveHandle(handle);\n    let stack = vm.stack;\n    let args = stack.pop();\n    let { constructing: element, updateOperations } = vm.elements();\n    let dynamicScope = vm.dynamicScope();\n    let modifier = manager.create(element, args, dynamicScope, updateOperations);\n    vm.env.scheduleInstallModifier(modifier, manager);\n    let destructor = manager.getDestructor(modifier);\n    if (destructor) {\n        vm.newDestroyable(destructor);\n    }\n    let tag = manager.getTag(modifier);\n    if (!isConstTag(tag)) {\n        vm.updateWith(new UpdateModifierOpcode(tag, manager, modifier));\n    }\n});\nexport class UpdateModifierOpcode extends UpdatingOpcode {\n    constructor(tag, manager, modifier) {\n        super();\n        this.tag = tag;\n        this.manager = manager;\n        this.modifier = modifier;\n        this.type = 'update-modifier';\n        this.lastUpdated = tag.value();\n    }\n    evaluate(vm) {\n        let { manager, modifier, tag, lastUpdated } = this;\n        if (!tag.validate(lastUpdated)) {\n            vm.env.scheduleUpdateModifier(modifier, manager);\n            this.lastUpdated = tag.value();\n        }\n    }\n}\nAPPEND_OPCODES.add(27 /* StaticAttr */, (vm, { op1: _name, op2: _value, op3: _namespace }) => {\n    let name = vm.constants.getString(_name);\n    let value = vm.constants.getString(_value);\n    let namespace = _namespace ? vm.constants.getString(_namespace) : null;\n    vm.elements().setStaticAttribute(name, value, namespace);\n});\nAPPEND_OPCODES.add(28 /* DynamicAttr */, (vm, { op1: _name, op2: trusting, op3: _namespace }) => {\n    let name = vm.constants.getString(_name);\n    let reference = vm.stack.pop();\n    let value = reference.value();\n    let namespace = _namespace ? vm.constants.getString(_namespace) : null;\n    let attribute = vm.elements().setDynamicAttribute(name, value, !!trusting, namespace);\n    if (!isConst(reference)) {\n        vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));\n    }\n});\nexport class UpdateDynamicAttributeOpcode extends UpdatingOpcode {\n    constructor(reference, attribute) {\n        super();\n        this.reference = reference;\n        this.attribute = attribute;\n        this.type = 'patch-element';\n        this.tag = reference.tag;\n        this.lastRevision = this.tag.value();\n    }\n    evaluate(vm) {\n        let { attribute, reference, tag } = this;\n        if (!tag.validate(this.lastRevision)) {\n            this.lastRevision = tag.value();\n            attribute.update(reference.value(), vm.env);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { assert } from '@glimmer/util';\nexport function resolveComponent(resolver, name, meta) {\n    let definition = resolver.lookupComponent(name, meta);\n    (false && assert(definition, `Could not find a component named \"${name}\"`));\n\n    return definition;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBvbmVudC9yZXNvbHZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEFBQU8sU0FBVSxBQUFNLEFBQUUsY0FBTSxBQUFlLEFBQUM7QUFJL0MsQUFBTSxpQ0FBeUMsQUFBdUMsVUFBRSxBQUFZLE1BQUUsQUFBa0I7QUFDdEgsUUFBSSxBQUFVLGFBQUcsQUFBUSxTQUFDLEFBQWUsZ0JBQUMsQUFBSSxNQUFFLEFBQUksQUFBQyxBQUFDO2NBQ3RELEFBQU0sT0FBQyxBQUFVLEFBQUUsaURBQXFDLEFBQUksSUFBRyxBQUFDLEFBQUM7O0FBQ2pFLEFBQU0sV0FBQyxBQUFpQyxBQUFDLEFBQzNDO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSdW50aW1lUmVzb2x2ZXIgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcbmltcG9ydCB7IE9wdGlvbiwgYXNzZXJ0IH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmltcG9ydCB7IENvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZUNvbXBvbmVudDxUZW1wbGF0ZU1ldGE+KHJlc29sdmVyOiBSdW50aW1lUmVzb2x2ZXI8VGVtcGxhdGVNZXRhPiwgbmFtZTogc3RyaW5nLCBtZXRhOiBUZW1wbGF0ZU1ldGEpOiBPcHRpb248Q29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICBsZXQgZGVmaW5pdGlvbiA9IHJlc29sdmVyLmxvb2t1cENvbXBvbmVudChuYW1lLCBtZXRhKTtcbiAgYXNzZXJ0KGRlZmluaXRpb24sIGBDb3VsZCBub3QgZmluZCBhIGNvbXBvbmVudCBuYW1lZCBcIiR7bmFtZX1cImApO1xuICByZXR1cm4gZGVmaW5pdGlvbiBhcyBDb21wb25lbnREZWZpbml0aW9uO1xufVxuIl19","import { CurriedComponentDefinition, isCurriedComponentDefinition } from '../component/curried-component';\nimport { resolveComponent } from '../component/resolve';\nimport { UNDEFINED_REFERENCE } from '../references';\nexport default class CurryComponentReference {\n    constructor(inner, resolver, meta, args) {\n        this.inner = inner;\n        this.resolver = resolver;\n        this.meta = meta;\n        this.args = args;\n        this.tag = inner.tag;\n        this.lastValue = null;\n        this.lastDefinition = null;\n    }\n    value() {\n        let { inner, lastValue } = this;\n        let value = inner.value();\n        if (value === lastValue) {\n            return this.lastDefinition;\n        }\n        let definition = null;\n        if (isCurriedComponentDefinition(value)) {\n            definition = value;\n        } else if (typeof value === 'string' && value) {\n            let { resolver, meta } = this;\n            definition = resolveComponent(resolver, value, meta);\n        }\n        definition = this.curry(definition);\n        this.lastValue = value;\n        this.lastDefinition = definition;\n        return definition;\n    }\n    get() {\n        return UNDEFINED_REFERENCE;\n    }\n    curry(definition) {\n        let { args } = this;\n        if (!args && isCurriedComponentDefinition(definition)) {\n            return definition;\n        } else if (!definition) {\n            return null;\n        } else {\n            return new CurriedComponentDefinition(definition, args);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VycnktY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvcmVmZXJlbmNlcy9jdXJyeS1jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBT0EsQUFBTyxTQUFFLEFBQTBCLDRCQUFFLEFBQTRCLEFBQUUsb0NBQU0sQUFBZ0MsQUFBQztBQUMxRyxBQUFPLFNBQUUsQUFBZ0IsQUFBRSx3QkFBTSxBQUFzQixBQUFDO0FBQ3hELEFBQU8sU0FBRSxBQUFtQixBQUFFLDJCQUFNLEFBQWUsQUFBQztBQUVwRCxBQUFNLEFBQUMsQUFBTztBQUtaLGdCQUNVLEFBQXdCLE9BQ3hCLEFBQXVDLFVBQ3ZDLEFBQWtCLE1BQ2xCLEFBQWdDO0FBSGhDLGFBQUssUUFBTCxBQUFLLEFBQW1CO0FBQ3hCLGFBQVEsV0FBUixBQUFRLEFBQStCO0FBQ3ZDLGFBQUksT0FBSixBQUFJLEFBQWM7QUFDbEIsYUFBSSxPQUFKLEFBQUksQUFBNEI7QUFFeEMsQUFBSSxhQUFDLEFBQUcsTUFBRyxBQUFLLE1BQUMsQUFBRyxBQUFDO0FBQ3JCLEFBQUksYUFBQyxBQUFTLFlBQUcsQUFBSSxBQUFDO0FBQ3RCLEFBQUksYUFBQyxBQUFjLGlCQUFHLEFBQUksQUFBQyxBQUM3QjtBQUFDO0FBRUQsQUFBSztBQUNILFlBQUksRUFBRSxBQUFLLE9BQUUsQUFBUyxBQUFFLGNBQUcsQUFBSSxBQUFDO0FBRWhDLFlBQUksQUFBSyxRQUFHLEFBQUssTUFBQyxBQUFLLEFBQUUsQUFBQztBQUUxQixBQUFFLEFBQUMsWUFBQyxBQUFLLFVBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUN4QixBQUFNLG1CQUFDLEFBQUksS0FBQyxBQUFjLEFBQUMsQUFDN0I7QUFBQztBQUVELFlBQUksQUFBVSxhQUE2RCxBQUFJLEFBQUM7QUFFaEYsQUFBRSxBQUFDLFlBQUMsQUFBNEIsNkJBQUMsQUFBSyxBQUFDLEFBQUMsUUFBQyxBQUFDO0FBQ3hDLEFBQVUseUJBQUcsQUFBSyxBQUFDLEFBQ3JCO0FBQUMsQUFBQyxBQUFJLGVBQUMsQUFBRSxBQUFDLElBQUMsT0FBTyxBQUFLLFVBQUssQUFBUSxZQUFJLEFBQUssQUFBQyxPQUFDLEFBQUM7QUFDOUMsZ0JBQUksRUFBRSxBQUFRLFVBQUUsQUFBSSxBQUFFLFNBQUcsQUFBSSxBQUFDO0FBQzlCLEFBQVUseUJBQUcsQUFBZ0IsaUJBQUMsQUFBUSxVQUFFLEFBQUssT0FBRSxBQUFJLEFBQUMsQUFBQyxBQUN2RDtBQUFDO0FBRUQsQUFBVSxxQkFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQVUsQUFBQyxBQUFDO0FBRXBDLEFBQUksYUFBQyxBQUFTLFlBQUcsQUFBSyxBQUFDO0FBQ3ZCLEFBQUksYUFBQyxBQUFjLGlCQUFHLEFBQVUsQUFBQztBQUVqQyxBQUFNLGVBQUMsQUFBVSxBQUFDLEFBQ3BCO0FBQUM7QUFFRCxBQUFHO0FBQ0QsQUFBTSxlQUFDLEFBQW1CLEFBQUMsQUFDN0I7QUFBQztBQUVPLEFBQUssVUFBQyxBQUFvRTtBQUNoRixZQUFJLEVBQUUsQUFBSSxBQUFFLFNBQUcsQUFBSSxBQUFDO0FBRXBCLEFBQUUsQUFBQyxZQUFDLENBQUMsQUFBSSxRQUFJLEFBQTRCLDZCQUFDLEFBQVUsQUFBQyxBQUFDLGFBQUMsQUFBQztBQUN0RCxBQUFNLG1CQUFDLEFBQVUsQUFBQyxBQUNwQjtBQUFDLEFBQUMsQUFBSSxtQkFBSyxDQUFDLEFBQVUsQUFBQyxZQUFDLEFBQUM7QUFDdkIsQUFBTSxtQkFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxNQUVILEFBQUM7QUFDTixBQUFNLG1CQUFDLElBQUksQUFBMEIsMkJBQUMsQUFBVSxZQUFFLEFBQUksQUFBQyxBQUFDLEFBQzFEO0FBQUMsQUFDSDtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFJlZmVyZW5jZSwgUGF0aFJlZmVyZW5jZSwgVGFnIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE9wdGlvbiwgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBSdW50aW1lUmVzb2x2ZXIgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuaW1wb3J0IHsgSUNhcHR1cmVkQXJndW1lbnRzIH0gZnJvbSAnLi4vdm0vYXJndW1lbnRzJztcbmltcG9ydCB7IENvbXBvbmVudERlZmluaXRpb24gfSBmcm9tICcuLi9jb21wb25lbnQvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiwgaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbiB9IGZyb20gJy4uL2NvbXBvbmVudC9jdXJyaWVkLWNvbXBvbmVudCc7XG5pbXBvcnQgeyByZXNvbHZlQ29tcG9uZW50IH0gZnJvbSAnLi4vY29tcG9uZW50L3Jlc29sdmUnO1xuaW1wb3J0IHsgVU5ERUZJTkVEX1JFRkVSRU5DRSB9IGZyb20gJy4uL3JlZmVyZW5jZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDdXJyeUNvbXBvbmVudFJlZmVyZW5jZTxUZW1wbGF0ZU1ldGE+IGltcGxlbWVudHMgUGF0aFJlZmVyZW5jZTxPcHRpb248Q3VycmllZENvbXBvbmVudERlZmluaXRpb24+PiB7XG4gIHB1YmxpYyB0YWc6IFRhZztcbiAgcHJpdmF0ZSBsYXN0VmFsdWU6IE9wYXF1ZTtcbiAgcHJpdmF0ZSBsYXN0RGVmaW5pdGlvbjogT3B0aW9uPEN1cnJpZWRDb21wb25lbnREZWZpbml0aW9uPjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGlubmVyOiBSZWZlcmVuY2U8T3BhcXVlPixcbiAgICBwcml2YXRlIHJlc29sdmVyOiBSdW50aW1lUmVzb2x2ZXI8VGVtcGxhdGVNZXRhPixcbiAgICBwcml2YXRlIG1ldGE6IFRlbXBsYXRlTWV0YSxcbiAgICBwcml2YXRlIGFyZ3M6IE9wdGlvbjxJQ2FwdHVyZWRBcmd1bWVudHM+XG4gICkge1xuICAgIHRoaXMudGFnID0gaW5uZXIudGFnO1xuICAgIHRoaXMubGFzdFZhbHVlID0gbnVsbDtcbiAgICB0aGlzLmxhc3REZWZpbml0aW9uID0gbnVsbDtcbiAgfVxuXG4gIHZhbHVlKCk6IE9wdGlvbjxDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICAgIGxldCB7IGlubmVyLCBsYXN0VmFsdWUgfSA9IHRoaXM7XG5cbiAgICBsZXQgdmFsdWUgPSBpbm5lci52YWx1ZSgpO1xuXG4gICAgaWYgKHZhbHVlID09PSBsYXN0VmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLmxhc3REZWZpbml0aW9uO1xuICAgIH1cblxuICAgIGxldCBkZWZpbml0aW9uOiBPcHRpb248Q3VycmllZENvbXBvbmVudERlZmluaXRpb24gfCBDb21wb25lbnREZWZpbml0aW9uPiA9IG51bGw7XG5cbiAgICBpZiAoaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbih2YWx1ZSkpIHtcbiAgICAgIGRlZmluaXRpb24gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdmFsdWUpIHtcbiAgICAgIGxldCB7IHJlc29sdmVyLCBtZXRhIH0gPSB0aGlzO1xuICAgICAgZGVmaW5pdGlvbiA9IHJlc29sdmVDb21wb25lbnQocmVzb2x2ZXIsIHZhbHVlLCBtZXRhKTtcbiAgICB9XG5cbiAgICBkZWZpbml0aW9uID0gdGhpcy5jdXJyeShkZWZpbml0aW9uKTtcblxuICAgIHRoaXMubGFzdFZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5sYXN0RGVmaW5pdGlvbiA9IGRlZmluaXRpb247XG5cbiAgICByZXR1cm4gZGVmaW5pdGlvbjtcbiAgfVxuXG4gIGdldCgpOiBQYXRoUmVmZXJlbmNlPE9wYXF1ZT4ge1xuICAgIHJldHVybiBVTkRFRklORURfUkVGRVJFTkNFO1xuICB9XG5cbiAgcHJpdmF0ZSBjdXJyeShkZWZpbml0aW9uOiBPcHRpb248Q3VycmllZENvbXBvbmVudERlZmluaXRpb24gfCBDb21wb25lbnREZWZpbml0aW9uPik6IE9wdGlvbjxDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbj4ge1xuICAgIGxldCB7IGFyZ3MgfSA9IHRoaXM7XG5cbiAgICBpZiAoIWFyZ3MgJiYgaXNDdXJyaWVkQ29tcG9uZW50RGVmaW5pdGlvbihkZWZpbml0aW9uKSkge1xuICAgICAgcmV0dXJuIGRlZmluaXRpb247XG4gICAgfSBlbHNlIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgQ3VycmllZENvbXBvbmVudERlZmluaXRpb24oZGVmaW5pdGlvbiwgYXJncyk7XG4gICAgfVxuICB9XG59XG4iXX0=","export function normalizeStringValue(value) {\n    if (isEmpty(value)) {\n        return '';\n    }\n    return String(value);\n}\nexport function normalizeTrustedValue(value) {\n    if (isEmpty(value)) {\n        return '';\n    }\n    if (isString(value)) {\n        return value;\n    }\n    if (isSafeString(value)) {\n        return value.toHTML();\n    }\n    if (isNode(value)) {\n        return value;\n    }\n    return String(value);\n}\nexport function isEmpty(value) {\n    return value === null || value === undefined || typeof value.toString !== 'function';\n}\nexport function isSafeString(value) {\n    return typeof value === 'object' && value !== null && typeof value.toHTML === 'function';\n}\nexport function isNode(value) {\n    return typeof value === 'object' && value !== null && typeof value.nodeType === 'number';\n}\nexport function isFragment(value) {\n    return isNode(value) && value.nodeType === 11;\n}\nexport function isString(value) {\n    return typeof value === 'string';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9ybWFsaXplLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvZG9tL25vcm1hbGl6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFVQSxBQUFNLHFDQUErQixBQUFhO0FBQ2hELEFBQUUsQUFBQyxRQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQUM7QUFDbkIsQUFBTSxlQUFDLEFBQUUsQUFBQyxBQUNaO0FBQUM7QUFDRCxBQUFNLFdBQUMsQUFBTSxPQUFDLEFBQUssQUFBQyxBQUFDLEFBQ3ZCO0FBQUM7QUFFRCxBQUFNLHNDQUFnQyxBQUFhO0FBQ2pELEFBQUUsQUFBQyxRQUFDLEFBQU8sUUFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQUM7QUFDbkIsQUFBTSxlQUFDLEFBQUUsQUFBQyxBQUNaO0FBQUM7QUFDRCxBQUFFLEFBQUMsUUFBQyxBQUFRLFNBQUMsQUFBSyxBQUFDLEFBQUMsUUFBQyxBQUFDO0FBQ3BCLEFBQU0sZUFBQyxBQUFLLEFBQUMsQUFDZjtBQUFDO0FBQ0QsQUFBRSxBQUFDLFFBQUMsQUFBWSxhQUFDLEFBQUssQUFBQyxBQUFDLFFBQUMsQUFBQztBQUN4QixBQUFNLGVBQUMsQUFBSyxNQUFDLEFBQU0sQUFBRSxBQUFDLEFBQ3hCO0FBQUM7QUFDRCxBQUFFLEFBQUMsUUFBQyxBQUFNLE9BQUMsQUFBSyxBQUFDLEFBQUMsUUFBQyxBQUFDO0FBQ2xCLEFBQU0sZUFBQyxBQUFLLEFBQUMsQUFDZjtBQUFDO0FBQ0QsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUMsQUFBQyxBQUN2QjtBQUFDO0FBRUQsQUFBTSx3QkFBa0IsQUFBYTtBQUNuQyxBQUFNLFdBQUMsQUFBSyxVQUFLLEFBQUksUUFBSSxBQUFLLFVBQUssQUFBUyxhQUFJLE9BQU8sQUFBSyxNQUFDLEFBQVEsYUFBSyxBQUFVLEFBQUMsQUFDdkY7QUFBQztBQUVELEFBQU0sNkJBQXVCLEFBQWE7QUFDeEMsQUFBTSxXQUFDLE9BQU8sQUFBSyxVQUFLLEFBQVEsWUFBSSxBQUFLLFVBQUssQUFBSSxRQUFJLE9BQVEsQUFBYSxNQUFDLEFBQU0sV0FBSyxBQUFVLEFBQUMsQUFDcEc7QUFBQztBQUVELEFBQU0sdUJBQWlCLEFBQWE7QUFDbEMsQUFBTSxXQUFDLE9BQU8sQUFBSyxVQUFLLEFBQVEsWUFBSSxBQUFLLFVBQUssQUFBSSxRQUFJLE9BQVEsQUFBYSxNQUFDLEFBQVEsYUFBSyxBQUFRLEFBQUMsQUFDcEc7QUFBQztBQUVELEFBQU0sMkJBQXFCLEFBQWE7QUFDdEMsQUFBTSxXQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUMsVUFBSSxBQUFLLE1BQUMsQUFBUSxhQUFLLEFBQUUsQUFBQyxBQUNoRDtBQUFDO0FBRUQsQUFBTSx5QkFBbUIsQUFBYTtBQUNwQyxBQUFNLFdBQUMsT0FBTyxBQUFLLFVBQUssQUFBUSxBQUFDLEFBQ25DO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIFNpbXBsZSB9IGZyb20gXCJAZ2xpbW1lci9pbnRlcmZhY2VzXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2FmZVN0cmluZyB7XG4gIHRvSFRNTCgpOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEluc2VydGlvbiA9IENhdXRpb3VzSW5zZXJ0aW9uIHwgVHJ1c3RpbmdJbnNlcnRpb247XG5leHBvcnQgdHlwZSBDYXV0aW91c0luc2VydGlvbiA9IHN0cmluZyB8IFNhZmVTdHJpbmcgfCBTaW1wbGUuTm9kZTtcbmV4cG9ydCB0eXBlIFRydXN0aW5nSW5zZXJ0aW9uID0gc3RyaW5nIHwgU2ltcGxlLk5vZGU7XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVTdHJpbmdWYWx1ZSh2YWx1ZTogT3BhcXVlKTogc3RyaW5nIHtcbiAgaWYgKGlzRW1wdHkodmFsdWUpKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplVHJ1c3RlZFZhbHVlKHZhbHVlOiBPcGFxdWUpOiBUcnVzdGluZ0luc2VydGlvbiB7XG4gIGlmIChpc0VtcHR5KHZhbHVlKSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChpc1NhZmVTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvSFRNTCgpO1xuICB9XG4gIGlmIChpc05vZGUodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBTdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogT3BhcXVlKTogYm9vbGVhbiB7XG4gIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU2FmZVN0cmluZyh2YWx1ZTogT3BhcXVlKTogdmFsdWUgaXMgU2FmZVN0cmluZyB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiAodmFsdWUgYXMgYW55KS50b0hUTUwgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc05vZGUodmFsdWU6IE9wYXF1ZSk6IHZhbHVlIGlzIFNpbXBsZS5Ob2RlIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mICh2YWx1ZSBhcyBhbnkpLm5vZGVUeXBlID09PSAnbnVtYmVyJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRnJhZ21lbnQodmFsdWU6IE9wYXF1ZSk6IHZhbHVlIGlzIFNpbXBsZS5Eb2N1bWVudEZyYWdtZW50IHtcbiAgcmV0dXJuIGlzTm9kZSh2YWx1ZSkgJiYgdmFsdWUubm9kZVR5cGUgPT09IDExO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IE9wYXF1ZSk6IHZhbHVlIGlzIHN0cmluZyB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xufVxuIl19","import { combineTagged } from '@glimmer/reference';\nimport { normalizeStringValue } from '../dom/normalize';\nexport default class ClassListReference {\n    constructor(list) {\n        this.list = list;\n        this.tag = combineTagged(list);\n        this.list = list;\n    }\n    value() {\n        let ret = [];\n        let { list } = this;\n        for (let i = 0; i < list.length; i++) {\n            let value = normalizeStringValue(list[i].value());\n            if (value) ret.push(value);\n        }\n        return ret.length === 0 ? null : ret.join(' ');\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhc3MtbGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3JlZmVyZW5jZXMvY2xhc3MtbGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxBQUFPLFNBQWtCLEFBQWEsQUFBRSxxQkFBTSxBQUFvQixBQUFDO0FBR25FLEFBQU8sU0FBRSxBQUFvQixBQUFFLDRCQUFNLEFBQWtCLEFBQUM7QUFFeEQsQUFBTSxBQUFDLEFBQU87QUFHWixnQkFBb0IsQUFBeUI7QUFBekIsYUFBSSxPQUFKLEFBQUksQUFBcUI7QUFDM0MsQUFBSSxhQUFDLEFBQUcsTUFBRyxBQUFhLGNBQUMsQUFBSSxBQUFDLEFBQUM7QUFDL0IsQUFBSSxhQUFDLEFBQUksT0FBRyxBQUFJLEFBQUMsQUFDbkI7QUFBQztBQUVELEFBQUs7QUFDSCxZQUFJLEFBQUcsTUFBYSxBQUFFLEFBQUM7QUFDdkIsWUFBSSxFQUFFLEFBQUksQUFBRSxTQUFHLEFBQUksQUFBQztBQUVwQixBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBQyxBQUFDLEdBQUUsQUFBQyxJQUFDLEFBQUksS0FBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUNqQyxnQkFBSSxBQUFLLFFBQUcsQUFBb0IscUJBQUMsQUFBSSxLQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUssQUFBRSxBQUFDLEFBQUM7QUFDbEQsQUFBRSxBQUFDLGdCQUFDLEFBQUssQUFBQyxPQUFDLEFBQUcsSUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUMsQUFDN0I7QUFBQztBQUVELEFBQU0sZUFBQyxBQUFHLElBQUMsQUFBTSxXQUFLLEFBQUMsSUFBRyxBQUFJLE9BQUcsQUFBRyxJQUFDLEFBQUksS0FBQyxBQUFHLEFBQUMsQUFBQyxBQUNqRDtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IFJlZmVyZW5jZSwgVGFnLCBjb21iaW5lVGFnZ2VkIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IE9wdGlvbiwgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5cbmltcG9ydCB7IG5vcm1hbGl6ZVN0cmluZ1ZhbHVlIH0gZnJvbSAnLi4vZG9tL25vcm1hbGl6ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENsYXNzTGlzdFJlZmVyZW5jZSBpbXBsZW1lbnRzIFJlZmVyZW5jZTxPcHRpb248c3RyaW5nPj4ge1xuICBwdWJsaWMgdGFnOiBUYWc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsaXN0OiBSZWZlcmVuY2U8T3BhcXVlPltdKSB7XG4gICAgdGhpcy50YWcgPSBjb21iaW5lVGFnZ2VkKGxpc3QpO1xuICAgIHRoaXMubGlzdCA9IGxpc3Q7XG4gIH1cblxuICB2YWx1ZSgpOiBPcHRpb248c3RyaW5nPiB7XG4gICAgbGV0IHJldDogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgeyBsaXN0IH0gPSB0aGlzO1xuXG4gICAgZm9yIChsZXQgaT0wOyBpPGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCB2YWx1ZSA9IG5vcm1hbGl6ZVN0cmluZ1ZhbHVlKGxpc3RbaV0udmFsdWUoKSk7XG4gICAgICBpZiAodmFsdWUpIHJldC5wdXNoKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmV0Lmxlbmd0aCA9PT0gMCA/IG51bGwgOiByZXQuam9pbignICcpO1xuICB9XG59Il19","\n/**\n * Converts a ComponentCapabilities object into a 32-bit integer representation.\n */\nexport function capabilityFlagsFrom(capabilities) {\n    return 0 | (capabilities.dynamicLayout ? 1 /* DynamicLayout */ : 0) | (capabilities.dynamicTag ? 2 /* DynamicTag */ : 0) | (capabilities.prepareArgs ? 4 /* PrepareArgs */ : 0) | (capabilities.createArgs ? 8 /* CreateArgs */ : 0) | (capabilities.attributeHook ? 16 /* AttributeHook */ : 0) | (capabilities.elementHook ? 32 /* ElementHook */ : 0);\n}\nexport function hasCapability(capabilities, capability) {\n    return !!(capabilities & capability);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FwYWJpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvY2FwYWJpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFjQSxBQUVHOzs7QUFDSCxBQUFNLG9DQUE4QixBQUFtQztBQUNyRSxBQUFNLEFBQUMsV0FBQyxBQUFDLEFBQ1AsS0FBQyxBQUFZLGFBQUMsQUFBYSx3Q0FBOEIsQUFBQyxBQUFDLEFBQzNELE1BQUMsQUFBWSxhQUFDLEFBQVUsa0NBQTJCLEFBQUMsQUFBQyxBQUNyRCxNQUFDLEFBQVksYUFBQyxBQUFXLG9DQUE0QixBQUFDLEFBQUMsQUFDdkQsTUFBQyxBQUFZLGFBQUMsQUFBVSxrQ0FBMkIsQUFBQyxBQUFDLEFBQ3JELE1BQUMsQUFBWSxhQUFDLEFBQWEseUNBQThCLEFBQUMsQUFBQyxBQUMzRCxNQUFDLEFBQVksYUFBQyxBQUFXLHFDQUE0QixBQUFDLEFBQUMsQUFBb0MsQUFBQyxBQUNoRztBQUFDO0FBRUQsQUFBTSw4QkFBd0IsQUFBNkIsY0FBRSxBQUFzQixZQUNqRixBQUFLLEFBQUMsQUFBWSxBQUFFLEFBQVcsQUFBQyxBQUFDO0FBQ2pDLEFBQU0sV0FBQyxDQUFDLEFBQUMsRUFBRSxBQUFnRCxlQUFHLEFBQVUsQUFBQyxBQUFDLEFBQzVFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRDYXBhYmlsaXRpZXMsIFVuaXF1ZSwgUmVjYXN0IH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IGNoZWNrLCBDaGVja051bWJlciB9IGZyb20gXCJAZ2xpbW1lci9kZWJ1Z1wiO1xuXG5leHBvcnQgdHlwZSBDYXBhYmlsaXR5RmxhZ3MgPSBVbmlxdWU8XCJDYXBhYmlsaXR5RmxhZ1wiPjtcblxuZXhwb3J0IGNvbnN0IGVudW0gQ2FwYWJpbGl0eSB7XG4gIER5bmFtaWNMYXlvdXQgPSAwYjAwMDAwMSxcbiAgRHluYW1pY1RhZyAgICA9IDBiMDAwMDEwLFxuICBQcmVwYXJlQXJncyAgID0gMGIwMDAxMDAsXG4gIENyZWF0ZUFyZ3MgICAgPSAwYjAwMTAwMCxcbiAgQXR0cmlidXRlSG9vayA9IDBiMDEwMDAwLFxuICBFbGVtZW50SG9vayAgID0gMGIxMDAwMDBcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIENvbXBvbmVudENhcGFiaWxpdGllcyBvYmplY3QgaW50byBhIDMyLWJpdCBpbnRlZ2VyIHJlcHJlc2VudGF0aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2FwYWJpbGl0eUZsYWdzRnJvbShjYXBhYmlsaXRpZXM6IENvbXBvbmVudENhcGFiaWxpdGllcyk6IENhcGFiaWxpdHlGbGFncyB7XG4gIHJldHVybiAoMCB8XG4gICAgKGNhcGFiaWxpdGllcy5keW5hbWljTGF5b3V0ID8gQ2FwYWJpbGl0eS5EeW5hbWljTGF5b3V0IDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuZHluYW1pY1RhZyA/IENhcGFiaWxpdHkuRHluYW1pY1RhZyA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLnByZXBhcmVBcmdzID8gQ2FwYWJpbGl0eS5QcmVwYXJlQXJncyA6IDApIHxcbiAgICAoY2FwYWJpbGl0aWVzLmNyZWF0ZUFyZ3MgPyBDYXBhYmlsaXR5LkNyZWF0ZUFyZ3MgOiAwKSB8XG4gICAgKGNhcGFiaWxpdGllcy5hdHRyaWJ1dGVIb29rID8gQ2FwYWJpbGl0eS5BdHRyaWJ1dGVIb29rIDogMCkgfFxuICAgIChjYXBhYmlsaXRpZXMuZWxlbWVudEhvb2sgPyBDYXBhYmlsaXR5LkVsZW1lbnRIb29rIDogMCkpIGFzIFJlY2FzdDxudW1iZXIsIENhcGFiaWxpdHlGbGFncz47XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNDYXBhYmlsaXR5KGNhcGFiaWxpdGllczogQ2FwYWJpbGl0eUZsYWdzLCBjYXBhYmlsaXR5OiBDYXBhYmlsaXR5KTogYm9vbGVhbiB7XG4gIGNoZWNrKGNhcGFiaWxpdGllcywgQ2hlY2tOdW1iZXIpO1xuICByZXR1cm4gISEoKGNhcGFiaWxpdGllcyBhcyBSZWNhc3Q8Q2FwYWJpbGl0eUZsYWdzLCBudW1iZXI+KSAmIGNhcGFiaWxpdHkpO1xufVxuIl19","import { Register } from '@glimmer/vm';\nimport { ATTRS_BLOCK } from '@glimmer/opcode-compiler';\nimport { dict, assert, unreachable } from '@glimmer/util';\nimport { CONSTANT_TAG, isConst, isConstTag } from '@glimmer/reference';\n\nimport { APPEND_OPCODES, UpdatingOpcode } from '../../opcodes';\nimport { Arguments } from '../../vm/arguments';\nimport { IsCurriedComponentDefinitionReference } from './content';\nimport { UpdateDynamicAttributeOpcode } from './dom';\nimport { resolveComponent } from \"../../component/resolve\";\nimport { isCurriedComponentDefinition } from '../../component/curried-component';\nimport CurryComponentReference from '../../references/curry-component';\nimport ClassListReference from '../../references/class-list';\nimport { capabilityFlagsFrom, hasCapability } from '../../capabilities';\n\nexport const ARGS = new Arguments();\nAPPEND_OPCODES.add(57 /* IsComponent */, vm => {\n    let stack = vm.stack;\n    let ref = stack.pop();\n    stack.push(IsCurriedComponentDefinitionReference.create(ref));\n});\nAPPEND_OPCODES.add(58 /* CurryComponent */, (vm, { op1: _meta }) => {\n    let stack = vm.stack;\n    let definition = stack.pop();\n    let capturedArgs = stack.pop();\n    let meta = vm.constants.getSerializable(_meta);\n    let resolver = vm.constants.resolver;\n    vm.loadValue(Register.v0, new CurryComponentReference(definition, resolver, meta, capturedArgs));\n    // expectStackChange(vm.stack, -args.length - 1, 'CurryComponent');\n});\nAPPEND_OPCODES.add(59 /* PushComponentDefinition */, (vm, { op1: handle }) => {\n    let definition = vm.constants.resolveHandle(handle);\n    (false && assert(!!definition, `Missing component for ${handle}`));\n\n    let { manager } = definition;\n    let capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));\n    let instance = {\n        definition,\n        manager,\n        capabilities,\n        state: null,\n        handle: null,\n        table: null\n    };\n    vm.stack.push(instance);\n});\nAPPEND_OPCODES.add(62 /* ResolveDynamicComponent */, (vm, { op1: _meta }) => {\n    let stack = vm.stack;\n    let component = stack.pop().value();\n    let meta = vm.constants.getSerializable(_meta);\n    vm.loadValue(Register.t1, null); // Clear the temp register\n    let definition;\n    if (typeof component === 'string') {\n        let { constants: { resolver } } = vm;\n        let resolvedDefinition = resolveComponent(resolver, component, meta);\n        definition = resolvedDefinition;\n    } else if (isCurriedComponentDefinition(component)) {\n        definition = component;\n    } else {\n        throw unreachable();\n    }\n    stack.push(definition);\n});\nAPPEND_OPCODES.add(60 /* PushDynamicComponentInstance */, vm => {\n    let { stack } = vm;\n    let definition = stack.pop();\n    let capabilities, manager;\n    if (isCurriedComponentDefinition(definition)) {\n        manager = capabilities = null;\n    } else {\n        manager = definition.manager;\n        capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));\n    }\n    stack.push({ definition, capabilities, manager, state: null, handle: null, table: null });\n});\nAPPEND_OPCODES.add(61 /* PushCurriedComponent */, (vm, { op1: _meta }) => {\n    let stack = vm.stack;\n    let component = stack.pop().value();\n    let definition;\n    if (isCurriedComponentDefinition(component)) {\n        definition = component;\n    } else {\n        throw unreachable();\n    }\n    stack.push(definition);\n});\nAPPEND_OPCODES.add(63 /* PushArgs */, (vm, { op1: _names, op2: flags }) => {\n    let stack = vm.stack;\n    let names = vm.constants.getStringArray(_names);\n    let positionalCount = flags >> 4;\n    let synthetic = flags & 0b1000;\n    let blockNames = [];\n    if (flags & 0b0100) blockNames.push('main');\n    if (flags & 0b0010) blockNames.push('else');\n    if (flags & 0b0001) blockNames.push('attrs');\n    ARGS.setup(stack, names, blockNames, positionalCount, !!synthetic);\n    stack.push(ARGS);\n});\nAPPEND_OPCODES.add(66 /* CaptureArgs */, vm => {\n    let stack = vm.stack;\n    let args = stack.pop();\n    let capturedArgs = args.capture();\n    stack.push(capturedArgs);\n});\nAPPEND_OPCODES.add(65 /* PrepareArgs */, (vm, { op1: _state }) => {\n    let stack = vm.stack;\n    let instance = vm.fetchValue(_state);\n    let args = stack.pop();\n    let { definition } = instance;\n    if (isCurriedComponentDefinition(definition)) {\n        (false && assert(!definition.manager, \"If the component definition was curried, we don't yet have a manager\"));\n\n        definition = resolveCurriedComponentDefinition(instance, definition, args);\n    }\n    let { manager, state } = definition;\n    let capabilities = instance.capabilities;\n    if (hasCapability(capabilities, 4 /* PrepareArgs */) !== true) {\n        stack.push(args);\n        return;\n    }\n    let blocks = args.blocks.values;\n    let blockNames = args.blocks.names;\n    let preparedArgs = manager.prepareArgs(state, args);\n    if (preparedArgs) {\n        args.clear();\n        for (let i = 0; i < blocks.length; i++) {\n            stack.push(blocks[i]);\n        }\n        let { positional, named } = preparedArgs;\n        let positionalCount = positional.length;\n        for (let i = 0; i < positionalCount; i++) {\n            stack.push(positional[i]);\n        }\n        let names = Object.keys(named);\n        for (let i = 0; i < names.length; i++) {\n            stack.push(named[names[i]]);\n        }\n        args.setup(stack, names, blockNames, positionalCount, true);\n    }\n    stack.push(args);\n});\nfunction resolveCurriedComponentDefinition(instance, definition, args) {\n    let unwrappedDefinition = instance.definition = definition.unwrap(args);\n    let { manager, state } = unwrappedDefinition;\n    (false && assert(instance.manager === null, \"component instance manager should not be populated yet\"));\n    (false && assert(instance.capabilities === null, \"component instance manager should not be populated yet\"));\n\n    instance.manager = manager;\n    instance.capabilities = capabilityFlagsFrom(manager.getCapabilities(state));\n    return unwrappedDefinition;\n}\nAPPEND_OPCODES.add(67 /* CreateComponent */, (vm, { op1: flags, op2: _state }) => {\n    let dynamicScope = vm.dynamicScope();\n    let instance = vm.fetchValue(_state);\n    let { definition, manager } = instance;\n    let capabilities = instance.capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));\n    let hasDefaultBlock = flags & 1;\n    let args = null;\n    if (hasCapability(capabilities, 8 /* CreateArgs */)) {\n        args = vm.stack.peek();\n    }\n    let state = manager.create(vm.env, definition.state, args, dynamicScope, vm.getSelf(), !!hasDefaultBlock);\n    // We want to reuse the `state` POJO here, because we know that the opcodes\n    // only transition at exactly one place.\n    instance.state = state;\n    let tag = manager.getTag(state);\n    if (!isConstTag(tag)) {\n        vm.updateWith(new UpdateComponentOpcode(tag, state, manager, dynamicScope));\n    }\n});\nAPPEND_OPCODES.add(68 /* RegisterComponentDestructor */, (vm, { op1: _state }) => {\n    let { manager, state } = vm.fetchValue(_state);\n    let destructor = manager.getDestructor(state);\n    if (destructor) vm.newDestroyable(destructor);\n});\nAPPEND_OPCODES.add(75 /* BeginComponentTransaction */, vm => {\n    vm.beginCacheGroup();\n    vm.elements().pushSimpleBlock();\n});\nAPPEND_OPCODES.add(69 /* PutComponentOperations */, vm => {\n    vm.loadValue(Register.t0, new ComponentElementOperations());\n});\nAPPEND_OPCODES.add(29 /* ComponentAttr */, (vm, { op1: _name, op2: trusting, op3: _namespace }) => {\n    let name = vm.constants.getString(_name);\n    let reference = vm.stack.pop();\n    let namespace = _namespace ? vm.constants.getString(_namespace) : null;\n    vm.fetchValue(Register.t0).setAttribute(name, reference, !!trusting, namespace);\n});\nexport class ComponentElementOperations {\n    constructor() {\n        this.attributes = dict();\n        this.classes = [];\n    }\n    setAttribute(name, value, trusting, namespace) {\n        let deferred = { value, namespace, trusting };\n        if (name === 'class') {\n            this.classes.push(value);\n        }\n        this.attributes[name] = deferred;\n    }\n    flush(vm) {\n        for (let name in this.attributes) {\n            let attr = this.attributes[name];\n            let { value: reference, namespace, trusting } = attr;\n            if (name === 'class') {\n                reference = new ClassListReference(this.classes);\n            }\n            let attribute = vm.elements().setDynamicAttribute(name, reference.value(), trusting, namespace);\n            if (!isConst(reference)) {\n                vm.updateWith(new UpdateDynamicAttributeOpcode(reference, attribute));\n            }\n        }\n    }\n}\nAPPEND_OPCODES.add(77 /* DidCreateElement */, (vm, { op1: _state }) => {\n    let { definition, state } = vm.fetchValue(_state);\n    let { manager } = definition;\n    let operations = vm.fetchValue(Register.t0);\n    let action = 'DidCreateElementOpcode#evaluate';\n    manager.didCreateElement(state, vm.elements().expectConstructing(action), operations);\n});\nAPPEND_OPCODES.add(70 /* GetComponentSelf */, (vm, { op1: _state }) => {\n    let { definition, state } = vm.fetchValue(_state);\n    let { manager } = definition;\n    vm.stack.push(manager.getSelf(state));\n});\nAPPEND_OPCODES.add(71 /* GetComponentTagName */, (vm, { op1: _state }) => {\n    let { definition, state } = vm.fetchValue(_state);\n    let { manager } = definition;\n    vm.stack.push(manager.getTagName(state));\n});\n// Dynamic Invocation Only\nAPPEND_OPCODES.add(72 /* GetComponentLayout */, (vm, { op1: _state }) => {\n    let instance = vm.fetchValue(_state);\n    let { manager, definition } = instance;\n    let { constants: { resolver }, stack } = vm;\n    let { state: instanceState, capabilities } = instance;\n    let { state: definitionState } = definition;\n    let invoke;\n    if (hasStaticLayout(capabilities, manager)) {\n        invoke = manager.getLayout(definitionState, resolver);\n    } else if (hasDynamicLayout(capabilities, manager)) {\n        invoke = manager.getDynamicLayout(instanceState, resolver);\n    } else {\n        throw unreachable();\n    }\n    stack.push(invoke.symbolTable);\n    stack.push(invoke.handle);\n});\nfunction hasStaticLayout(capabilities, _manager) {\n    return hasCapability(capabilities, 1 /* DynamicLayout */) === false;\n}\nfunction hasDynamicLayout(capabilities, _manager) {\n    return hasCapability(capabilities, 1 /* DynamicLayout */) === true;\n}\nAPPEND_OPCODES.add(56 /* Main */, (vm, { op1: register }) => {\n    let definition = vm.stack.pop();\n    let invocation = vm.stack.pop();\n    let { manager } = definition;\n    let capabilities = capabilityFlagsFrom(manager.getCapabilities(definition.state));\n    let state = {\n        definition,\n        manager,\n        capabilities,\n        state: null,\n        handle: invocation.handle,\n        table: invocation.symbolTable\n    };\n    vm.loadValue(register, state);\n});\nAPPEND_OPCODES.add(73 /* PopulateLayout */, (vm, { op1: _state }) => {\n    let { stack } = vm;\n    let handle = stack.pop();\n    let table = stack.pop();\n    let state = vm.fetchValue(_state);\n    state.handle = handle;\n    state.table = table;\n});\n// Dynamic Invocation Only\nAPPEND_OPCODES.add(74 /* InvokeComponentLayout */, (vm, { op1: _state }) => {\n    let { stack } = vm;\n    let { handle, table: { symbols, hasEval } } = vm.fetchValue(_state);\n    {\n        let self = stack.pop();\n        let scope = vm.pushRootScope(symbols.length + 1, true);\n        scope.bindSelf(self);\n        let args = vm.stack.pop();\n        let lookup = null;\n        if (hasEval) {\n            lookup = dict();\n        }\n        let callerNames = args.named.atNames;\n        for (let i = callerNames.length - 1; i >= 0; i--) {\n            let atName = callerNames[i];\n            let symbol = symbols.indexOf(callerNames[i]);\n            let value = args.named.get(atName, false);\n            if (symbol !== -1) scope.bindSymbol(symbol + 1, value);\n            if (hasEval) lookup[atName] = value;\n        }\n        let bindBlock = (symbolName, blockName) => {\n            let symbol = symbols.indexOf(symbolName);\n            let block = blocks.get(blockName);\n            if (symbol !== -1) {\n                scope.bindBlock(symbol + 1, block);\n            }\n            if (lookup) lookup[symbolName] = block;\n        };\n        let blocks = args.blocks;\n        bindBlock(ATTRS_BLOCK, 'attrs');\n        bindBlock('&inverse', 'else');\n        bindBlock('&default', 'main');\n        if (lookup) scope.bindEvalScope(lookup);\n        vm.call(handle);\n    }\n});\nAPPEND_OPCODES.add(78 /* DidRenderLayout */, (vm, { op1: _state }) => {\n    let { manager, state } = vm.fetchValue(_state);\n    let bounds = vm.elements().popBlock();\n    let mgr = manager;\n    mgr.didRenderLayout(state, bounds);\n    vm.env.didCreate(state, manager);\n    vm.updateWith(new DidUpdateLayoutOpcode(manager, state, bounds));\n});\nAPPEND_OPCODES.add(76 /* CommitComponentTransaction */, vm => {\n    vm.commitCacheGroup();\n});\nexport class UpdateComponentOpcode extends UpdatingOpcode {\n    constructor(tag, component, manager, dynamicScope) {\n        super();\n        this.tag = tag;\n        this.component = component;\n        this.manager = manager;\n        this.dynamicScope = dynamicScope;\n        this.type = 'update-component';\n    }\n    evaluate(_vm) {\n        let { component, manager, dynamicScope } = this;\n        manager.update(component, dynamicScope);\n    }\n}\nexport class DidUpdateLayoutOpcode extends UpdatingOpcode {\n    constructor(manager, component, bounds) {\n        super();\n        this.manager = manager;\n        this.component = component;\n        this.bounds = bounds;\n        this.type = 'did-update-layout';\n        this.tag = CONSTANT_TAG;\n    }\n    evaluate(vm) {\n        let { manager, component, bounds } = this;\n        manager.didUpdateLayout(component, bounds);\n        vm.env.didUpdate(component, manager);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { dict } from '@glimmer/util';\nimport { APPEND_OPCODES } from '../../opcodes';\n/* tslint:disable */\nfunction debugCallback(context, get) {\n    console.info('Use `context`, and `get(<path>)` to debug this template.');\n    // for example...\n    context === get('this');\n    debugger;\n}\n/* tslint:enable */\nlet callback = debugCallback;\n// For testing purposes\nexport function setDebuggerCallback(cb) {\n    callback = cb;\n}\nexport function resetDebuggerCallback() {\n    callback = debugCallback;\n}\nclass ScopeInspector {\n    constructor(scope, symbols, evalInfo) {\n        this.scope = scope;\n        this.locals = dict();\n        for (let i = 0; i < evalInfo.length; i++) {\n            let slot = evalInfo[i];\n            let name = symbols[slot - 1];\n            let ref = scope.getSymbol(slot);\n            this.locals[name] = ref;\n        }\n    }\n    get(path) {\n        let { scope, locals } = this;\n        let parts = path.split('.');\n        let [head, ...tail] = path.split('.');\n        let evalScope = scope.getEvalScope();\n        let ref;\n        if (head === 'this') {\n            ref = scope.getSelf();\n        } else if (locals[head]) {\n            ref = locals[head];\n        } else if (head.indexOf('@') === 0 && evalScope[head]) {\n            ref = evalScope[head];\n        } else {\n            ref = this.scope.getSelf();\n            tail = parts;\n        }\n        return tail.reduce((r, part) => r.get(part), ref);\n    }\n}\nAPPEND_OPCODES.add(81 /* Debugger */, (vm, { op1: _symbols, op2: _evalInfo }) => {\n    let symbols = vm.constants.getStringArray(_symbols);\n    let evalInfo = vm.constants.getArray(_evalInfo);\n    let inspector = new ScopeInspector(vm.scope(), symbols, evalInfo);\n    callback(vm.getSelf().value(), path => inspector.get(path).value());\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWdnZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9ydW50aW1lL2xpYi9jb21waWxlZC9vcGNvZGVzL2RlYnVnZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLEFBQU8sU0FBRSxBQUFJLEFBQUUsWUFBTSxBQUFlLEFBQUM7QUFFckMsQUFBTyxTQUFFLEFBQWMsQUFBRSxzQkFBTSxBQUFlLEFBQUM7QUFPL0MsQUFBb0I7QUFDcEIsdUJBQXVCLEFBQWUsU0FBRSxBQUFhO0FBQ25ELEFBQU8sWUFBQyxBQUFJLEtBQUMsQUFBMEQsQUFBQyxBQUFDO0FBRXpFLEFBQWlCO0FBQ2pCLEFBQU8sZ0JBQUssQUFBRyxJQUFDLEFBQU0sQUFBQyxBQUFDO0FBRXhCLEFBQVEsQUFBQyxBQUNYO0FBQUM7QUFDRCxBQUFtQjtBQUVuQixJQUFJLEFBQVEsV0FBRyxBQUFhLEFBQUM7QUFFN0IsQUFBdUI7QUFDdkIsQUFBTSxvQ0FBOEIsQUFBaUI7QUFDbkQsQUFBUSxlQUFHLEFBQUUsQUFBQyxBQUNoQjtBQUFDO0FBRUQsQUFBTTtBQUNKLEFBQVEsZUFBRyxBQUFhLEFBQUMsQUFDM0I7QUFBQztBQUVEO0FBR0UsZ0JBQW9CLEFBQVksT0FBRSxBQUFpQixTQUFFLEFBQWtCO0FBQW5ELGFBQUssUUFBTCxBQUFLLEFBQU87QUFGeEIsYUFBTSxTQUFHLEFBQUksQUFBa0MsQUFBQztBQUd0RCxBQUFHLEFBQUMsYUFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQVEsU0FBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUN6QyxnQkFBSSxBQUFJLE9BQUcsQUFBUSxTQUFDLEFBQUMsQUFBQyxBQUFDO0FBQ3ZCLGdCQUFJLEFBQUksT0FBRyxBQUFPLFFBQUMsQUFBSSxPQUFHLEFBQUMsQUFBQyxBQUFDO0FBQzdCLGdCQUFJLEFBQUcsTUFBSSxBQUFLLE1BQUMsQUFBUyxVQUFDLEFBQUksQUFBQyxBQUFDO0FBQ2pDLEFBQUksaUJBQUMsQUFBTSxPQUFDLEFBQUksQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUMxQjtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQUcsUUFBQyxBQUFZO0FBQ2QsWUFBSSxFQUFFLEFBQUssT0FBRSxBQUFNLEFBQUUsV0FBRyxBQUFJLEFBQUM7QUFDN0IsWUFBSSxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUMsQUFBQztBQUM1QixZQUFJLENBQUMsQUFBSSxNQUFFLEdBQUcsQUFBSSxBQUFDLFFBQUcsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEFBQUMsQUFBQztBQUV0QyxZQUFJLEFBQVMsWUFBRyxBQUFLLE1BQUMsQUFBWSxBQUFHLEFBQUM7QUFDdEMsWUFBSSxBQUFtQyxBQUFDO0FBRXhDLEFBQUUsQUFBQyxZQUFDLEFBQUksU0FBSyxBQUFNLEFBQUMsUUFBQyxBQUFDO0FBQ3BCLEFBQUcsa0JBQUcsQUFBSyxNQUFDLEFBQU8sQUFBRSxBQUFDLEFBQ3hCO0FBQUMsQUFBQyxBQUFJLG1CQUFLLEFBQU0sT0FBQyxBQUFJLEFBQUMsQUFBQyxPQUFDLEFBQUM7QUFDeEIsQUFBRyxrQkFBRyxBQUFNLE9BQUMsQUFBSSxBQUFDLEFBQUMsQUFDckI7QUFBQyxBQUFDLEFBQUksU0FGQyxBQUFFLEFBQUMsVUFFQyxBQUFJLEtBQUMsQUFBTyxRQUFDLEFBQUcsQUFBQyxTQUFLLEFBQUMsS0FBSSxBQUFTLFVBQUMsQUFBSSxBQUFDLEFBQUMsT0FBQyxBQUFDO0FBQ3RELEFBQUcsa0JBQUcsQUFBUyxVQUFDLEFBQUksQUFBbUMsQUFBQyxBQUMxRDtBQUFDLEFBQUMsQUFBSSxTQUZDLEFBQUUsQUFBQyxNQUVILEFBQUM7QUFDTixBQUFHLGtCQUFHLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBTyxBQUFFLEFBQUM7QUFDM0IsQUFBSSxtQkFBRyxBQUFLLEFBQUMsQUFDZjtBQUFDO0FBRUQsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQ0FBQyxBQUFDLEdBQUUsQUFBSSxTQUFLLEFBQUMsRUFBQyxBQUFHLElBQUMsQUFBSSxBQUFDLE9BQUUsQUFBRyxBQUFDLEFBQUMsQUFDcEQ7QUFBQyxBQUNGOztBQUVELEFBQWMsZUFBQyxBQUFHLHVCQUFjLENBQUMsQUFBRSxJQUFFLEVBQUUsQUFBRyxLQUFFLEFBQVEsVUFBRSxBQUFHLEtBQUUsQUFBUyxBQUFFO0FBQ3BFLFFBQUksQUFBTyxVQUFHLEFBQUUsR0FBQyxBQUFTLFVBQUMsQUFBYyxlQUFDLEFBQVEsQUFBQyxBQUFDO0FBQ3BELFFBQUksQUFBUSxXQUFHLEFBQUUsR0FBQyxBQUFTLFVBQUMsQUFBUSxTQUFDLEFBQVMsQUFBQyxBQUFDO0FBQ2hELFFBQUksQUFBUyxZQUFHLElBQUksQUFBYyxlQUFDLEFBQUUsR0FBQyxBQUFLLEFBQUUsU0FBRSxBQUFPLFNBQUUsQUFBUSxBQUFDLEFBQUM7QUFDbEUsQUFBUSxhQUFDLEFBQUUsR0FBQyxBQUFPLEFBQUUsVUFBQyxBQUFLLEFBQUUsU0FBRSxBQUFJLFFBQUksQUFBUyxVQUFDLEFBQUcsSUFBQyxBQUFJLEFBQUMsTUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQ3RFO0FBQUMsQUFBQyxBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlIH0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IGRpY3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCB7IFNjb3BlIH0gZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgQVBQRU5EX09QQ09ERVMgfSBmcm9tICcuLi8uLi9vcGNvZGVzJztcbmltcG9ydCB7IE9wIH0gZnJvbSAnQGdsaW1tZXIvdm0nO1xuXG5leHBvcnQgdHlwZSBEZWJ1Z0dldCA9ICgocGF0aDogc3RyaW5nKSA9PiBPcGFxdWUpO1xuXG5leHBvcnQgdHlwZSBEZWJ1Z0NhbGxiYWNrID0gKChjb250ZXh0OiBPcGFxdWUsIGdldDogRGVidWdHZXQpID0+IHZvaWQpO1xuXG4vKiB0c2xpbnQ6ZGlzYWJsZSAqL1xuZnVuY3Rpb24gZGVidWdDYWxsYmFjayhjb250ZXh0OiBPcGFxdWUsIGdldDogRGVidWdHZXQpOiB2b2lkIHtcbiAgY29uc29sZS5pbmZvKCdVc2UgYGNvbnRleHRgLCBhbmQgYGdldCg8cGF0aD4pYCB0byBkZWJ1ZyB0aGlzIHRlbXBsYXRlLicpO1xuXG4gIC8vIGZvciBleGFtcGxlLi4uXG4gIGNvbnRleHQgPT09IGdldCgndGhpcycpO1xuXG4gIGRlYnVnZ2VyO1xufVxuLyogdHNsaW50OmVuYWJsZSAqL1xuXG5sZXQgY2FsbGJhY2sgPSBkZWJ1Z0NhbGxiYWNrO1xuXG4vLyBGb3IgdGVzdGluZyBwdXJwb3Nlc1xuZXhwb3J0IGZ1bmN0aW9uIHNldERlYnVnZ2VyQ2FsbGJhY2soY2I6IERlYnVnQ2FsbGJhY2spIHtcbiAgY2FsbGJhY2sgPSBjYjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0RGVidWdnZXJDYWxsYmFjaygpIHtcbiAgY2FsbGJhY2sgPSBkZWJ1Z0NhbGxiYWNrO1xufVxuXG5jbGFzcyBTY29wZUluc3BlY3RvciB7XG4gIHByaXZhdGUgbG9jYWxzID0gZGljdDxWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPE9wYXF1ZT4+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzY29wZTogU2NvcGUsIHN5bWJvbHM6IHN0cmluZ1tdLCBldmFsSW5mbzogbnVtYmVyW10pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGV2YWxJbmZvLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgc2xvdCA9IGV2YWxJbmZvW2ldO1xuICAgICAgbGV0IG5hbWUgPSBzeW1ib2xzW3Nsb3QgLSAxXTtcbiAgICAgIGxldCByZWYgID0gc2NvcGUuZ2V0U3ltYm9sKHNsb3QpO1xuICAgICAgdGhpcy5sb2NhbHNbbmFtZV0gPSByZWY7XG4gICAgfVxuICB9XG5cbiAgZ2V0KHBhdGg6IHN0cmluZyk6IFZlcnNpb25lZFBhdGhSZWZlcmVuY2U8T3BhcXVlPiB7XG4gICAgbGV0IHsgc2NvcGUsIGxvY2FscyB9ID0gdGhpcztcbiAgICBsZXQgcGFydHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgbGV0IFtoZWFkLCAuLi50YWlsXSA9IHBhdGguc3BsaXQoJy4nKTtcblxuICAgIGxldCBldmFsU2NvcGUgPSBzY29wZS5nZXRFdmFsU2NvcGUoKSE7XG4gICAgbGV0IHJlZjogVmVyc2lvbmVkUGF0aFJlZmVyZW5jZTxPcGFxdWU+O1xuXG4gICAgaWYgKGhlYWQgPT09ICd0aGlzJykge1xuICAgICAgcmVmID0gc2NvcGUuZ2V0U2VsZigpO1xuICAgIH0gZWxzZSBpZiAobG9jYWxzW2hlYWRdKSB7XG4gICAgICByZWYgPSBsb2NhbHNbaGVhZF07XG4gICAgfSBlbHNlIGlmIChoZWFkLmluZGV4T2YoJ0AnKSA9PT0gMCAmJiBldmFsU2NvcGVbaGVhZF0pIHtcbiAgICAgIHJlZiA9IGV2YWxTY29wZVtoZWFkXSBhcyBWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPE9wYXF1ZT47XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlZiA9IHRoaXMuc2NvcGUuZ2V0U2VsZigpO1xuICAgICAgdGFpbCA9IHBhcnRzO1xuICAgIH1cblxuICAgIHJldHVybiB0YWlsLnJlZHVjZSgociwgcGFydCkgPT4gci5nZXQocGFydCksIHJlZik7XG4gIH1cbn1cblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkRlYnVnZ2VyLCAodm0sIHsgb3AxOiBfc3ltYm9scywgb3AyOiBfZXZhbEluZm8gfSkgPT4ge1xuICBsZXQgc3ltYm9scyA9IHZtLmNvbnN0YW50cy5nZXRTdHJpbmdBcnJheShfc3ltYm9scyk7XG4gIGxldCBldmFsSW5mbyA9IHZtLmNvbnN0YW50cy5nZXRBcnJheShfZXZhbEluZm8pO1xuICBsZXQgaW5zcGVjdG9yID0gbmV3IFNjb3BlSW5zcGVjdG9yKHZtLnNjb3BlKCksIHN5bWJvbHMsIGV2YWxJbmZvKTtcbiAgY2FsbGJhY2sodm0uZ2V0U2VsZigpLnZhbHVlKCksIHBhdGggPT4gaW5zcGVjdG9yLmdldChwYXRoKS52YWx1ZSgpKTtcbn0pO1xuIl19","import { APPEND_OPCODES } from '../../opcodes';\nimport { assert } from \"@glimmer/util\";\n\nAPPEND_OPCODES.add(79 /* InvokePartial */, (vm, { op1: _meta, op2: _symbols, op3: _evalInfo }) => {\n    let { constants, constants: { resolver }, stack } = vm;\n    let name = stack.pop().value();\n    (false && assert(typeof name === 'string', `Could not find a partial named \"${String(name)}\"`));\n\n    let meta = constants.getSerializable(_meta);\n    let outerSymbols = constants.getStringArray(_symbols);\n    let evalInfo = constants.getArray(_evalInfo);\n    let handle = resolver.lookupPartial(name, meta);\n    (false && assert(handle, `Could not find a partial named \"${name}\"`));\n\n    let definition = resolver.resolve(handle);\n    let { symbolTable, handle: vmHandle } = definition.getPartial();\n    {\n        let partialSymbols = symbolTable.symbols;\n        let outerScope = vm.scope();\n        let partialScope = vm.pushRootScope(partialSymbols.length, false);\n        let evalScope = outerScope.getEvalScope();\n        partialScope.bindCallerScope(outerScope.getCallerScope());\n        partialScope.bindEvalScope(evalScope);\n        partialScope.bindSelf(outerScope.getSelf());\n        let locals = Object.create(outerScope.getPartialMap());\n        for (let i = 0; i < evalInfo.length; i++) {\n            let slot = evalInfo[i];\n            let name = outerSymbols[slot - 1];\n            let ref = outerScope.getSymbol(slot);\n            locals[name] = ref;\n        }\n        if (evalScope) {\n            for (let i = 0; i < partialSymbols.length; i++) {\n                let name = partialSymbols[i];\n                let symbol = i + 1;\n                let value = evalScope[name];\n                if (value !== undefined) partialScope.bind(symbol, value);\n            }\n        }\n        partialScope.bindPartialMap(locals);\n        vm.pushFrame(); // sp += 2\n        vm.call(vmHandle);\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydGlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2NvbXBpbGVkL29wY29kZXMvcGFydGlhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxBQUFPLFNBQUUsQUFBYyxBQUFFLHNCQUFNLEFBQWUsQUFBQztBQUUvQyxBQUFPLFNBQUUsQUFBTSxBQUFRLGNBQU0sQUFBZSxBQUFDLEFBQzdDLEFBQU8sQUFBRSxBQUFLLEFBQUUsQUFBaUIsQUFBRSxBQUFNLEFBQWdCLEFBQUMsQUFFMUQsQUFBTyxBQUFFLEFBQWMsQUFBRSxBQUFNLEFBQWdCLEFBQUM7O0FBRWhELEFBQWMsZUFBQyxBQUFHLDRCQUFtQixDQUFDLEFBQUUsSUFBRSxFQUFFLEFBQUcsS0FBRSxBQUFLLE9BQUUsQUFBRyxLQUFFLEFBQVEsVUFBRSxBQUFHLEtBQUUsQUFBUyxBQUFFO0FBQ3JGLFFBQUksRUFBRSxBQUFTLFdBQUUsQUFBUyxXQUFFLEVBQUUsQUFBUSxBQUFFLFlBQUUsQUFBSyxBQUFFLFVBQUcsQUFBRSxBQUFDO0FBRXZELFFBQUksQUFBSSxPQUFTLEFBQUssTUFBQyxBQUFHLEFBQUUsQUFBRSxBQUFjLEFBQUMsS0FBbEMsQUFBSyxDQUE4QixBQUFLLEFBQUUsQUFBQztjQUN0RCxBQUFNLE9BQUMsT0FBTyxBQUFJLFNBQUssQUFBUSxBQUFFLDZDQUFtQyxBQUFNLE9BQUMsQUFBSSxBQUFDLEtBQUcsQUFBQyxBQUFDOztBQUVyRixRQUFJLEFBQUksT0FBRyxBQUFTLFVBQUMsQUFBZSxnQkFBZSxBQUFLLEFBQUMsQUFBQztBQUMxRCxRQUFJLEFBQVksZUFBRyxBQUFTLFVBQUMsQUFBYyxlQUFDLEFBQVEsQUFBQyxBQUFDO0FBQ3RELFFBQUksQUFBUSxXQUFHLEFBQVMsVUFBQyxBQUFRLFNBQUMsQUFBUyxBQUFDLEFBQUM7QUFFN0MsUUFBSSxBQUFNLFNBQUcsQUFBUSxTQUFDLEFBQWEsY0FBQyxBQUFjLE1BQUUsQUFBSSxBQUFDLEFBQUM7Y0FFMUQsQUFBTSxPQUFDLEFBQU0sQUFBRSwyQ0FBbUMsQUFBSSxJQUFHLEFBQUMsQUFBQzs7QUFFM0QsUUFBSSxBQUFVLGFBQUcsQUFBUSxTQUFDLEFBQU8sUUFBb0IsQUFBTyxBQUFDLEFBQUM7QUFFOUQsUUFBSSxFQUFFLEFBQVcsYUFBRSxBQUFNLFFBQUUsQUFBUSxBQUFFLGFBQUcsQUFBVSxXQUFDLEFBQVUsQUFBRSxBQUFDO0FBRWhFLEFBQUM7QUFDQyxZQUFJLEFBQWMsaUJBQUcsQUFBVyxZQUFDLEFBQU8sQUFBQztBQUN6QyxZQUFJLEFBQVUsYUFBRyxBQUFFLEdBQUMsQUFBSyxBQUFFLEFBQUM7QUFDNUIsWUFBSSxBQUFZLGVBQUcsQUFBRSxHQUFDLEFBQWEsY0FBQyxBQUFjLGVBQUMsQUFBTSxRQUFFLEFBQUssQUFBQyxBQUFDO0FBQ2xFLFlBQUksQUFBUyxZQUFHLEFBQVUsV0FBQyxBQUFZLEFBQUUsQUFBQztBQUMxQyxBQUFZLHFCQUFDLEFBQWUsZ0JBQUMsQUFBVSxXQUFDLEFBQWMsQUFBRSxBQUFDLEFBQUM7QUFDMUQsQUFBWSxxQkFBQyxBQUFhLGNBQUMsQUFBUyxBQUFDLEFBQUM7QUFDdEMsQUFBWSxxQkFBQyxBQUFRLFNBQUMsQUFBVSxXQUFDLEFBQU8sQUFBRSxBQUFDLEFBQUM7QUFFNUMsWUFBSSxBQUFNLFNBQUcsQUFBTSxPQUFDLEFBQU0sT0FBQyxBQUFVLFdBQUMsQUFBYSxBQUFFLEFBQXlDLEFBQUM7QUFFL0YsQUFBRyxBQUFDLGFBQUMsSUFBSSxBQUFDLElBQUcsQUFBQyxHQUFFLEFBQUMsSUFBRyxBQUFRLFNBQUMsQUFBTSxRQUFFLEFBQUMsQUFBRSxLQUFFLEFBQUM7QUFDekMsZ0JBQUksQUFBSSxPQUFHLEFBQVEsU0FBQyxBQUFDLEFBQUMsQUFBQztBQUN2QixnQkFBSSxBQUFJLE9BQUcsQUFBWSxhQUFDLEFBQUksT0FBRyxBQUFDLEFBQUMsQUFBQztBQUNsQyxnQkFBSSxBQUFHLE1BQUksQUFBVSxXQUFDLEFBQVMsVUFBQyxBQUFJLEFBQUMsQUFBQztBQUN0QyxBQUFNLG1CQUFDLEFBQUksQUFBQyxRQUFHLEFBQUcsQUFBQyxBQUNyQjtBQUFDO0FBRUQsQUFBRSxBQUFDLFlBQUMsQUFBUyxBQUFDLFdBQUMsQUFBQztBQUNkLEFBQUcsQUFBQyxpQkFBQyxJQUFJLEFBQUMsSUFBRyxBQUFDLEdBQUUsQUFBQyxJQUFHLEFBQWMsZUFBQyxBQUFNLFFBQUUsQUFBQyxBQUFFLEtBQUUsQUFBQztBQUMvQyxvQkFBSSxBQUFJLE9BQUcsQUFBYyxlQUFDLEFBQUMsQUFBQyxBQUFDO0FBQzdCLG9CQUFJLEFBQU0sU0FBRyxBQUFDLElBQUcsQUFBQyxBQUFDO0FBQ25CLG9CQUFJLEFBQUssUUFBRyxBQUFTLFVBQUMsQUFBSSxBQUFDLEFBQUM7QUFFNUIsQUFBRSxBQUFDLG9CQUFDLEFBQUssVUFBSyxBQUFTLEFBQUMsV0FBQyxBQUFZLGFBQUMsQUFBSSxLQUFDLEFBQU0sUUFBRSxBQUFLLEFBQUMsQUFBQyxBQUM1RDtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQVkscUJBQUMsQUFBYyxlQUFDLEFBQU0sQUFBQyxBQUFDO0FBRXBDLEFBQUUsV0FBQyxBQUFTLEFBQUUsQUFBQyxhQUFDLEFBQVU7QUFDMUIsQUFBRSxXQUFDLEFBQUksS0FBQyxBQUFTLEFBQUMsQUFBQyxBQUNyQjtBQUFDLEFBRUQsQUFBaUIsQUFBQyxBQUFFLEFBQUMsQUFBSyxBQUFFLEFBQUMsQUFBRSxBQUFlLEFBQUMsQUFBQyxBQUNsRDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZlcnNpb25lZFBhdGhSZWZlcmVuY2UgfSBmcm9tICdAZ2xpbW1lci9yZWZlcmVuY2UnO1xuaW1wb3J0IHsgVGVtcGxhdGVNZXRhIH0gZnJvbSAnQGdsaW1tZXIvd2lyZS1mb3JtYXQnO1xuaW1wb3J0IHsgT3AgfSBmcm9tICdAZ2xpbW1lci92bSc7XG5pbXBvcnQgeyBBUFBFTkRfT1BDT0RFUyB9IGZyb20gJy4uLy4uL29wY29kZXMnO1xuaW1wb3J0IHsgUGFydGlhbERlZmluaXRpb24gfSBmcm9tICcuLi8uLi9wYXJ0aWFsJztcbmltcG9ydCB7IGFzc2VydCwgRGljdCB9IGZyb20gXCJAZ2xpbW1lci91dGlsXCI7XG5pbXBvcnQgeyBjaGVjaywgZXhwZWN0U3RhY2tDaGFuZ2UgfSBmcm9tICdAZ2xpbW1lci9kZWJ1Zyc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tIFwiQGdsaW1tZXIvaW50ZXJmYWNlc1wiO1xuaW1wb3J0IHsgQ2hlY2tSZWZlcmVuY2UgfSBmcm9tICcuLy1kZWJ1Zy1zdHJpcCc7XG5cbkFQUEVORF9PUENPREVTLmFkZChPcC5JbnZva2VQYXJ0aWFsLCAodm0sIHsgb3AxOiBfbWV0YSwgb3AyOiBfc3ltYm9scywgb3AzOiBfZXZhbEluZm8gfSkgPT4ge1xuICBsZXQgeyBjb25zdGFudHMsIGNvbnN0YW50czogeyByZXNvbHZlciB9LCBzdGFjayB9ID0gdm07XG5cbiAgbGV0IG5hbWUgPSBjaGVjayhzdGFjay5wb3AoKSwgQ2hlY2tSZWZlcmVuY2UpLnZhbHVlKCk7XG4gIGFzc2VydCh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycsIGBDb3VsZCBub3QgZmluZCBhIHBhcnRpYWwgbmFtZWQgXCIke1N0cmluZyhuYW1lKX1cImApO1xuXG4gIGxldCBtZXRhID0gY29uc3RhbnRzLmdldFNlcmlhbGl6YWJsZTxUZW1wbGF0ZU1ldGE+KF9tZXRhKTtcbiAgbGV0IG91dGVyU3ltYm9scyA9IGNvbnN0YW50cy5nZXRTdHJpbmdBcnJheShfc3ltYm9scyk7XG4gIGxldCBldmFsSW5mbyA9IGNvbnN0YW50cy5nZXRBcnJheShfZXZhbEluZm8pO1xuXG4gIGxldCBoYW5kbGUgPSByZXNvbHZlci5sb29rdXBQYXJ0aWFsKG5hbWUgYXMgc3RyaW5nLCBtZXRhKTtcblxuICBhc3NlcnQoaGFuZGxlLCBgQ291bGQgbm90IGZpbmQgYSBwYXJ0aWFsIG5hbWVkIFwiJHtuYW1lfVwiYCk7XG5cbiAgbGV0IGRlZmluaXRpb24gPSByZXNvbHZlci5yZXNvbHZlPFBhcnRpYWxEZWZpbml0aW9uPihoYW5kbGUhKTtcblxuICBsZXQgeyBzeW1ib2xUYWJsZSwgaGFuZGxlOiB2bUhhbmRsZSB9ID0gZGVmaW5pdGlvbi5nZXRQYXJ0aWFsKCk7XG5cbiAge1xuICAgIGxldCBwYXJ0aWFsU3ltYm9scyA9IHN5bWJvbFRhYmxlLnN5bWJvbHM7XG4gICAgbGV0IG91dGVyU2NvcGUgPSB2bS5zY29wZSgpO1xuICAgIGxldCBwYXJ0aWFsU2NvcGUgPSB2bS5wdXNoUm9vdFNjb3BlKHBhcnRpYWxTeW1ib2xzLmxlbmd0aCwgZmFsc2UpO1xuICAgIGxldCBldmFsU2NvcGUgPSBvdXRlclNjb3BlLmdldEV2YWxTY29wZSgpO1xuICAgIHBhcnRpYWxTY29wZS5iaW5kQ2FsbGVyU2NvcGUob3V0ZXJTY29wZS5nZXRDYWxsZXJTY29wZSgpKTtcbiAgICBwYXJ0aWFsU2NvcGUuYmluZEV2YWxTY29wZShldmFsU2NvcGUpO1xuICAgIHBhcnRpYWxTY29wZS5iaW5kU2VsZihvdXRlclNjb3BlLmdldFNlbGYoKSk7XG5cbiAgICBsZXQgbG9jYWxzID0gT2JqZWN0LmNyZWF0ZShvdXRlclNjb3BlLmdldFBhcnRpYWxNYXAoKSkgYXMgRGljdDxWZXJzaW9uZWRQYXRoUmVmZXJlbmNlPE9wYXF1ZT4+O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmFsSW5mby5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHNsb3QgPSBldmFsSW5mb1tpXTtcbiAgICAgIGxldCBuYW1lID0gb3V0ZXJTeW1ib2xzW3Nsb3QgLSAxXTtcbiAgICAgIGxldCByZWYgID0gb3V0ZXJTY29wZS5nZXRTeW1ib2woc2xvdCk7XG4gICAgICBsb2NhbHNbbmFtZV0gPSByZWY7XG4gICAgfVxuXG4gICAgaWYgKGV2YWxTY29wZSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXJ0aWFsU3ltYm9scy5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgbmFtZSA9IHBhcnRpYWxTeW1ib2xzW2ldO1xuICAgICAgICBsZXQgc3ltYm9sID0gaSArIDE7XG4gICAgICAgIGxldCB2YWx1ZSA9IGV2YWxTY29wZVtuYW1lXTtcblxuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkgcGFydGlhbFNjb3BlLmJpbmQoc3ltYm9sLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcGFydGlhbFNjb3BlLmJpbmRQYXJ0aWFsTWFwKGxvY2Fscyk7XG5cbiAgICB2bS5wdXNoRnJhbWUoKTsgLy8gc3AgKz0gMlxuICAgIHZtLmNhbGwodm1IYW5kbGUhKTtcbiAgfVxuXG4gIGV4cGVjdFN0YWNrQ2hhbmdlKHZtLnN0YWNrLCAxLCAnSW52b2tlUGFydGlhbCcpO1xufSk7XG4iXX0=","import { ReferenceIterator } from '@glimmer/reference';\nimport { APPEND_OPCODES } from '../../opcodes';\n\nclass IterablePresenceReference {\n    constructor(artifacts) {\n        this.tag = artifacts.tag;\n        this.artifacts = artifacts;\n    }\n    value() {\n        return !this.artifacts.isEmpty();\n    }\n}\nAPPEND_OPCODES.add(54 /* PutIterator */, vm => {\n    let stack = vm.stack;\n    let listRef = stack.pop();\n    let key = stack.pop();\n    let iterable = vm.env.iterableFor(listRef, key.value());\n    let iterator = new ReferenceIterator(iterable);\n    stack.push(iterator);\n    stack.push(new IterablePresenceReference(iterator.artifacts));\n});\nAPPEND_OPCODES.add(52 /* EnterList */, (vm, { op1: relativeStart }) => {\n    vm.enterList(relativeStart);\n});\nAPPEND_OPCODES.add(53 /* ExitList */, vm => {\n    vm.exitList();\n});\nAPPEND_OPCODES.add(55 /* Iterate */, (vm, { op1: breaks }) => {\n    let stack = vm.stack;\n    let item = stack.peek().next();\n    if (item) {\n        let tryOpcode = vm.iterate(item.memo, item.value);\n        vm.enterItem(item.key, tryOpcode);\n    } else {\n        vm.goto(breaks);\n    }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9ydW50aW1lL2xpYi9jb21waWxlZC9vcGNvZGVzL2xpc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEFBQU8sU0FHTCxBQUFpQixBQUVsQix5QkFBTSxBQUFvQixBQUFDO0FBQzVCLEFBQU8sU0FBRSxBQUFjLEFBQUUsc0JBQU0sQUFBZSxBQUFDLEFBQy9DLEFBQU8sQUFBRSxBQUFrQixBQUFFLEFBQU0sQUFBZ0IsQUFBQyxBQUNwRCxBQUFPLEFBQUUsQUFBSyxBQUFFLEFBQWlCLEFBQUUsQUFBZSxBQUFFLEFBQU0sQUFBZ0IsQUFBQzs7QUFFM0U7QUFJRSxnQkFBWSxBQUE2QjtBQUN2QyxBQUFJLGFBQUMsQUFBRyxNQUFHLEFBQVMsVUFBQyxBQUFHLEFBQUM7QUFDekIsQUFBSSxhQUFDLEFBQVMsWUFBRyxBQUFTLEFBQUMsQUFDN0I7QUFBQztBQUVELEFBQUs7QUFDSCxBQUFNLGVBQUMsQ0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQU8sQUFBRSxBQUFDLEFBQ25DO0FBQUMsQUFDRjs7QUFFRCxBQUFjLGVBQUMsQUFBRywwQkFBaUIsQUFBRTtBQUNuQyxRQUFJLEFBQUssUUFBRyxBQUFFLEdBQUMsQUFBSyxBQUFDO0FBQ3JCLFFBQUksQUFBTyxBQUFHLEFBQUssVUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFFLEFBQUUsQUFBa0IsQUFBQyxBQUFDO0FBQ3JELFFBQUksQUFBRyxBQUFHLEFBQUssTUFBQyxBQUFLLE1BQUMsQUFBRyxBQUFFLEFBQUUsQUFBa0IsQUFBQyxBQUFDO0FBQ2pELFFBQUksQUFBUSxXQUFHLEFBQUUsR0FBQyxBQUFHLElBQUMsQUFBVyxZQUFDLEFBQU8sU0FBRSxBQUFHLElBQUMsQUFBSyxBQUFFLEFBQUMsQUFBQztBQUN4RCxRQUFJLEFBQVEsV0FBRyxJQUFJLEFBQWlCLGtCQUFDLEFBQVEsQUFBQyxBQUFDO0FBRS9DLEFBQUssVUFBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLEFBQUM7QUFDckIsQUFBSyxVQUFDLEFBQUksS0FBQyxJQUFJLEFBQXlCLDBCQUFDLEFBQVEsU0FBQyxBQUFTLEFBQUMsQUFBQyxBQUFDLEFBQ2hFO0FBQUMsQUFBQyxBQUFDO0FBRUgsQUFBYyxlQUFDLEFBQUcsd0JBQWUsQ0FBQyxBQUFFLElBQUUsRUFBRSxBQUFHLEtBQUUsQUFBYSxBQUFFO0FBQzFELEFBQUUsT0FBQyxBQUFTLFVBQUMsQUFBYSxBQUFDLEFBQUMsQUFDOUI7QUFBQyxBQUFDLEFBQUM7QUFFSCxBQUFjLGVBQUMsQUFBRyx1QkFBYyxBQUFFO0FBQ2hDLEFBQUUsT0FBQyxBQUFRLEFBQUUsQUFBQyxBQUNoQjtBQUFDLEFBQUMsQUFBQztBQUVILEFBQWMsZUFBQyxBQUFHLHNCQUFhLENBQUMsQUFBRSxJQUFFLEVBQUUsQUFBRyxLQUFFLEFBQU0sQUFBRTtBQUNqRCxRQUFJLEFBQUssUUFBRyxBQUFFLEdBQUMsQUFBSyxBQUFDO0FBQ3JCLFFBQUksQUFBSSxPQUFTLEFBQUssTUFBQyxBQUFJLEFBQUUsQUFBRSxBQUFlLEFBQUMsQUFBaUIsQUFBQyxBQUFDLE1BQXZELEFBQUssQ0FBbUQsQUFBSSxBQUFFLEFBQUM7QUFFMUUsQUFBRSxBQUFDLFFBQUMsQUFBSSxBQUFDLE1BQUMsQUFBQztBQUNULFlBQUksQUFBUyxZQUFHLEFBQUUsR0FBQyxBQUFPLFFBQUMsQUFBSSxLQUFDLEFBQUksTUFBRSxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUM7QUFDbEQsQUFBRSxXQUFDLEFBQVMsVUFBQyxBQUFJLEtBQUMsQUFBRyxLQUFFLEFBQVMsQUFBQyxBQUFDLEFBQ3BDO0FBQUMsQUFBQyxBQUFJLFdBQUMsQUFBQztBQUNOLEFBQUUsV0FBQyxBQUFJLEtBQUMsQUFBTSxBQUFDLEFBQUMsQUFDbEI7QUFBQyxBQUVELEFBQWlCLEFBQUMsQUFBRSxBQUFDLEFBQUssQUFBRSxBQUFJLEFBQUcsQUFBQyxBQUFHLEFBQUMsQUFBRSxBQUFTLEFBQUMsQUFBQyxBQUN2RDtBQUFDLEFBQUMsQUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wIH0gZnJvbSAnQGdsaW1tZXIvdm0nO1xuaW1wb3J0IHtcbiAgSXRlcmF0aW9uQXJ0aWZhY3RzLFxuICBSZWZlcmVuY2UsXG4gIFJlZmVyZW5jZUl0ZXJhdG9yLFxuICBUYWdcbn0gZnJvbSAnQGdsaW1tZXIvcmVmZXJlbmNlJztcbmltcG9ydCB7IEFQUEVORF9PUENPREVTIH0gZnJvbSAnLi4vLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBDaGVja1BhdGhSZWZlcmVuY2UgfSBmcm9tICcuLy1kZWJ1Zy1zdHJpcCc7XG5pbXBvcnQgeyBjaGVjaywgZXhwZWN0U3RhY2tDaGFuZ2UsIENoZWNrSW5zdGFuY2VvZiB9IGZyb20gXCJAZ2xpbW1lci9kZWJ1Z1wiO1xuXG5jbGFzcyBJdGVyYWJsZVByZXNlbmNlUmVmZXJlbmNlIGltcGxlbWVudHMgUmVmZXJlbmNlPGJvb2xlYW4+IHtcbiAgcHVibGljIHRhZzogVGFnO1xuICBwcml2YXRlIGFydGlmYWN0czogSXRlcmF0aW9uQXJ0aWZhY3RzO1xuXG4gIGNvbnN0cnVjdG9yKGFydGlmYWN0czogSXRlcmF0aW9uQXJ0aWZhY3RzKSB7XG4gICAgdGhpcy50YWcgPSBhcnRpZmFjdHMudGFnO1xuICAgIHRoaXMuYXJ0aWZhY3RzID0gYXJ0aWZhY3RzO1xuICB9XG5cbiAgdmFsdWUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmFydGlmYWN0cy5pc0VtcHR5KCk7XG4gIH1cbn1cblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLlB1dEl0ZXJhdG9yLCB2bSA9PiB7XG4gIGxldCBzdGFjayA9IHZtLnN0YWNrO1xuICBsZXQgbGlzdFJlZiA9IGNoZWNrKHN0YWNrLnBvcCgpLCBDaGVja1BhdGhSZWZlcmVuY2UpO1xuICBsZXQga2V5ID0gY2hlY2soc3RhY2sucG9wKCksIENoZWNrUGF0aFJlZmVyZW5jZSk7XG4gIGxldCBpdGVyYWJsZSA9IHZtLmVudi5pdGVyYWJsZUZvcihsaXN0UmVmLCBrZXkudmFsdWUoKSk7XG4gIGxldCBpdGVyYXRvciA9IG5ldyBSZWZlcmVuY2VJdGVyYXRvcihpdGVyYWJsZSk7XG5cbiAgc3RhY2sucHVzaChpdGVyYXRvcik7XG4gIHN0YWNrLnB1c2gobmV3IEl0ZXJhYmxlUHJlc2VuY2VSZWZlcmVuY2UoaXRlcmF0b3IuYXJ0aWZhY3RzKSk7XG59KTtcblxuQVBQRU5EX09QQ09ERVMuYWRkKE9wLkVudGVyTGlzdCwgKHZtLCB7IG9wMTogcmVsYXRpdmVTdGFydCB9KSA9PiB7XG4gIHZtLmVudGVyTGlzdChyZWxhdGl2ZVN0YXJ0KTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuRXhpdExpc3QsIHZtID0+IHtcbiAgdm0uZXhpdExpc3QoKTtcbn0pO1xuXG5BUFBFTkRfT1BDT0RFUy5hZGQoT3AuSXRlcmF0ZSwgKHZtLCB7IG9wMTogYnJlYWtzIH0pID0+IHtcbiAgbGV0IHN0YWNrID0gdm0uc3RhY2s7XG4gIGxldCBpdGVtID0gY2hlY2soc3RhY2sucGVlaygpLCBDaGVja0luc3RhbmNlb2YoUmVmZXJlbmNlSXRlcmF0b3IpKS5uZXh0KCk7XG5cbiAgaWYgKGl0ZW0pIHtcbiAgICBsZXQgdHJ5T3Bjb2RlID0gdm0uaXRlcmF0ZShpdGVtLm1lbW8sIGl0ZW0udmFsdWUpO1xuICAgIHZtLmVudGVySXRlbShpdGVtLmtleSwgdHJ5T3Bjb2RlKTtcbiAgfSBlbHNlIHtcbiAgICB2bS5nb3RvKGJyZWFrcyk7XG4gIH1cblxuICBleHBlY3RTdGFja0NoYW5nZSh2bS5zdGFjaywgaXRlbSA/IDIgOiAwLCAnSXRlcmF0ZScpO1xufSk7XG4iXX0=","export class Cursor {\n    constructor(element, nextSibling) {\n        this.element = element;\n        this.nextSibling = nextSibling;\n    }\n}\nexport class ConcreteBounds {\n    constructor(parentNode, first, last) {\n        this.parentNode = parentNode;\n        this.first = first;\n        this.last = last;\n    }\n    parentElement() {\n        return this.parentNode;\n    }\n    firstNode() {\n        return this.first;\n    }\n    lastNode() {\n        return this.last;\n    }\n}\nexport class SingleNodeBounds {\n    constructor(parentNode, node) {\n        this.parentNode = parentNode;\n        this.node = node;\n    }\n    parentElement() {\n        return this.parentNode;\n    }\n    firstNode() {\n        return this.node;\n    }\n    lastNode() {\n        return this.node;\n    }\n}\nexport function bounds(parent, first, last) {\n    return new ConcreteBounds(parent, first, last);\n}\nexport function single(parent, node) {\n    return new SingleNodeBounds(parent, node);\n}\nexport function move(bounds, reference) {\n    let parent = bounds.parentElement();\n    let first = bounds.firstNode();\n    let last = bounds.lastNode();\n    let node = first;\n    while (node) {\n        let next = node.nextSibling;\n        parent.insertBefore(node, reference);\n        if (node === last) return next;\n        node = next;\n    }\n    return null;\n}\nexport function clear(bounds) {\n    let parent = bounds.parentElement();\n    let first = bounds.firstNode();\n    let last = bounds.lastNode();\n    let node = first;\n    while (node) {\n        let next = node.nextSibling;\n        parent.removeChild(node);\n        if (node === last) return next;\n        node = next;\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvYm91bmRzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLEFBQU07QUFDSixnQkFBbUIsQUFBdUIsU0FBUyxBQUFnQztBQUFoRSxhQUFPLFVBQVAsQUFBTyxBQUFnQjtBQUFTLGFBQVcsY0FBWCxBQUFXLEFBQXFCLEFBQUc7QUFBQyxBQUN4Rjs7QUFNRCxBQUFNO0FBQ0osZ0JBQW1CLEFBQTBCLFlBQVUsQUFBMEIsT0FBVSxBQUF5QjtBQUFqRyxhQUFVLGFBQVYsQUFBVSxBQUFnQjtBQUFVLGFBQUssUUFBTCxBQUFLLEFBQXFCO0FBQVUsYUFBSSxPQUFKLEFBQUksQUFBcUIsQUFBRztBQUFDO0FBRXhILEFBQWE7QUFBSyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQVUsQUFBQyxBQUFDO0FBQUM7QUFDM0MsQUFBUztBQUFLLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSyxBQUFDLEFBQUM7QUFBQztBQUNsQyxBQUFRO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUFDLEFBQ2pDOztBQUVELEFBQU07QUFFSixnQkFBb0IsQUFBMEIsWUFDMUIsQUFBaUI7QUFEakIsYUFBVSxhQUFWLEFBQVUsQUFBZ0I7QUFDMUIsYUFBSSxPQUFKLEFBQUksQUFBYSxBQUNyQztBQUFDO0FBRUQsQUFBYTtBQUFLLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBVSxBQUFDLEFBQUM7QUFBQztBQUMzQyxBQUFTO0FBQUssQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFJLEFBQUMsQUFBQztBQUFDO0FBQ2pDLEFBQVE7QUFBSyxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksQUFBQyxBQUFDO0FBQUMsQUFDakM7O0FBRUQsQUFBTSx1QkFBaUIsQUFBc0IsUUFBRSxBQUFrQixPQUFFLEFBQWlCO0FBQ2xGLEFBQU0sV0FBQyxJQUFJLEFBQWMsZUFBQyxBQUFNLFFBQUUsQUFBSyxPQUFFLEFBQUksQUFBQyxBQUFDLEFBQ2pEO0FBQUM7QUFFRCxBQUFNLHVCQUFpQixBQUFzQixRQUFFLEFBQWlCO0FBQzlELEFBQU0sV0FBQyxJQUFJLEFBQWdCLGlCQUFDLEFBQU0sUUFBRSxBQUFJLEFBQUMsQUFBQyxBQUM1QztBQUFDO0FBRUQsQUFBTSxxQkFBZSxBQUFjLFFBQUUsQUFBOEI7QUFDakUsUUFBSSxBQUFNLFNBQUcsQUFBTSxPQUFDLEFBQWEsQUFBRSxBQUFDO0FBQ3BDLFFBQUksQUFBSyxRQUFHLEFBQU0sT0FBQyxBQUFTLEFBQUUsQUFBQztBQUMvQixRQUFJLEFBQUksT0FBRyxBQUFNLE9BQUMsQUFBUSxBQUFFLEFBQUM7QUFFN0IsUUFBSSxBQUFJLE9BQXdCLEFBQUssQUFBQztBQUV0QyxXQUFPLEFBQUksTUFBRSxBQUFDO0FBQ1osWUFBSSxBQUFJLE9BQUcsQUFBSSxLQUFDLEFBQVcsQUFBQztBQUM1QixBQUFNLGVBQUMsQUFBWSxhQUFDLEFBQUksTUFBRSxBQUFTLEFBQUMsQUFBQztBQUNyQyxBQUFFLEFBQUMsWUFBQyxBQUFJLFNBQUssQUFBSSxBQUFDLE1BQUMsQUFBTSxPQUFDLEFBQUksQUFBQztBQUMvQixBQUFJLGVBQUcsQUFBSSxBQUFDLEFBQ2Q7QUFBQztBQUVELEFBQU0sV0FBQyxBQUFJLEFBQUMsQUFDZDtBQUFDO0FBRUQsQUFBTSxzQkFBZ0IsQUFBYztBQUNsQyxRQUFJLEFBQU0sU0FBRyxBQUFNLE9BQUMsQUFBYSxBQUFFLEFBQUM7QUFDcEMsUUFBSSxBQUFLLFFBQUcsQUFBTSxPQUFDLEFBQVMsQUFBRSxBQUFDO0FBQy9CLFFBQUksQUFBSSxPQUFHLEFBQU0sT0FBQyxBQUFRLEFBQUUsQUFBQztBQUU3QixRQUFJLEFBQUksT0FBd0IsQUFBSyxBQUFDO0FBRXRDLFdBQU8sQUFBSSxNQUFFLEFBQUM7QUFDWixZQUFJLEFBQUksT0FBRyxBQUFJLEtBQUMsQUFBVyxBQUFDO0FBQzVCLEFBQU0sZUFBQyxBQUFXLFlBQUMsQUFBSSxBQUFDLEFBQUM7QUFDekIsQUFBRSxBQUFDLFlBQUMsQUFBSSxTQUFLLEFBQUksQUFBQyxNQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFDL0IsQUFBSSxlQUFHLEFBQUksQUFBQyxBQUNkO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBSSxBQUFDLEFBQ2Q7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNpbXBsZSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgT3B0aW9uLCBEZXN0cm95YWJsZSB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEJvdW5kcyB7XG4gIC8vIGEgbWV0aG9kIHRvIGZ1dHVyZS1wcm9vZiBmb3Igd29ybWhvbGluZzsgbWF5IG5vdCBiZSBuZWVkZWQgdWx0aW1hdGVseVxuICBwYXJlbnRFbGVtZW50KCk6IFNpbXBsZS5FbGVtZW50O1xuICBmaXJzdE5vZGUoKTogT3B0aW9uPFNpbXBsZS5Ob2RlPjtcbiAgbGFzdE5vZGUoKTogT3B0aW9uPFNpbXBsZS5Ob2RlPjtcbn1cblxuZXhwb3J0IGNsYXNzIEN1cnNvciB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBlbGVtZW50OiBTaW1wbGUuRWxlbWVudCwgcHVibGljIG5leHRTaWJsaW5nOiBPcHRpb248U2ltcGxlLk5vZGU+KSB7fVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb3VuZHM7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGVzdHJveWFibGVCb3VuZHMgZXh0ZW5kcyBCb3VuZHMsIERlc3Ryb3lhYmxlIHt9XG5cbmV4cG9ydCBjbGFzcyBDb25jcmV0ZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBwYXJlbnROb2RlOiBTaW1wbGUuRWxlbWVudCwgcHJpdmF0ZSBmaXJzdDogT3B0aW9uPFNpbXBsZS5Ob2RlPiwgcHJpdmF0ZSBsYXN0OiBPcHRpb248U2ltcGxlLk5vZGU+KSB7fVxuXG4gIHBhcmVudEVsZW1lbnQoKSB7IHJldHVybiB0aGlzLnBhcmVudE5vZGU7IH1cbiAgZmlyc3ROb2RlKCkgeyByZXR1cm4gdGhpcy5maXJzdDsgfVxuICBsYXN0Tm9kZSgpIHsgcmV0dXJuIHRoaXMubGFzdDsgfVxufVxuXG5leHBvcnQgY2xhc3MgU2luZ2xlTm9kZUJvdW5kcyBpbXBsZW1lbnRzIEJvdW5kcyB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBwYXJlbnROb2RlOiBTaW1wbGUuRWxlbWVudCxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBub2RlOiBTaW1wbGUuTm9kZSkge1xuICB9XG5cbiAgcGFyZW50RWxlbWVudCgpIHsgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTsgfVxuICBmaXJzdE5vZGUoKSB7IHJldHVybiB0aGlzLm5vZGU7IH1cbiAgbGFzdE5vZGUoKSB7IHJldHVybiB0aGlzLm5vZGU7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kcyhwYXJlbnQ6IFNpbXBsZS5FbGVtZW50LCBmaXJzdDogU2ltcGxlLk5vZGUsIGxhc3Q6IFNpbXBsZS5Ob2RlKTogQ29uY3JldGVCb3VuZHMge1xuICByZXR1cm4gbmV3IENvbmNyZXRlQm91bmRzKHBhcmVudCwgZmlyc3QsIGxhc3QpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2luZ2xlKHBhcmVudDogU2ltcGxlLkVsZW1lbnQsIG5vZGU6IFNpbXBsZS5Ob2RlKTogU2luZ2xlTm9kZUJvdW5kcyB7XG4gIHJldHVybiBuZXcgU2luZ2xlTm9kZUJvdW5kcyhwYXJlbnQsIG5vZGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbW92ZShib3VuZHM6IEJvdW5kcywgcmVmZXJlbmNlOiBPcHRpb248U2ltcGxlLk5vZGU+KSB7XG4gIGxldCBwYXJlbnQgPSBib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICBsZXQgZmlyc3QgPSBib3VuZHMuZmlyc3ROb2RlKCk7XG4gIGxldCBsYXN0ID0gYm91bmRzLmxhc3ROb2RlKCk7XG5cbiAgbGV0IG5vZGU6IE9wdGlvbjxTaW1wbGUuTm9kZT4gPSBmaXJzdDtcblxuICB3aGlsZSAobm9kZSkge1xuICAgIGxldCBuZXh0ID0gbm9kZS5uZXh0U2libGluZztcbiAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZmVyZW5jZSk7XG4gICAgaWYgKG5vZGUgPT09IGxhc3QpIHJldHVybiBuZXh0O1xuICAgIG5vZGUgPSBuZXh0O1xuICB9XG5cbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhcihib3VuZHM6IEJvdW5kcyk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICBsZXQgcGFyZW50ID0gYm91bmRzLnBhcmVudEVsZW1lbnQoKTtcbiAgbGV0IGZpcnN0ID0gYm91bmRzLmZpcnN0Tm9kZSgpO1xuICBsZXQgbGFzdCA9IGJvdW5kcy5sYXN0Tm9kZSgpO1xuXG4gIGxldCBub2RlOiBPcHRpb248U2ltcGxlLk5vZGU+ID0gZmlyc3Q7XG5cbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBsZXQgbmV4dCA9IG5vZGUubmV4dFNpYmxpbmc7XG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIGlmIChub2RlID09PSBsYXN0KSByZXR1cm4gbmV4dDtcbiAgICBub2RlID0gbmV4dDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuIl19","import { ConcreteBounds } from '../bounds';\nimport { moveNodesBefore } from '../dom/helper';\n\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n// Patch:    insertAdjacentHTML on SVG Fix\n// Browsers: Safari, IE, Edge, Firefox ~33-34\n// Reason:   insertAdjacentHTML does not exist on SVG elements in Safari. It is\n//           present but throws an exception on IE and Edge. Old versions of\n//           Firefox create nodes in the incorrect namespace.\n// Fix:      Since IE and Edge silently fail to create SVG nodes using\n//           innerHTML, and because Firefox may create nodes in the incorrect\n//           namespace using innerHTML on SVG elements, an HTML-string wrapping\n//           approach is used. A pre/post SVG tag is added to the string, then\n//           that whole string is added to a div. The created nodes are plucked\n//           out and applied to the target location on DOM.\nexport function applySVGInnerHTMLFix(document, DOMClass, svgNamespace) {\n    if (!document) return DOMClass;\n    if (!shouldApplyFix(document, svgNamespace)) {\n        return DOMClass;\n    }\n    let div = document.createElement('div');\n    return class DOMChangesWithSVGInnerHTMLFix extends DOMClass {\n        insertHTMLBefore(parent, nextSibling, html) {\n            if (html === null || html === '') {\n                return super.insertHTMLBefore(parent, nextSibling, html);\n            }\n            if (parent.namespaceURI !== svgNamespace) {\n                return super.insertHTMLBefore(parent, nextSibling, html);\n            }\n            return fixSVG(parent, div, html, nextSibling);\n        }\n    };\n}\nfunction fixSVG(parent, div, html, reference) {\n    // IE, Edge: also do not correctly support using `innerHTML` on SVG\n    // namespaced elements. So here a wrapper is used.\n    let wrappedHtml = '<svg>' + html + '</svg>';\n    div.innerHTML = wrappedHtml;\n    let [first, last] = moveNodesBefore(div.firstChild, parent, reference);\n    return new ConcreteBounds(parent, first, last);\n}\nfunction shouldApplyFix(document, svgNamespace) {\n    let svg = document.createElementNS(svgNamespace, 'svg');\n    try {\n        svg['insertAdjacentHTML']('beforeend', '<circle></circle>');\n    } catch (e) {\n        // IE, Edge: Will throw, insertAdjacentHTML is unsupported on SVG\n        // Safari: Will throw, insertAdjacentHTML is not present on SVG\n    } finally {\n        // FF: Old versions will create a node in the wrong namespace\n        if (svg.childNodes.length === 1 && svg.firstChild.namespaceURI === SVG_NAMESPACE) {\n            // The test worked as expected, no fix required\n            return false;\n        }\n        return true;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWlubmVyLWh0bWwtZml4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGF0L3N2Zy1pbm5lci1odG1sLWZpeC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxBQUFPLFNBQVUsQUFBYyxBQUFFLHNCQUFNLEFBQVcsQUFBQztBQUNuRCxBQUFPLFNBQUUsQUFBZSxBQUFpQix1QkFBTSxBQUFlLEFBQUMsQUFDL0QsQUFBTyxBQUFVLEFBQU0sQUFBRSxBQUFNLEFBQWUsQUFBQzs7QUFFL0MsQUFBTSxPQUFDLE1BQU0sQUFBYSxnQkFBRyxBQUE0QixBQUFDO0FBRzFELEFBQTBDO0FBQzFDLEFBQTZDO0FBQzdDLEFBQStFO0FBQy9FLEFBQTRFO0FBQzVFLEFBQTZEO0FBQzdELEFBQXNFO0FBQ3RFLEFBQTZFO0FBQzdFLEFBQStFO0FBQy9FLEFBQThFO0FBQzlFLEFBQStFO0FBQy9FLEFBQTJEO0FBQzNELEFBQU0scUNBQStCLEFBQTBCLFVBQUUsQUFBOEIsVUFBRSxBQUEyQjtBQUMxSCxBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQVEsQUFBQyxVQUFDLEFBQU0sT0FBQyxBQUFRLEFBQUM7QUFFL0IsQUFBRSxBQUFDLFFBQUMsQ0FBQyxBQUFjLGVBQUMsQUFBUSxVQUFFLEFBQVksQUFBQyxBQUFDLGVBQUMsQUFBQztBQUM1QyxBQUFNLGVBQUMsQUFBUSxBQUFDLEFBQ2xCO0FBQUM7QUFFRCxRQUFJLEFBQUcsTUFBRyxBQUFRLFNBQUMsQUFBYSxjQUFDLEFBQUssQUFBQyxBQUFDO0FBRXhDLEFBQU0sV0FBQyxNQUFvQyxzQ0FBUSxBQUFRO0FBQ3pELEFBQWdCLHlCQUFDLEFBQW1CLFFBQUUsQUFBaUIsYUFBRSxBQUFZO0FBQ25FLEFBQUUsQUFBQyxnQkFBQyxBQUFJLFNBQUssQUFBSSxRQUFJLEFBQUksU0FBSyxBQUFFLEFBQUMsSUFBQyxBQUFDO0FBQ2pDLEFBQU0sdUJBQUMsQUFBSyxNQUFDLEFBQWdCLGlCQUFDLEFBQU0sUUFBRSxBQUFXLGFBQUUsQUFBSSxBQUFDLEFBQUMsQUFDM0Q7QUFBQztBQUVELEFBQUUsQUFBQyxnQkFBQyxBQUFNLE9BQUMsQUFBWSxpQkFBSyxBQUFZLEFBQUMsY0FBQyxBQUFDO0FBQ3pDLEFBQU0sdUJBQUMsQUFBSyxNQUFDLEFBQWdCLGlCQUFDLEFBQU0sUUFBRSxBQUFXLGFBQUUsQUFBSSxBQUFDLEFBQUMsQUFDM0Q7QUFBQztBQUVELEFBQU0sbUJBQUMsQUFBTSxPQUFDLEFBQU0sUUFBRSxBQUFHLEtBQUUsQUFBSSxNQUFFLEFBQVcsQUFBQyxBQUFDLEFBQ2hEO0FBQUMsQUFDRixBQUFDLEFBQ0o7O0FBQUM7QUFFRCxnQkFBZ0IsQUFBZSxRQUFFLEFBQWdCLEtBQUUsQUFBWSxNQUFFLEFBQWU7QUFDOUUsQUFBbUU7QUFDbkUsQUFBa0Q7QUFDbEQsUUFBSSxBQUFXLGNBQUcsQUFBTyxVQUFHLEFBQUksT0FBRyxBQUFRLEFBQUM7QUFFNUMsQUFBRyxRQUFDLEFBQVMsWUFBRyxBQUFXLEFBQUM7QUFFNUIsUUFBSSxDQUFDLEFBQUssT0FBRSxBQUFJLEFBQUMsUUFBRyxBQUFlLGdCQUFDLEFBQUcsSUFBQyxBQUFrQixZQUFFLEFBQU0sUUFBRSxBQUFTLEFBQUMsQUFBQztBQUMvRSxBQUFNLFdBQUMsSUFBSSxBQUFjLGVBQUMsQUFBTSxRQUFFLEFBQUssT0FBRSxBQUFJLEFBQUMsQUFBQyxBQUNqRDtBQUFDO0FBRUQsd0JBQXdCLEFBQWtCLFVBQUUsQUFBMkI7QUFDckUsUUFBSSxBQUFHLE1BQUcsQUFBUSxTQUFDLEFBQWUsZ0JBQUMsQUFBWSxjQUFFLEFBQUssQUFBQyxBQUFDO0FBRXhELFFBQUksQUFBQztBQUNILEFBQUcsWUFBQyxBQUFvQixBQUFDLHNCQUFDLEFBQVcsYUFBRSxBQUFtQixBQUFDLEFBQUMsQUFDOUQ7QUFBQyxNQUFDLEFBQUssQUFBQyxPQUFDLEFBQUMsQUFBQyxHQUFDLEFBQUM7QUFDWCxBQUFpRTtBQUNqRSxBQUErRCxBQUNqRTtBQUFDLGNBQVMsQUFBQztBQUNULEFBQTZEO0FBQzdELEFBQUUsQUFBQyxZQUFDLEFBQUcsSUFBQyxBQUFVLFdBQUMsQUFBTSxXQUFLLEFBQUMsS0FBVyxBQUFHLElBQUMsQUFBVSxBQUFDLFVBQXRCLEFBQU0sQ0FBaUIsQUFBWSxpQkFBSyxBQUFhLEFBQUMsZUFBQyxBQUFDO0FBQ3pGLEFBQStDO0FBQy9DLEFBQU0sbUJBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQU0sZUFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDLEFBQ0g7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdW5kcywgQ29uY3JldGVCb3VuZHMgfSBmcm9tICcuLi9ib3VuZHMnO1xuaW1wb3J0IHsgbW92ZU5vZGVzQmVmb3JlLCBET01PcGVyYXRpb25zIH0gZnJvbSAnLi4vZG9tL2hlbHBlcic7XG5pbXBvcnQgeyBPcHRpb24sIHVud3JhcCB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgU1ZHX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zyc7XG5leHBvcnQgdHlwZSBTVkdfTkFNRVNQQUNFID0gdHlwZW9mIFNWR19OQU1FU1BBQ0U7XG5cbi8vIFBhdGNoOiAgICBpbnNlcnRBZGphY2VudEhUTUwgb24gU1ZHIEZpeFxuLy8gQnJvd3NlcnM6IFNhZmFyaSwgSUUsIEVkZ2UsIEZpcmVmb3ggfjMzLTM0XG4vLyBSZWFzb246ICAgaW5zZXJ0QWRqYWNlbnRIVE1MIGRvZXMgbm90IGV4aXN0IG9uIFNWRyBlbGVtZW50cyBpbiBTYWZhcmkuIEl0IGlzXG4vLyAgICAgICAgICAgcHJlc2VudCBidXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBvbiBJRSBhbmQgRWRnZS4gT2xkIHZlcnNpb25zIG9mXG4vLyAgICAgICAgICAgRmlyZWZveCBjcmVhdGUgbm9kZXMgaW4gdGhlIGluY29ycmVjdCBuYW1lc3BhY2UuXG4vLyBGaXg6ICAgICAgU2luY2UgSUUgYW5kIEVkZ2Ugc2lsZW50bHkgZmFpbCB0byBjcmVhdGUgU1ZHIG5vZGVzIHVzaW5nXG4vLyAgICAgICAgICAgaW5uZXJIVE1MLCBhbmQgYmVjYXVzZSBGaXJlZm94IG1heSBjcmVhdGUgbm9kZXMgaW4gdGhlIGluY29ycmVjdFxuLy8gICAgICAgICAgIG5hbWVzcGFjZSB1c2luZyBpbm5lckhUTUwgb24gU1ZHIGVsZW1lbnRzLCBhbiBIVE1MLXN0cmluZyB3cmFwcGluZ1xuLy8gICAgICAgICAgIGFwcHJvYWNoIGlzIHVzZWQuIEEgcHJlL3Bvc3QgU1ZHIHRhZyBpcyBhZGRlZCB0byB0aGUgc3RyaW5nLCB0aGVuXG4vLyAgICAgICAgICAgdGhhdCB3aG9sZSBzdHJpbmcgaXMgYWRkZWQgdG8gYSBkaXYuIFRoZSBjcmVhdGVkIG5vZGVzIGFyZSBwbHVja2VkXG4vLyAgICAgICAgICAgb3V0IGFuZCBhcHBsaWVkIHRvIHRoZSB0YXJnZXQgbG9jYXRpb24gb24gRE9NLlxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U1ZHSW5uZXJIVE1MRml4KGRvY3VtZW50OiBPcHRpb248RG9jdW1lbnQ+LCBET01DbGFzczogdHlwZW9mIERPTU9wZXJhdGlvbnMsIHN2Z05hbWVzcGFjZTogU1ZHX05BTUVTUEFDRSk6IHR5cGVvZiBET01PcGVyYXRpb25zIHtcbiAgaWYgKCFkb2N1bWVudCkgcmV0dXJuIERPTUNsYXNzO1xuXG4gIGlmICghc2hvdWxkQXBwbHlGaXgoZG9jdW1lbnQsIHN2Z05hbWVzcGFjZSkpIHtcbiAgICByZXR1cm4gRE9NQ2xhc3M7XG4gIH1cblxuICBsZXQgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cbiAgcmV0dXJuIGNsYXNzIERPTUNoYW5nZXNXaXRoU1ZHSW5uZXJIVE1MRml4IGV4dGVuZHMgRE9NQ2xhc3Mge1xuICAgIGluc2VydEhUTUxCZWZvcmUocGFyZW50OiBIVE1MRWxlbWVudCwgbmV4dFNpYmxpbmc6IE5vZGUsIGh0bWw6IHN0cmluZyk6IEJvdW5kcyB7XG4gICAgICBpZiAoaHRtbCA9PT0gbnVsbCB8fCBodG1sID09PSAnJykge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBhcmVudC5uYW1lc3BhY2VVUkkgIT09IHN2Z05hbWVzcGFjZSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZpeFNWRyhwYXJlbnQsIGRpdiwgaHRtbCwgbmV4dFNpYmxpbmcpO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZml4U1ZHKHBhcmVudDogRWxlbWVudCwgZGl2OiBIVE1MRWxlbWVudCwgaHRtbDogc3RyaW5nLCByZWZlcmVuY2U6IE5vZGUpOiBCb3VuZHMge1xuICAvLyBJRSwgRWRnZTogYWxzbyBkbyBub3QgY29ycmVjdGx5IHN1cHBvcnQgdXNpbmcgYGlubmVySFRNTGAgb24gU1ZHXG4gIC8vIG5hbWVzcGFjZWQgZWxlbWVudHMuIFNvIGhlcmUgYSB3cmFwcGVyIGlzIHVzZWQuXG4gIGxldCB3cmFwcGVkSHRtbCA9ICc8c3ZnPicgKyBodG1sICsgJzwvc3ZnPic7XG5cbiAgZGl2LmlubmVySFRNTCA9IHdyYXBwZWRIdG1sO1xuXG4gIGxldCBbZmlyc3QsIGxhc3RdID0gbW92ZU5vZGVzQmVmb3JlKGRpdi5maXJzdENoaWxkIGFzIE5vZGUsIHBhcmVudCwgcmVmZXJlbmNlKTtcbiAgcmV0dXJuIG5ldyBDb25jcmV0ZUJvdW5kcyhwYXJlbnQsIGZpcnN0LCBsYXN0KTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkQXBwbHlGaXgoZG9jdW1lbnQ6IERvY3VtZW50LCBzdmdOYW1lc3BhY2U6IFNWR19OQU1FU1BBQ0UpIHtcbiAgbGV0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhzdmdOYW1lc3BhY2UsICdzdmcnKTtcblxuICB0cnkge1xuICAgIHN2Z1snaW5zZXJ0QWRqYWNlbnRIVE1MJ10oJ2JlZm9yZWVuZCcsICc8Y2lyY2xlPjwvY2lyY2xlPicpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUsIEVkZ2U6IFdpbGwgdGhyb3csIGluc2VydEFkamFjZW50SFRNTCBpcyB1bnN1cHBvcnRlZCBvbiBTVkdcbiAgICAvLyBTYWZhcmk6IFdpbGwgdGhyb3csIGluc2VydEFkamFjZW50SFRNTCBpcyBub3QgcHJlc2VudCBvbiBTVkdcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyBGRjogT2xkIHZlcnNpb25zIHdpbGwgY3JlYXRlIGEgbm9kZSBpbiB0aGUgd3JvbmcgbmFtZXNwYWNlXG4gICAgaWYgKHN2Zy5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiB1bndyYXAoc3ZnLmZpcnN0Q2hpbGQpLm5hbWVzcGFjZVVSSSA9PT0gU1ZHX05BTUVTUEFDRSkge1xuICAgICAgLy8gVGhlIHRlc3Qgd29ya2VkIGFzIGV4cGVjdGVkLCBubyBmaXggcmVxdWlyZWRcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIl19","// Patch:    Adjacent text node merging fix\n// Browsers: IE, Edge, Firefox w/o inspector open\n// Reason:   These browsers will merge adjacent text nodes. For exmaple given\n//           <div>Hello</div> with div.insertAdjacentHTML(' world') browsers\n//           with proper behavior will populate div.childNodes with two items.\n//           These browsers will populate it with one merged node instead.\n// Fix:      Add these nodes to a wrapper element, then iterate the childNodes\n//           of that wrapper and move the nodes to their target location. Note\n//           that potential SVG bugs will have been handled before this fix.\n//           Note that this fix must only apply to the previous text node, as\n//           the base implementation of `insertHTMLBefore` already handles\n//           following text nodes correctly.\nexport function applyTextNodeMergingFix(document, DOMClass) {\n    if (!document) return DOMClass;\n    if (!shouldApplyFix(document)) {\n        return DOMClass;\n    }\n    return class DOMChangesWithTextNodeMergingFix extends DOMClass {\n        constructor(document) {\n            super(document);\n            this.uselessComment = document.createComment('');\n        }\n        insertHTMLBefore(parent, nextSibling, html) {\n            if (html === null) {\n                return super.insertHTMLBefore(parent, nextSibling, html);\n            }\n            let didSetUselessComment = false;\n            let nextPrevious = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n            if (nextPrevious && nextPrevious instanceof Text) {\n                didSetUselessComment = true;\n                parent.insertBefore(this.uselessComment, nextSibling);\n            }\n            let bounds = super.insertHTMLBefore(parent, nextSibling, html);\n            if (didSetUselessComment) {\n                parent.removeChild(this.uselessComment);\n            }\n            return bounds;\n        }\n    };\n}\nfunction shouldApplyFix(document) {\n    let mergingTextDiv = document.createElement('div');\n    mergingTextDiv.innerHTML = 'first';\n    mergingTextDiv.insertAdjacentHTML('beforeend', 'second');\n    if (mergingTextDiv.childNodes.length === 2) {\n        // It worked as expected, no fix required\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1ub2RlLW1lcmdpbmctZml4LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcnVudGltZS9saWIvY29tcGF0L3RleHQtbm9kZS1tZXJnaW5nLWZpeC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxBQUEyQztBQUMzQyxBQUFpRDtBQUNqRCxBQUE2RTtBQUM3RSxBQUE0RTtBQUM1RSxBQUE4RTtBQUM5RSxBQUEwRTtBQUMxRSxBQUE4RTtBQUM5RSxBQUE4RTtBQUM5RSxBQUE0RTtBQUM1RSxBQUE2RTtBQUM3RSxBQUEwRTtBQUMxRSxBQUE0QztBQUM1QyxBQUFNLHdDQUFrQyxBQUEwQixVQUFFLEFBQThCO0FBQ2hHLEFBQUUsQUFBQyxRQUFDLENBQUMsQUFBUSxBQUFDLFVBQUMsQUFBTSxPQUFDLEFBQVEsQUFBQztBQUUvQixBQUFFLEFBQUMsUUFBQyxDQUFDLEFBQWMsZUFBQyxBQUFRLEFBQUMsQUFBQyxXQUFDLEFBQUM7QUFDOUIsQUFBTSxlQUFDLEFBQVEsQUFBQyxBQUNsQjtBQUFDO0FBRUQsQUFBTSxXQUFDLE1BQXVDLHlDQUFRLEFBQVE7QUFHNUQsb0JBQVksQUFBa0I7QUFDNUIsQUFBSyxrQkFBQyxBQUFRLEFBQUMsQUFBQztBQUNoQixBQUFJLGlCQUFDLEFBQWMsaUJBQUcsQUFBUSxTQUFDLEFBQWEsY0FBQyxBQUFFLEFBQUMsQUFBQyxBQUNuRDtBQUFDO0FBRUQsQUFBZ0IseUJBQUMsQUFBbUIsUUFBRSxBQUFpQixhQUFFLEFBQVk7QUFDbkUsQUFBRSxBQUFDLGdCQUFDLEFBQUksU0FBSyxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQ2xCLEFBQU0sdUJBQUMsQUFBSyxNQUFDLEFBQWdCLGlCQUFDLEFBQU0sUUFBRSxBQUFXLGFBQUUsQUFBSSxBQUFDLEFBQUMsQUFDM0Q7QUFBQztBQUVELGdCQUFJLEFBQW9CLHVCQUFHLEFBQUssQUFBQztBQUVqQyxnQkFBSSxBQUFZLGVBQUcsQUFBVyxjQUFHLEFBQVcsWUFBQyxBQUFlLGtCQUFHLEFBQU0sT0FBQyxBQUFTLEFBQUM7QUFDaEYsQUFBRSxBQUFDLGdCQUFDLEFBQVksZ0JBQUksQUFBWSx3QkFBWSxBQUFJLEFBQUMsTUFBQyxBQUFDO0FBQ2pELEFBQW9CLHVDQUFHLEFBQUksQUFBQztBQUM1QixBQUFNLHVCQUFDLEFBQVksYUFBQyxBQUFJLEtBQUMsQUFBYyxnQkFBRSxBQUFXLEFBQUMsQUFBQyxBQUN4RDtBQUFDO0FBRUQsZ0JBQUksQUFBTSxTQUFHLEFBQUssTUFBQyxBQUFnQixpQkFBQyxBQUFNLFFBQUUsQUFBVyxhQUFFLEFBQUksQUFBQyxBQUFDO0FBRS9ELEFBQUUsQUFBQyxnQkFBQyxBQUFvQixBQUFDLHNCQUFDLEFBQUM7QUFDekIsQUFBTSx1QkFBQyxBQUFXLFlBQUMsQUFBSSxLQUFDLEFBQWMsQUFBQyxBQUFDLEFBQzFDO0FBQUM7QUFFRCxBQUFNLG1CQUFDLEFBQU0sQUFBQyxBQUNoQjtBQUFDLEFBQ0YsQUFBQyxBQUNKOztBQUFDO0FBRUQsd0JBQXdCLEFBQWtCO0FBQ3hDLFFBQUksQUFBYyxpQkFBbUIsQUFBUSxTQUFDLEFBQWEsY0FBQyxBQUFLLEFBQUMsQUFBQztBQUVuRSxBQUFjLG1CQUFDLEFBQVMsWUFBRyxBQUFPLEFBQUM7QUFDbkMsQUFBYyxtQkFBQyxBQUFrQixtQkFBQyxBQUFXLGFBQUUsQUFBUSxBQUFDLEFBQUM7QUFFekQsQUFBRSxBQUFDLFFBQUMsQUFBYyxlQUFDLEFBQVUsV0FBQyxBQUFNLFdBQUssQUFBQyxBQUFDLEdBQUMsQUFBQztBQUMzQyxBQUF5QztBQUN6QyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQU0sV0FBQyxBQUFJLEFBQUMsQUFDZDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQm91bmRzIH0gZnJvbSAnLi4vYm91bmRzJztcbmltcG9ydCB7IERPTU9wZXJhdGlvbnMgfSBmcm9tICcuLi9kb20vaGVscGVyJztcbmltcG9ydCB7IE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuXG4vLyBQYXRjaDogICAgQWRqYWNlbnQgdGV4dCBub2RlIG1lcmdpbmcgZml4XG4vLyBCcm93c2VyczogSUUsIEVkZ2UsIEZpcmVmb3ggdy9vIGluc3BlY3RvciBvcGVuXG4vLyBSZWFzb246ICAgVGhlc2UgYnJvd3NlcnMgd2lsbCBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzLiBGb3IgZXhtYXBsZSBnaXZlblxuLy8gICAgICAgICAgIDxkaXY+SGVsbG88L2Rpdj4gd2l0aCBkaXYuaW5zZXJ0QWRqYWNlbnRIVE1MKCcgd29ybGQnKSBicm93c2Vyc1xuLy8gICAgICAgICAgIHdpdGggcHJvcGVyIGJlaGF2aW9yIHdpbGwgcG9wdWxhdGUgZGl2LmNoaWxkTm9kZXMgd2l0aCB0d28gaXRlbXMuXG4vLyAgICAgICAgICAgVGhlc2UgYnJvd3NlcnMgd2lsbCBwb3B1bGF0ZSBpdCB3aXRoIG9uZSBtZXJnZWQgbm9kZSBpbnN0ZWFkLlxuLy8gRml4OiAgICAgIEFkZCB0aGVzZSBub2RlcyB0byBhIHdyYXBwZXIgZWxlbWVudCwgdGhlbiBpdGVyYXRlIHRoZSBjaGlsZE5vZGVzXG4vLyAgICAgICAgICAgb2YgdGhhdCB3cmFwcGVyIGFuZCBtb3ZlIHRoZSBub2RlcyB0byB0aGVpciB0YXJnZXQgbG9jYXRpb24uIE5vdGVcbi8vICAgICAgICAgICB0aGF0IHBvdGVudGlhbCBTVkcgYnVncyB3aWxsIGhhdmUgYmVlbiBoYW5kbGVkIGJlZm9yZSB0aGlzIGZpeC5cbi8vICAgICAgICAgICBOb3RlIHRoYXQgdGhpcyBmaXggbXVzdCBvbmx5IGFwcGx5IHRvIHRoZSBwcmV2aW91cyB0ZXh0IG5vZGUsIGFzXG4vLyAgICAgICAgICAgdGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGluc2VydEhUTUxCZWZvcmVgIGFscmVhZHkgaGFuZGxlc1xuLy8gICAgICAgICAgIGZvbGxvd2luZyB0ZXh0IG5vZGVzIGNvcnJlY3RseS5cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVRleHROb2RlTWVyZ2luZ0ZpeChkb2N1bWVudDogT3B0aW9uPERvY3VtZW50PiwgRE9NQ2xhc3M6IHR5cGVvZiBET01PcGVyYXRpb25zKTogdHlwZW9mIERPTU9wZXJhdGlvbnMge1xuICBpZiAoIWRvY3VtZW50KSByZXR1cm4gRE9NQ2xhc3M7XG5cbiAgaWYgKCFzaG91bGRBcHBseUZpeChkb2N1bWVudCkpIHtcbiAgICByZXR1cm4gRE9NQ2xhc3M7XG4gIH1cblxuICByZXR1cm4gY2xhc3MgRE9NQ2hhbmdlc1dpdGhUZXh0Tm9kZU1lcmdpbmdGaXggZXh0ZW5kcyBET01DbGFzcyB7XG4gICAgcHJpdmF0ZSB1c2VsZXNzQ29tbWVudDogQ29tbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGRvY3VtZW50OiBEb2N1bWVudCkge1xuICAgICAgc3VwZXIoZG9jdW1lbnQpO1xuICAgICAgdGhpcy51c2VsZXNzQ29tbWVudCA9IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuICAgIH1cblxuICAgIGluc2VydEhUTUxCZWZvcmUocGFyZW50OiBIVE1MRWxlbWVudCwgbmV4dFNpYmxpbmc6IE5vZGUsIGh0bWw6IHN0cmluZyk6IEJvdW5kcyB7XG4gICAgICBpZiAoaHRtbCA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gc3VwZXIuaW5zZXJ0SFRNTEJlZm9yZShwYXJlbnQsIG5leHRTaWJsaW5nLCBodG1sKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGRpZFNldFVzZWxlc3NDb21tZW50ID0gZmFsc2U7XG5cbiAgICAgIGxldCBuZXh0UHJldmlvdXMgPSBuZXh0U2libGluZyA/IG5leHRTaWJsaW5nLnByZXZpb3VzU2libGluZyA6IHBhcmVudC5sYXN0Q2hpbGQ7XG4gICAgICBpZiAobmV4dFByZXZpb3VzICYmIG5leHRQcmV2aW91cyBpbnN0YW5jZW9mIFRleHQpIHtcbiAgICAgICAgZGlkU2V0VXNlbGVzc0NvbW1lbnQgPSB0cnVlO1xuICAgICAgICBwYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMudXNlbGVzc0NvbW1lbnQsIG5leHRTaWJsaW5nKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGJvdW5kcyA9IHN1cGVyLmluc2VydEhUTUxCZWZvcmUocGFyZW50LCBuZXh0U2libGluZywgaHRtbCk7XG5cbiAgICAgIGlmIChkaWRTZXRVc2VsZXNzQ29tbWVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQodGhpcy51c2VsZXNzQ29tbWVudCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBib3VuZHM7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBzaG91bGRBcHBseUZpeChkb2N1bWVudDogRG9jdW1lbnQpIHtcbiAgbGV0IG1lcmdpbmdUZXh0RGl2OiBIVE1MRGl2RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gIG1lcmdpbmdUZXh0RGl2LmlubmVySFRNTCA9ICdmaXJzdCc7XG4gIG1lcmdpbmdUZXh0RGl2Lmluc2VydEFkamFjZW50SFRNTCgnYmVmb3JlZW5kJywgJ3NlY29uZCcpO1xuXG4gIGlmIChtZXJnaW5nVGV4dERpdi5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMikge1xuICAgIC8vIEl0IHdvcmtlZCBhcyBleHBlY3RlZCwgbm8gZml4IHJlcXVpcmVkXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4iXX0=","import { ConcreteBounds } from '../bounds';\nimport { applySVGInnerHTMLFix } from '../compat/svg-inner-html-fix';\nimport { applyTextNodeMergingFix } from '../compat/text-node-merging-fix';\nexport const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n// http://www.w3.org/TR/html/syntax.html#html-integration-point\nconst SVG_INTEGRATION_POINTS = { foreignObject: 1, desc: 1, title: 1 };\n// http://www.w3.org/TR/html/syntax.html#adjust-svg-attributes\n// TODO: Adjust SVG attributes\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\n// TODO: Adjust SVG elements\n// http://www.w3.org/TR/html/syntax.html#parsing-main-inforeign\nexport const BLACKLIST_TABLE = Object.create(null);\n[\"b\", \"big\", \"blockquote\", \"body\", \"br\", \"center\", \"code\", \"dd\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"hr\", \"i\", \"img\", \"li\", \"listing\", \"main\", \"meta\", \"nobr\", \"ol\", \"p\", \"pre\", \"ruby\", \"s\", \"small\", \"span\", \"strong\", \"strike\", \"sub\", \"sup\", \"table\", \"tt\", \"u\", \"ul\", \"var\"].forEach(tag => BLACKLIST_TABLE[tag] = 1);\nconst WHITESPACE = /[\\t-\\r \\xA0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]/;\nlet doc = typeof document === 'undefined' ? null : document;\nexport function isWhitespace(string) {\n    return WHITESPACE.test(string);\n}\nexport function moveNodesBefore(source, target, nextSibling) {\n    let first = source.firstChild;\n    let last = null;\n    let current = first;\n    while (current) {\n        last = current;\n        current = current.nextSibling;\n        target.insertBefore(last, nextSibling);\n    }\n    return [first, last];\n}\nexport class DOMOperations {\n    constructor(document) {\n        this.document = document;\n        this.setupUselessElement();\n    }\n    // split into seperate method so that NodeDOMTreeConstruction\n    // can override it.\n    setupUselessElement() {\n        this.uselessElement = this.document.createElement('div');\n    }\n    createElement(tag, context) {\n        let isElementInSVGNamespace, isHTMLIntegrationPoint;\n        if (context) {\n            isElementInSVGNamespace = context.namespaceURI === SVG_NAMESPACE || tag === 'svg';\n            isHTMLIntegrationPoint = SVG_INTEGRATION_POINTS[context.tagName];\n        } else {\n            isElementInSVGNamespace = tag === 'svg';\n            isHTMLIntegrationPoint = false;\n        }\n        if (isElementInSVGNamespace && !isHTMLIntegrationPoint) {\n            // FIXME: This does not properly handle <font> with color, face, or\n            // size attributes, which is also disallowed by the spec. We should fix\n            // this.\n            if (BLACKLIST_TABLE[tag]) {\n                throw new Error(`Cannot create a ${tag} inside an SVG context`);\n            }\n            return this.document.createElementNS(SVG_NAMESPACE, tag);\n        } else {\n            return this.document.createElement(tag);\n        }\n    }\n    insertBefore(parent, node, reference) {\n        parent.insertBefore(node, reference);\n    }\n    insertHTMLBefore(_parent, nextSibling, html) {\n        return insertHTMLBefore(this.uselessElement, _parent, nextSibling, html);\n    }\n    createTextNode(text) {\n        return this.document.createTextNode(text);\n    }\n    createComment(data) {\n        return this.document.createComment(data);\n    }\n}\nexport var DOM;\n(function (DOM) {\n    class TreeConstruction extends DOMOperations {\n        createElementNS(namespace, tag) {\n            return this.document.createElementNS(namespace, tag);\n        }\n        setAttribute(element, name, value, namespace = null) {\n            if (namespace) {\n                element.setAttributeNS(namespace, name, value);\n            } else {\n                element.setAttribute(name, value);\n            }\n        }\n    }\n    DOM.TreeConstruction = TreeConstruction;\n    let appliedTreeContruction = TreeConstruction;\n    appliedTreeContruction = applyTextNodeMergingFix(doc, appliedTreeContruction);\n    appliedTreeContruction = applySVGInnerHTMLFix(doc, appliedTreeContruction, SVG_NAMESPACE);\n    DOM.DOMTreeConstruction = appliedTreeContruction;\n})(DOM || (DOM = {}));\nexport class DOMChanges extends DOMOperations {\n    constructor(document) {\n        super(document);\n        this.document = document;\n        this.namespace = null;\n    }\n    setAttribute(element, name, value) {\n        element.setAttribute(name, value);\n    }\n    removeAttribute(element, name) {\n        element.removeAttribute(name);\n    }\n    insertAfter(element, node, reference) {\n        this.insertBefore(element, node, reference.nextSibling);\n    }\n}\nexport function insertHTMLBefore(useless, _parent, _nextSibling, html) {\n    // TypeScript vendored an old version of the DOM spec where `insertAdjacentHTML`\n    // only exists on `HTMLElement` but not on `Element`. We actually work with the\n    // newer version of the DOM API here (and monkey-patch this method in `./compat`\n    // when we detect older browsers). This is a hack to work around this limitation.\n    let parent = _parent;\n    let nextSibling = _nextSibling;\n    let prev = nextSibling ? nextSibling.previousSibling : parent.lastChild;\n    let last;\n    if (html === null || html === '') {\n        return new ConcreteBounds(parent, null, null);\n    }\n    if (nextSibling === null) {\n        parent.insertAdjacentHTML('beforeend', html);\n        last = parent.lastChild;\n    } else if (nextSibling instanceof HTMLElement) {\n        nextSibling.insertAdjacentHTML('beforebegin', html);\n        last = nextSibling.previousSibling;\n    } else {\n        // Non-element nodes do not support insertAdjacentHTML, so add an\n        // element and call it on that element. Then remove the element.\n        //\n        // This also protects Edge, IE and Firefox w/o the inspector open\n        // from merging adjacent text nodes. See ./compat/text-node-merging-fix.ts\n        parent.insertBefore(useless, nextSibling);\n        useless.insertAdjacentHTML('beforebegin', html);\n        last = useless.previousSibling;\n        parent.removeChild(useless);\n    }\n    let first = prev ? prev.nextSibling : parent.firstChild;\n    return new ConcreteBounds(parent, first, last);\n}\nlet helper = DOMChanges;\nhelper = applyTextNodeMergingFix(doc, helper);\nhelper = applySVGInnerHTMLFix(doc, helper, SVG_NAMESPACE);\nexport default helper;\nexport const DOMTreeConstruction = DOM.DOMTreeConstruction;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { normalizeStringValue, isSafeString } from '../dom/normalize';\nconst badProtocols = ['javascript:', 'vbscript:'];\nconst badTags = ['A', 'BODY', 'LINK', 'IMG', 'IFRAME', 'BASE', 'FORM'];\nconst badTagsForDataURI = ['EMBED'];\nconst badAttributes = ['href', 'src', 'background', 'action'];\nconst badAttributesForDataURI = ['src'];\nfunction has(array, item) {\n    return array.indexOf(item) !== -1;\n}\nfunction checkURI(tagName, attribute) {\n    return (tagName === null || has(badTags, tagName)) && has(badAttributes, attribute);\n}\nfunction checkDataURI(tagName, attribute) {\n    if (tagName === null) return false;\n    return has(badTagsForDataURI, tagName) && has(badAttributesForDataURI, attribute);\n}\nexport function requiresSanitization(tagName, attribute) {\n    return checkURI(tagName, attribute) || checkDataURI(tagName, attribute);\n}\nexport function sanitizeAttributeValue(env, element, attribute, value) {\n    let tagName = null;\n    if (value === null || value === undefined) {\n        return value;\n    }\n    if (isSafeString(value)) {\n        return value.toHTML();\n    }\n    if (!element) {\n        tagName = null;\n    } else {\n        tagName = element.tagName.toUpperCase();\n    }\n    let str = normalizeStringValue(value);\n    if (checkURI(tagName, attribute)) {\n        let protocol = env.protocolForURL(str);\n        if (has(badProtocols, protocol)) {\n            return `unsafe:${str}`;\n        }\n    }\n    if (checkDataURI(tagName, attribute)) {\n        return `unsafe:${str}`;\n    }\n    return str;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2FuaXRpemVkLXZhbHVlcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL2RvbS9zYW5pdGl6ZWQtdmFsdWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEFBQU8sU0FBRSxBQUFvQixzQkFBRSxBQUFZLEFBQUUsb0JBQU0sQUFBa0IsQUFBQztBQUl0RSxNQUFNLEFBQVksZUFBRyxDQUNuQixBQUFhLGVBQ2IsQUFBVyxBQUNaLEFBQUM7QUFFRixNQUFNLEFBQU8sVUFBRyxDQUNkLEFBQUcsS0FDSCxBQUFNLFFBQ04sQUFBTSxRQUNOLEFBQUssT0FDTCxBQUFRLFVBQ1IsQUFBTSxRQUNOLEFBQU0sQUFDUCxBQUFDO0FBRUYsTUFBTSxBQUFpQixvQkFBRyxDQUN4QixBQUFPLEFBQ1IsQUFBQztBQUVGLE1BQU0sQUFBYSxnQkFBRyxDQUNwQixBQUFNLFFBQ04sQUFBSyxPQUNMLEFBQVksY0FDWixBQUFRLEFBQ1QsQUFBQztBQUVGLE1BQU0sQUFBdUIsMEJBQUcsQ0FDOUIsQUFBSyxBQUNOLEFBQUM7QUFFRixhQUFhLEFBQW9CLE9BQUUsQUFBWTtBQUM3QyxBQUFNLFdBQUMsQUFBSyxNQUFDLEFBQU8sUUFBQyxBQUFJLEFBQUMsVUFBSyxDQUFDLEFBQUMsQUFBQyxBQUNwQztBQUFDO0FBRUQsa0JBQWtCLEFBQXVCLFNBQUUsQUFBaUI7QUFDMUQsQUFBTSxXQUFDLENBQUMsQUFBTyxZQUFLLEFBQUksUUFBSSxBQUFHLElBQUMsQUFBTyxTQUFFLEFBQU8sQUFBQyxBQUFDLGFBQUksQUFBRyxJQUFDLEFBQWEsZUFBRSxBQUFTLEFBQUMsQUFBQyxBQUN0RjtBQUFDO0FBRUQsc0JBQXNCLEFBQXVCLFNBQUUsQUFBaUI7QUFDOUQsQUFBRSxBQUFDLFFBQUMsQUFBTyxZQUFLLEFBQUksQUFBQyxNQUFDLEFBQU0sT0FBQyxBQUFLLEFBQUM7QUFDbkMsQUFBTSxXQUFDLEFBQUcsSUFBQyxBQUFpQixtQkFBRSxBQUFPLEFBQUMsWUFBSSxBQUFHLElBQUMsQUFBdUIseUJBQUUsQUFBUyxBQUFDLEFBQUMsQUFDcEY7QUFBQztBQUVELEFBQU0scUNBQStCLEFBQWUsU0FBRSxBQUFpQjtBQUNyRSxBQUFNLFdBQUMsQUFBUSxTQUFDLEFBQU8sU0FBRSxBQUFTLEFBQUMsY0FBSSxBQUFZLGFBQUMsQUFBTyxTQUFFLEFBQVMsQUFBQyxBQUFDLEFBQzFFO0FBQUM7QUFFRCxBQUFNLHVDQUFpQyxBQUFnQixLQUFFLEFBQXVCLFNBQUUsQUFBaUIsV0FBRSxBQUFhO0FBQ2hILFFBQUksQUFBTyxVQUFtQixBQUFJLEFBQUM7QUFFbkMsQUFBRSxBQUFDLFFBQUMsQUFBSyxVQUFLLEFBQUksUUFBSSxBQUFLLFVBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUMxQyxBQUFNLGVBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQUUsQUFBQyxRQUFDLEFBQVksYUFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQUM7QUFDeEIsQUFBTSxlQUFDLEFBQUssTUFBQyxBQUFNLEFBQUUsQUFBQyxBQUN4QjtBQUFDO0FBRUQsQUFBRSxBQUFDLFFBQUMsQ0FBQyxBQUFPLEFBQUMsU0FBQyxBQUFDO0FBQ2IsQUFBTyxrQkFBRyxBQUFJLEFBQUMsQUFDakI7QUFBQyxBQUFDLEFBQUksV0FBQyxBQUFDO0FBQ04sQUFBTyxrQkFBRyxBQUFPLFFBQUMsQUFBTyxRQUFDLEFBQVcsQUFBRSxBQUFDLEFBQzFDO0FBQUM7QUFFRCxRQUFJLEFBQUcsTUFBRyxBQUFvQixxQkFBQyxBQUFLLEFBQUMsQUFBQztBQUV0QyxBQUFFLEFBQUMsUUFBQyxBQUFRLFNBQUMsQUFBTyxTQUFFLEFBQVMsQUFBQyxBQUFDLFlBQUMsQUFBQztBQUNqQyxZQUFJLEFBQVEsV0FBRyxBQUFHLElBQUMsQUFBYyxlQUFDLEFBQUcsQUFBQyxBQUFDO0FBQ3ZDLEFBQUUsQUFBQyxZQUFDLEFBQUcsSUFBQyxBQUFZLGNBQUUsQUFBUSxBQUFDLEFBQUMsV0FBQyxBQUFDO0FBQ2hDLEFBQU0sQUFBQyw2QkFBVSxBQUFHLEdBQUUsQUFBQyxBQUN6QjtBQUFDLEFBQ0g7QUFBQztBQUVELEFBQUUsQUFBQyxRQUFDLEFBQVksYUFBQyxBQUFPLFNBQUUsQUFBUyxBQUFDLEFBQUMsWUFBQyxBQUFDO0FBQ3JDLEFBQU0sQUFBQyx5QkFBVSxBQUFHLEdBQUUsQUFBQyxBQUN6QjtBQUFDO0FBRUQsQUFBTSxXQUFDLEFBQUcsQUFBQyxBQUNiO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGFxdWUsIE9wdGlvbiB9IGZyb20gJ0BnbGltbWVyL3V0aWwnO1xuaW1wb3J0IHsgbm9ybWFsaXplU3RyaW5nVmFsdWUsIGlzU2FmZVN0cmluZyB9IGZyb20gJy4uL2RvbS9ub3JtYWxpemUnO1xuaW1wb3J0IHsgRW52aXJvbm1lbnQgfSBmcm9tICcuLi9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBTaW1wbGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuY29uc3QgYmFkUHJvdG9jb2xzID0gW1xuICAnamF2YXNjcmlwdDonLFxuICAndmJzY3JpcHQ6J1xuXTtcblxuY29uc3QgYmFkVGFncyA9IFtcbiAgJ0EnLFxuICAnQk9EWScsXG4gICdMSU5LJyxcbiAgJ0lNRycsXG4gICdJRlJBTUUnLFxuICAnQkFTRScsXG4gICdGT1JNJ1xuXTtcblxuY29uc3QgYmFkVGFnc0ZvckRhdGFVUkkgPSBbXG4gICdFTUJFRCdcbl07XG5cbmNvbnN0IGJhZEF0dHJpYnV0ZXMgPSBbXG4gICdocmVmJyxcbiAgJ3NyYycsXG4gICdiYWNrZ3JvdW5kJyxcbiAgJ2FjdGlvbidcbl07XG5cbmNvbnN0IGJhZEF0dHJpYnV0ZXNGb3JEYXRhVVJJID0gW1xuICAnc3JjJ1xuXTtcblxuZnVuY3Rpb24gaGFzKGFycmF5OiBBcnJheTxzdHJpbmc+LCBpdGVtOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuIGFycmF5LmluZGV4T2YoaXRlbSkgIT09IC0xO1xufVxuXG5mdW5jdGlvbiBjaGVja1VSSSh0YWdOYW1lOiBPcHRpb248c3RyaW5nPiwgYXR0cmlidXRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgcmV0dXJuICh0YWdOYW1lID09PSBudWxsIHx8IGhhcyhiYWRUYWdzLCB0YWdOYW1lKSkgJiYgaGFzKGJhZEF0dHJpYnV0ZXMsIGF0dHJpYnV0ZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRGF0YVVSSSh0YWdOYW1lOiBPcHRpb248c3RyaW5nPiwgYXR0cmlidXRlOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgaWYgKHRhZ05hbWUgPT09IG51bGwpIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIGhhcyhiYWRUYWdzRm9yRGF0YVVSSSwgdGFnTmFtZSkgJiYgaGFzKGJhZEF0dHJpYnV0ZXNGb3JEYXRhVVJJLCBhdHRyaWJ1dGUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVxdWlyZXNTYW5pdGl6YXRpb24odGFnTmFtZTogc3RyaW5nLCBhdHRyaWJ1dGU6IHN0cmluZyk6IGJvb2xlYW4ge1xuICByZXR1cm4gY2hlY2tVUkkodGFnTmFtZSwgYXR0cmlidXRlKSB8fCBjaGVja0RhdGFVUkkodGFnTmFtZSwgYXR0cmlidXRlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhbml0aXplQXR0cmlidXRlVmFsdWUoZW52OiBFbnZpcm9ubWVudCwgZWxlbWVudDogU2ltcGxlLkVsZW1lbnQsIGF0dHJpYnV0ZTogc3RyaW5nLCB2YWx1ZTogT3BhcXVlKTogT3BhcXVlIHtcbiAgbGV0IHRhZ05hbWU6IE9wdGlvbjxzdHJpbmc+ID0gbnVsbDtcblxuICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIGlmIChpc1NhZmVTdHJpbmcodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlLnRvSFRNTCgpO1xuICB9XG5cbiAgaWYgKCFlbGVtZW50KSB7XG4gICAgdGFnTmFtZSA9IG51bGw7XG4gIH0gZWxzZSB7XG4gICAgdGFnTmFtZSA9IGVsZW1lbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpO1xuICB9XG5cbiAgbGV0IHN0ciA9IG5vcm1hbGl6ZVN0cmluZ1ZhbHVlKHZhbHVlKTtcblxuICBpZiAoY2hlY2tVUkkodGFnTmFtZSwgYXR0cmlidXRlKSkge1xuICAgIGxldCBwcm90b2NvbCA9IGVudi5wcm90b2NvbEZvclVSTChzdHIpO1xuICAgIGlmIChoYXMoYmFkUHJvdG9jb2xzLCBwcm90b2NvbCkpIHtcbiAgICAgIHJldHVybiBgdW5zYWZlOiR7c3RyfWA7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoZWNrRGF0YVVSSSh0YWdOYW1lLCBhdHRyaWJ1dGUpKSB7XG4gICAgcmV0dXJuIGB1bnNhZmU6JHtzdHJ9YDtcbiAgfVxuXG4gIHJldHVybiBzdHI7XG59XG4iXX0=","/*\n * @method normalizeProperty\n * @param element {HTMLElement}\n * @param slotName {String}\n * @returns {Object} { name, type }\n */\nexport function normalizeProperty(element, slotName) {\n    let type, normalized;\n    if (slotName in element) {\n        normalized = slotName;\n        type = 'prop';\n    } else {\n        let lower = slotName.toLowerCase();\n        if (lower in element) {\n            type = 'prop';\n            normalized = lower;\n        } else {\n            type = 'attr';\n            normalized = slotName;\n        }\n    }\n    if (type === 'prop' && (normalized.toLowerCase() === 'style' || preferAttr(element.tagName, normalized))) {\n        type = 'attr';\n    }\n    return { normalized, type };\n}\nexport function normalizePropertyValue(value) {\n    if (value === '') {\n        return true;\n    }\n    return value;\n}\n// properties that MUST be set as attributes, due to:\n// * browser bug\n// * strange spec outlier\nconst ATTR_OVERRIDES = {\n    INPUT: {\n        form: true,\n        // Chrome 46.0.2464.0: 'autocorrect' in document.createElement('input') === false\n        // Safari 8.0.7: 'autocorrect' in document.createElement('input') === false\n        // Mobile Safari (iOS 8.4 simulator): 'autocorrect' in document.createElement('input') === true\n        autocorrect: true,\n        // Chrome 54.0.2840.98: 'list' in document.createElement('input') === true\n        // Safari 9.1.3: 'list' in document.createElement('input') === false\n        list: true\n    },\n    // element.form is actually a legitimate readOnly property, that is to be\n    // mutated, but must be mutated by setAttribute...\n    SELECT: { form: true },\n    OPTION: { form: true },\n    TEXTAREA: { form: true },\n    LABEL: { form: true },\n    FIELDSET: { form: true },\n    LEGEND: { form: true },\n    OBJECT: { form: true }\n};\nfunction preferAttr(tagName, propName) {\n    let tag = ATTR_OVERRIDES[tagName.toUpperCase()];\n    return tag && tag[propName.toLowerCase()] || false;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9ydW50aW1lL2xpYi9kb20vcHJvcHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBR0EsQUFLRzs7Ozs7O0FBQ0gsQUFBTSxrQ0FBNEIsQUFBdUIsU0FBRSxBQUFnQjtBQUN6RSxRQUFJLEFBQUksTUFBRSxBQUFVLEFBQUM7QUFFckIsQUFBRSxBQUFDLFFBQUMsQUFBUSxZQUFJLEFBQU8sQUFBQyxTQUFDLEFBQUM7QUFDeEIsQUFBVSxxQkFBRyxBQUFRLEFBQUM7QUFDdEIsQUFBSSxlQUFHLEFBQU0sQUFBQyxBQUNoQjtBQUFDLEFBQUMsQUFBSSxXQUFDLEFBQUM7QUFDTixZQUFJLEFBQUssUUFBRyxBQUFRLFNBQUMsQUFBVyxBQUFFLEFBQUM7QUFDbkMsQUFBRSxBQUFDLFlBQUMsQUFBSyxTQUFJLEFBQU8sQUFBQyxTQUFDLEFBQUM7QUFDckIsQUFBSSxtQkFBRyxBQUFNLEFBQUM7QUFDZCxBQUFVLHlCQUFHLEFBQUssQUFBQyxBQUNyQjtBQUFDLEFBQUMsQUFBSSxlQUFDLEFBQUM7QUFDTixBQUFJLG1CQUFHLEFBQU0sQUFBQztBQUNkLEFBQVUseUJBQUcsQUFBUSxBQUFDLEFBQ3hCO0FBQUMsQUFDSDtBQUFDO0FBRUQsQUFBRSxBQUFDLFFBQUMsQUFBSSxTQUFLLEFBQU0sQUFDZixXQUFDLEFBQVUsV0FBQyxBQUFXLEFBQUUsa0JBQUssQUFBTyxXQUNwQyxBQUFVLFdBQUMsQUFBTyxRQUFDLEFBQU8sU0FBRSxBQUFVLEFBQUMsQUFBQyxBQUFDLGNBQUMsQUFBQztBQUM5QyxBQUFJLGVBQUcsQUFBTSxBQUFDLEFBQ2hCO0FBQUM7QUFFRCxBQUFNLFdBQUMsRUFBRSxBQUFVLFlBQUUsQUFBSSxBQUFFLEFBQUMsQUFDOUI7QUFBQztBQUVELEFBQU0sdUNBQWlDLEFBQWE7QUFDbEQsQUFBRSxBQUFDLFFBQUMsQUFBSyxVQUFLLEFBQUUsQUFBQyxJQUFDLEFBQUM7QUFDakIsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBSyxBQUFDLEFBQ2Y7QUFBQztBQUVELEFBQXFEO0FBQ3JELEFBQWdCO0FBQ2hCLEFBQXlCO0FBQ3pCLE1BQU0sQUFBYztBQUVsQixBQUFLO0FBQ0gsQUFBSSxjQUFFLEFBQUk7QUFDVixBQUFpRjtBQUNqRixBQUEyRTtBQUMzRSxBQUErRjtBQUMvRixBQUFXLHFCQUFFLEFBQUk7QUFDakIsQUFBMEU7QUFDMUUsQUFBb0U7QUFDcEUsQUFBSSxjQUFFLEFBQUksQUFDWDtBQVRNO0FBV1AsQUFBeUU7QUFDekUsQUFBa0Q7QUFDbEQsQUFBTSxZQUFJLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRTtBQUN4QixBQUFNLFlBQUksRUFBRSxBQUFJLE1BQUUsQUFBSSxBQUFFO0FBQ3hCLEFBQVEsY0FBRSxFQUFFLEFBQUksTUFBRSxBQUFJLEFBQUU7QUFDeEIsQUFBSyxXQUFLLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRTtBQUN4QixBQUFRLGNBQUUsRUFBRSxBQUFJLE1BQUUsQUFBSSxBQUFFO0FBQ3hCLEFBQU0sWUFBSSxFQUFFLEFBQUksTUFBRSxBQUFJLEFBQUU7QUFDeEIsQUFBTSxZQUFJLEVBQUUsQUFBSSxNQUFFLEFBQUksQUFBRSxBQUN6QixBQUFDO0FBdEJxQjtBQXdCdkIsb0JBQW9CLEFBQWUsU0FBRSxBQUFnQjtBQUNuRCxRQUFJLEFBQUcsTUFBRyxBQUFjLGVBQUMsQUFBTyxRQUFDLEFBQVcsQUFBRSxBQUFDLEFBQUM7QUFDaEQsQUFBTSxXQUFDLEFBQUcsT0FBSSxBQUFHLElBQUMsQUFBUSxTQUFDLEFBQVcsQUFBRSxBQUFDLGtCQUFJLEFBQUssQUFBQyxBQUNyRDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3BhcXVlIH0gZnJvbSAnQGdsaW1tZXIvdXRpbCc7XG5pbXBvcnQgeyBTaW1wbGUgfSBmcm9tICdAZ2xpbW1lci9pbnRlcmZhY2VzJztcblxuLypcbiAqIEBtZXRob2Qgbm9ybWFsaXplUHJvcGVydHlcbiAqIEBwYXJhbSBlbGVtZW50IHtIVE1MRWxlbWVudH1cbiAqIEBwYXJhbSBzbG90TmFtZSB7U3RyaW5nfVxuICogQHJldHVybnMge09iamVjdH0geyBuYW1lLCB0eXBlIH1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZVByb3BlcnR5KGVsZW1lbnQ6IFNpbXBsZS5FbGVtZW50LCBzbG90TmFtZTogc3RyaW5nKSB7XG4gIGxldCB0eXBlLCBub3JtYWxpemVkO1xuXG4gIGlmIChzbG90TmFtZSBpbiBlbGVtZW50KSB7XG4gICAgbm9ybWFsaXplZCA9IHNsb3ROYW1lO1xuICAgIHR5cGUgPSAncHJvcCc7XG4gIH0gZWxzZSB7XG4gICAgbGV0IGxvd2VyID0gc2xvdE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAobG93ZXIgaW4gZWxlbWVudCkge1xuICAgICAgdHlwZSA9ICdwcm9wJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBsb3dlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgdHlwZSA9ICdhdHRyJztcbiAgICAgIG5vcm1hbGl6ZWQgPSBzbG90TmFtZTtcbiAgICB9XG4gIH1cblxuICBpZiAodHlwZSA9PT0gJ3Byb3AnICYmXG4gICAgICAobm9ybWFsaXplZC50b0xvd2VyQ2FzZSgpID09PSAnc3R5bGUnIHx8XG4gICAgICAgcHJlZmVyQXR0cihlbGVtZW50LnRhZ05hbWUsIG5vcm1hbGl6ZWQpKSkge1xuICAgIHR5cGUgPSAnYXR0cic7XG4gIH1cblxuICByZXR1cm4geyBub3JtYWxpemVkLCB0eXBlIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVQcm9wZXJ0eVZhbHVlKHZhbHVlOiBPcGFxdWUpOiBPcGFxdWUge1xuICBpZiAodmFsdWUgPT09ICcnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gdmFsdWU7XG59XG5cbi8vIHByb3BlcnRpZXMgdGhhdCBNVVNUIGJlIHNldCBhcyBhdHRyaWJ1dGVzLCBkdWUgdG86XG4vLyAqIGJyb3dzZXIgYnVnXG4vLyAqIHN0cmFuZ2Ugc3BlYyBvdXRsaWVyXG5jb25zdCBBVFRSX09WRVJSSURFUyA9IHtcblxuICBJTlBVVDoge1xuICAgIGZvcm06IHRydWUsXG4gICAgLy8gQ2hyb21lIDQ2LjAuMjQ2NC4wOiAnYXV0b2NvcnJlY3QnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JykgPT09IGZhbHNlXG4gICAgLy8gU2FmYXJpIDguMC43OiAnYXV0b2NvcnJlY3QnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JykgPT09IGZhbHNlXG4gICAgLy8gTW9iaWxlIFNhZmFyaSAoaU9TIDguNCBzaW11bGF0b3IpOiAnYXV0b2NvcnJlY3QnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JykgPT09IHRydWVcbiAgICBhdXRvY29ycmVjdDogdHJ1ZSxcbiAgICAvLyBDaHJvbWUgNTQuMC4yODQwLjk4OiAnbGlzdCcgaW4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW5wdXQnKSA9PT0gdHJ1ZVxuICAgIC8vIFNhZmFyaSA5LjEuMzogJ2xpc3QnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lucHV0JykgPT09IGZhbHNlXG4gICAgbGlzdDogdHJ1ZVxuICB9LFxuXG4gIC8vIGVsZW1lbnQuZm9ybSBpcyBhY3R1YWxseSBhIGxlZ2l0aW1hdGUgcmVhZE9ubHkgcHJvcGVydHksIHRoYXQgaXMgdG8gYmVcbiAgLy8gbXV0YXRlZCwgYnV0IG11c3QgYmUgbXV0YXRlZCBieSBzZXRBdHRyaWJ1dGUuLi5cbiAgU0VMRUNUOiAgIHsgZm9ybTogdHJ1ZSB9LFxuICBPUFRJT046ICAgeyBmb3JtOiB0cnVlIH0sXG4gIFRFWFRBUkVBOiB7IGZvcm06IHRydWUgfSxcbiAgTEFCRUw6ICAgIHsgZm9ybTogdHJ1ZSB9LFxuICBGSUVMRFNFVDogeyBmb3JtOiB0cnVlIH0sXG4gIExFR0VORDogICB7IGZvcm06IHRydWUgfSxcbiAgT0JKRUNUOiAgIHsgZm9ybTogdHJ1ZSB9XG59O1xuXG5mdW5jdGlvbiBwcmVmZXJBdHRyKHRhZ05hbWU6IHN0cmluZywgcHJvcE5hbWU6IHN0cmluZykge1xuICBsZXQgdGFnID0gQVRUUl9PVkVSUklERVNbdGFnTmFtZS50b1VwcGVyQ2FzZSgpXTtcbiAgcmV0dXJuIHRhZyAmJiB0YWdbcHJvcE5hbWUudG9Mb3dlckNhc2UoKV0gfHwgZmFsc2U7XG59XG4iXX0=","import { sanitizeAttributeValue, requiresSanitization } from '../../dom/sanitized-values';\nimport { normalizeProperty } from '../../dom/props';\nimport { SVG_NAMESPACE } from '../../dom/helper';\nimport { normalizeStringValue } from '../../dom/normalize';\nexport function defaultDynamicAttributes(element, attr) {\n    let { tagName, namespaceURI } = element;\n    if (namespaceURI === SVG_NAMESPACE) {\n        return defaultDynamicAttribute(tagName, attr);\n    }\n    let { type, normalized } = normalizeProperty(element, attr);\n    if (type === 'attr') {\n        return defaultDynamicAttribute(tagName, normalized);\n    } else {\n        return defaultDynamicProperty(tagName, normalized);\n    }\n}\nexport function defaultDynamicAttribute(tagName, name) {\n    if (requiresSanitization(tagName, name)) {\n        return SafeDynamicAttribute;\n    } else {\n        return SimpleDynamicAttribute;\n    }\n}\nexport function defaultDynamicProperty(tagName, name) {\n    if (requiresSanitization(tagName, name)) {\n        return SafeDynamicProperty;\n    }\n    if (isUserInputValue(tagName, name)) {\n        return InputValueDynamicAttribute;\n    }\n    if (isOptionSelected(tagName, name)) {\n        return OptionSelectedDynamicAttribute;\n    }\n    return DefaultDynamicProperty;\n}\nexport class DynamicAttribute {\n    constructor(attribute) {\n        this.attribute = attribute;\n    }\n}\nexport class SimpleDynamicAttribute extends DynamicAttribute {\n    set(dom, value, _env) {\n        let normalizedValue = normalizeValue(value);\n        if (normalizedValue !== null) {\n            let { name, namespace } = this.attribute;\n            dom.__setAttribute(name, normalizedValue, namespace);\n        }\n    }\n    update(value, _env) {\n        let normalizedValue = normalizeValue(value);\n        let { element, name } = this.attribute;\n        if (normalizedValue === null) {\n            element.removeAttribute(name);\n        } else {\n            element.setAttribute(name, normalizedValue);\n        }\n    }\n}\nexport class DefaultDynamicProperty extends DynamicAttribute {\n    set(dom, value, _env) {\n        if (value !== null && value !== undefined) {\n            let { name } = this.attribute;\n            this.value = value;\n            dom.__setProperty(name, value);\n        }\n    }\n    update(value, _env) {\n        let { element, name } = this.attribute;\n        if (this.value !== value) {\n            element[name] = this.value = value;\n            if (value === null || value === undefined) {\n                this.removeAttribute();\n            }\n        }\n    }\n    removeAttribute() {\n        // TODO this sucks but to preserve properties first and to meet current\n        // semantics we must do this.\n        let { element, name, namespace } = this.attribute;\n        if (namespace) {\n            element.removeAttributeNS(namespace, name);\n        } else {\n            element.removeAttribute(name);\n        }\n    }\n}\nexport class SafeDynamicProperty extends DefaultDynamicProperty {\n    set(dom, value, env) {\n        let { element, name } = this.attribute;\n        let sanitized = sanitizeAttributeValue(env, element, name, value);\n        super.set(dom, sanitized, env);\n    }\n    update(value, env) {\n        let { element, name } = this.attribute;\n        let sanitized = sanitizeAttributeValue(env, element, name, value);\n        super.update(sanitized, env);\n    }\n}\nexport class SafeDynamicAttribute extends SimpleDynamicAttribute {\n    set(dom, value, env) {\n        let { element, name } = this.attribute;\n        let sanitized = sanitizeAttributeValue(env, element, name, value);\n        super.set(dom, sanitized, env);\n    }\n    update(value, env) {\n        let { element, name } = this.attribute;\n        let sanitized = sanitizeAttributeValue(env, element, name, value);\n        super.update(sanitized, env);\n    }\n}\nexport class InputValueDynamicAttribute extends DefaultDynamicProperty {\n    set(dom, value) {\n        dom.__setProperty('value', normalizeStringValue(value));\n    }\n    update(value) {\n        let input = this.attribute.element;\n        let currentValue = input.value;\n        let normalizedValue = normalizeStringValue(value);\n        if (currentValue !== normalizedValue) {\n            input.value = normalizedValue;\n        }\n    }\n}\nexport class OptionSelectedDynamicAttribute extends DefaultDynamicProperty {\n    set(dom, value) {\n        if (value !== null && value !== undefined && value !== false) {\n            dom.__setProperty('selected', true);\n        }\n    }\n    update(value) {\n        let option = this.attribute.element;\n        if (value) {\n            option.selected = true;\n        } else {\n            option.selected = false;\n        }\n    }\n}\nfunction isOptionSelected(tagName, attribute) {\n    return tagName === 'OPTION' && attribute === 'selected';\n}\nfunction isUserInputValue(tagName, attribute) {\n    return (tagName === 'INPUT' || tagName === 'TEXTAREA') && attribute === 'value';\n}\nfunction normalizeValue(value) {\n    if (value === false || value === undefined || value === null || typeof value.toString === 'undefined') {\n        return null;\n    }\n    if (value === true) {\n        return '';\n    }\n    // onclick function etc in SSR\n    if (typeof value === 'function') {\n        return null;\n    }\n    return String(value);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { assert, ensureGuid } from '@glimmer/util';\nimport { DOMChanges, DOMTreeConstruction } from './dom/helper';\nimport { UNDEFINED_REFERENCE, ConditionalReference } from './references';\nimport { defaultDynamicAttributes } from './vm/attributes/dynamic';\nexport class Scope {\n    constructor(\n    // the 0th slot is `self`\n    slots, callerScope,\n    // named arguments and blocks passed to a layout that uses eval\n    evalScope,\n    // locals in scope when the partial was invoked\n    partialMap) {\n        this.slots = slots;\n        this.callerScope = callerScope;\n        this.evalScope = evalScope;\n        this.partialMap = partialMap;\n    }\n    static root(self, size = 0) {\n        let refs = new Array(size + 1);\n        for (let i = 0; i <= size; i++) {\n            refs[i] = UNDEFINED_REFERENCE;\n        }\n        return new Scope(refs, null, null, null).init({ self });\n    }\n    static sized(size = 0) {\n        let refs = new Array(size + 1);\n        for (let i = 0; i <= size; i++) {\n            refs[i] = UNDEFINED_REFERENCE;\n        }\n        return new Scope(refs, null, null, null);\n    }\n    init({ self }) {\n        this.slots[0] = self;\n        return this;\n    }\n    getSelf() {\n        return this.get(0);\n    }\n    getSymbol(symbol) {\n        return this.get(symbol);\n    }\n    getBlock(symbol) {\n        return this.get(symbol);\n    }\n    getEvalScope() {\n        return this.evalScope;\n    }\n    getPartialMap() {\n        return this.partialMap;\n    }\n    bind(symbol, value) {\n        this.set(symbol, value);\n    }\n    bindSelf(self) {\n        this.set(0, self);\n    }\n    bindSymbol(symbol, value) {\n        this.set(symbol, value);\n    }\n    bindBlock(symbol, value) {\n        this.set(symbol, value);\n    }\n    bindEvalScope(map) {\n        this.evalScope = map;\n    }\n    bindPartialMap(map) {\n        this.partialMap = map;\n    }\n    bindCallerScope(scope) {\n        this.callerScope = scope;\n    }\n    getCallerScope() {\n        return this.callerScope;\n    }\n    child() {\n        return new Scope(this.slots.slice(), this.callerScope, this.evalScope, this.partialMap);\n    }\n    get(index) {\n        if (index >= this.slots.length) {\n            throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);\n        }\n        return this.slots[index];\n    }\n    set(index, value) {\n        if (index >= this.slots.length) {\n            throw new RangeError(`BUG: cannot get $${index} from scope; length=${this.slots.length}`);\n        }\n        this.slots[index] = value;\n    }\n}\nclass Transaction {\n    constructor() {\n        this.scheduledInstallManagers = [];\n        this.scheduledInstallModifiers = [];\n        this.scheduledUpdateModifierManagers = [];\n        this.scheduledUpdateModifiers = [];\n        this.createdComponents = [];\n        this.createdManagers = [];\n        this.updatedComponents = [];\n        this.updatedManagers = [];\n        this.destructors = [];\n    }\n    didCreate(component, manager) {\n        this.createdComponents.push(component);\n        this.createdManagers.push(manager);\n    }\n    didUpdate(component, manager) {\n        this.updatedComponents.push(component);\n        this.updatedManagers.push(manager);\n    }\n    scheduleInstallModifier(modifier, manager) {\n        this.scheduledInstallManagers.push(manager);\n        this.scheduledInstallModifiers.push(modifier);\n    }\n    scheduleUpdateModifier(modifier, manager) {\n        this.scheduledUpdateModifierManagers.push(manager);\n        this.scheduledUpdateModifiers.push(modifier);\n    }\n    didDestroy(d) {\n        this.destructors.push(d);\n    }\n    commit() {\n        let { createdComponents, createdManagers } = this;\n        for (let i = 0; i < createdComponents.length; i++) {\n            let component = createdComponents[i];\n            let manager = createdManagers[i];\n            manager.didCreate(component);\n        }\n        let { updatedComponents, updatedManagers } = this;\n        for (let i = 0; i < updatedComponents.length; i++) {\n            let component = updatedComponents[i];\n            let manager = updatedManagers[i];\n            manager.didUpdate(component);\n        }\n        let { destructors } = this;\n        for (let i = 0; i < destructors.length; i++) {\n            destructors[i].destroy();\n        }\n        let { scheduledInstallManagers, scheduledInstallModifiers } = this;\n        for (let i = 0; i < scheduledInstallManagers.length; i++) {\n            let manager = scheduledInstallManagers[i];\n            let modifier = scheduledInstallModifiers[i];\n            manager.install(modifier);\n        }\n        let { scheduledUpdateModifierManagers, scheduledUpdateModifiers } = this;\n        for (let i = 0; i < scheduledUpdateModifierManagers.length; i++) {\n            let manager = scheduledUpdateModifierManagers[i];\n            let modifier = scheduledUpdateModifiers[i];\n            manager.update(modifier);\n        }\n    }\n}\nexport class Environment {\n    constructor({ appendOperations, updateOperations }) {\n        this._transaction = null;\n        this.appendOperations = appendOperations;\n        this.updateOperations = updateOperations;\n    }\n    toConditionalReference(reference) {\n        return new ConditionalReference(reference);\n    }\n    getAppendOperations() {\n        return this.appendOperations;\n    }\n    getDOM() {\n        return this.updateOperations;\n    }\n    getIdentity(object) {\n        return ensureGuid(object) + '';\n    }\n    begin() {\n        (false && assert(!this._transaction, 'A glimmer transaction was begun, but one already exists. You may have a nested transaction, possibly caused by an earlier runtime exception while rendering. Please check your console for the stack trace of any prior exceptions.'));\n\n        this._transaction = new Transaction();\n    }\n    get transaction() {\n        return this._transaction;\n    }\n    didCreate(component, manager) {\n        this.transaction.didCreate(component, manager);\n    }\n    didUpdate(component, manager) {\n        this.transaction.didUpdate(component, manager);\n    }\n    scheduleInstallModifier(modifier, manager) {\n        this.transaction.scheduleInstallModifier(modifier, manager);\n    }\n    scheduleUpdateModifier(modifier, manager) {\n        this.transaction.scheduleUpdateModifier(modifier, manager);\n    }\n    didDestroy(d) {\n        this.transaction.didDestroy(d);\n    }\n    commit() {\n        let transaction = this.transaction;\n        this._transaction = null;\n        transaction.commit();\n    }\n    attributeFor(element, attr, _isTrusting, _namespace = null) {\n        return defaultDynamicAttributes(element, attr);\n    }\n}\nexport class DefaultEnvironment extends Environment {\n    constructor(options) {\n        if (!options) {\n            let document = window.document;\n            let appendOperations = new DOMTreeConstruction(document);\n            let updateOperations = new DOMChanges(document);\n            options = { appendOperations, updateOperations };\n        }\n        super(options);\n    }\n}\nexport default Environment;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { APPEND_OPCODES } from \"../opcodes\";\n\nexport default class LowLevelVM {\n    constructor(stack, heap, program, externs, pc = -1, ra = -1) {\n        this.stack = stack;\n        this.heap = heap;\n        this.program = program;\n        this.externs = externs;\n        this.pc = pc;\n        this.ra = ra;\n        this.currentOpSize = 0;\n    }\n    // Start a new frame and save $ra and $fp on the stack\n    pushFrame() {\n        this.stack.pushSmi(this.ra);\n        this.stack.pushSmi(this.stack.fp);\n        this.stack.fp = this.stack.sp - 1;\n    }\n    // Restore $ra, $sp and $fp\n    popFrame() {\n        this.stack.sp = this.stack.fp - 1;\n        this.ra = this.stack.getSmi(0);\n        this.stack.fp = this.stack.getSmi(1);\n    }\n    // Jump to an address in `program`\n    goto(offset) {\n        let addr = this.pc + offset - this.currentOpSize;\n        this.pc = addr;\n    }\n    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n    call(handle) {\n        this.ra = this.pc;\n        this.pc = this.heap.getaddr(handle);\n    }\n    // Put a specific `program` address in $ra\n    returnTo(offset) {\n        let addr = this.pc + offset - this.currentOpSize;\n        this.ra = addr;\n    }\n    // Return to the `program` address stored in $ra\n    return() {\n        this.pc = this.ra;\n    }\n    nextStatement() {\n        let { pc, program } = this;\n        if (pc === -1) {\n            return null;\n        }\n        // We have to save off the current operations size so that\n        // when we do a jump we can calculate the correct offset\n        // to where we are going. We can't simply ask for the size\n        // in a jump because we have have already incremented the\n        // program counter to the next instruction prior to executing.\n        let { size } = this.program.opcode(pc);\n        let operationSize = this.currentOpSize = size;\n        this.pc += operationSize;\n        return program.opcode(pc);\n    }\n    evaluateOuter(opcode, vm) {\n        if (false) {\n            let { externs: { debugBefore, debugAfter } } = this;\n            let state = debugBefore(opcode);\n            this.evaluateInner(opcode, vm);\n            debugAfter(opcode, state);\n        } else {\n            this.evaluateInner(opcode, vm);\n        }\n    }\n    evaluateInner(opcode, vm) {\n        if (opcode.isMachine) {\n            this.evaluateMachine(opcode);\n        } else {\n            this.evaluateSyscall(opcode, vm);\n        }\n    }\n    evaluateMachine(opcode) {\n        switch (opcode.type) {\n            case 47 /* PushFrame */:\n                return this.pushFrame();\n            case 48 /* PopFrame */:\n                return this.popFrame();\n            case 42 /* InvokeStatic */:\n                return this.call(opcode.op1);\n            case 41 /* InvokeVirtual */:\n                return this.call(this.stack.popSmi());\n            case 44 /* Jump */:\n                return this.goto(opcode.op1);\n            case 20 /* Return */:\n                return this.return();\n            case 21 /* ReturnTo */:\n                return this.returnTo(opcode.op1);\n        }\n    }\n    evaluateSyscall(opcode, vm) {\n        APPEND_OPCODES.evaluate(vm, opcode, opcode.type);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { clear } from '../../bounds';\nimport { NewElementBuilder } from '../element-builder';\nclass DynamicContentBase {\n    constructor(trusting) {\n        this.trusting = trusting;\n    }\n    retry(env, value) {\n        let { bounds } = this;\n        let parentElement = bounds.parentElement();\n        let nextSibling = clear(bounds);\n        let stack = NewElementBuilder.forInitialRender(env, { element: parentElement, nextSibling });\n        if (this.trusting) {\n            return stack.__appendTrustingDynamicContent(value);\n        } else {\n            return stack.__appendCautiousDynamicContent(value);\n        }\n    }\n}\nexport default DynamicContentBase;\nexport class DynamicContentWrapper {\n    constructor(inner) {\n        this.inner = inner;\n        this.bounds = inner.bounds;\n    }\n    parentElement() {\n        return this.bounds.parentElement();\n    }\n    firstNode() {\n        return this.bounds.firstNode();\n    }\n    lastNode() {\n        return this.bounds.lastNode();\n    }\n    update(env, value) {\n        let inner = this.inner = this.inner.update(env, value);\n        this.bounds = inner.bounds;\n        return this;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3ZtL2NvbnRlbnQvZHluYW1pYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxBQUFlLFNBQUUsQUFBSyxBQUFFLGFBQU0sQUFBYyxBQUFDO0FBRTdDLEFBQU8sU0FBRSxBQUFpQixBQUFFLHlCQUFNLEFBQW9CLEFBQUM7QUFPdkQ7QUFDRSxnQkFBc0IsQUFBaUI7QUFBakIsYUFBUSxXQUFSLEFBQVEsQUFBUyxBQUFHO0FBQUM7QUFNakMsQUFBSyxVQUFDLEFBQWdCLEtBQUUsQUFBYTtBQUM3QyxZQUFJLEVBQUUsQUFBTSxBQUFFLFdBQUcsQUFBSSxBQUFDO0FBQ3RCLFlBQUksQUFBYSxnQkFBRyxBQUFNLE9BQUMsQUFBYSxBQUFFLEFBQUM7QUFDM0MsWUFBSSxBQUFXLGNBQUcsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUFDO0FBRWhDLFlBQUksQUFBSyxRQUFHLEFBQWlCLGtCQUFDLEFBQWdCLGlCQUFDLEFBQUcsS0FBRSxFQUFFLEFBQU8sU0FBRSxBQUFhLGVBQUUsQUFBVyxBQUFFLEFBQUMsQUFBQztBQUU3RixBQUFFLEFBQUMsWUFBQyxBQUFJLEtBQUMsQUFBUSxBQUFDLFVBQUMsQUFBQztBQUNsQixBQUFNLG1CQUFDLEFBQUssTUFBQyxBQUE4QiwrQkFBQyxBQUFLLEFBQUMsQUFBQyxBQUNyRDtBQUFDLEFBQUMsQUFBSSxlQUFDLEFBQUM7QUFDTixBQUFNLG1CQUFDLEFBQUssTUFBQyxBQUE4QiwrQkFBQyxBQUFLLEFBQUMsQUFBQyxBQUNyRDtBQUFDLEFBQ0g7QUFBQyxBQUNGOztBQUVELGVBQWUsQUFBa0IsQUFBQztBQUVsQyxBQUFNO0FBZUosZ0JBQW9CLEFBQXFCO0FBQXJCLGFBQUssUUFBTCxBQUFLLEFBQWdCO0FBQ3ZDLEFBQUksYUFBQyxBQUFNLFNBQUcsQUFBSyxNQUFDLEFBQU0sQUFBQyxBQUM3QjtBQUFDO0FBaEJELEFBQWE7QUFDWCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFhLEFBQUUsQUFBQyxBQUNyQztBQUFDO0FBRUQsQUFBUztBQUNQLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQVMsQUFBRSxBQUFDLEFBQ2pDO0FBQUM7QUFFRCxBQUFRO0FBQ04sQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBUSxBQUFFLEFBQUMsQUFDaEM7QUFBQztBQVFELEFBQU0sV0FBQyxBQUFnQixLQUFFLEFBQWE7QUFDcEMsWUFBSSxBQUFLLFFBQUcsQUFBSSxLQUFDLEFBQUssUUFBRyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQU0sT0FBQyxBQUFHLEtBQUUsQUFBSyxBQUFDLEFBQUM7QUFDdkQsQUFBSSxhQUFDLEFBQU0sU0FBRyxBQUFLLE1BQUMsQUFBTSxBQUFDO0FBQzNCLEFBQU0sZUFBQyxBQUFJLEFBQUMsQUFDZDtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgRW52aXJvbm1lbnQgZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IEJvdW5kcywgeyBjbGVhciB9IGZyb20gJy4uLy4uL2JvdW5kcyc7XG5pbXBvcnQgeyBPcGFxdWUsIFNpbXBsZSwgT3B0aW9uIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcbmltcG9ydCB7IE5ld0VsZW1lbnRCdWlsZGVyIH0gZnJvbSAnLi4vZWxlbWVudC1idWlsZGVyJztcblxuZXhwb3J0IGludGVyZmFjZSBEeW5hbWljQ29udGVudCB7XG4gIGJvdW5kczogQm91bmRzO1xuICB1cGRhdGUoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50O1xufVxuXG5hYnN0cmFjdCBjbGFzcyBEeW5hbWljQ29udGVudEJhc2UgaW1wbGVtZW50cyBEeW5hbWljQ29udGVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cnVzdGluZzogYm9vbGVhbikge31cblxuICBhYnN0cmFjdCB1cGRhdGUoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50O1xuXG4gIHB1YmxpYyBhYnN0cmFjdCBib3VuZHM6IEJvdW5kcztcblxuICBwcm90ZWN0ZWQgcmV0cnkoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50IHtcbiAgICBsZXQgeyBib3VuZHMgfSA9IHRoaXM7XG4gICAgbGV0IHBhcmVudEVsZW1lbnQgPSBib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICAgIGxldCBuZXh0U2libGluZyA9IGNsZWFyKGJvdW5kcyk7XG5cbiAgICBsZXQgc3RhY2sgPSBOZXdFbGVtZW50QnVpbGRlci5mb3JJbml0aWFsUmVuZGVyKGVudiwgeyBlbGVtZW50OiBwYXJlbnRFbGVtZW50LCBuZXh0U2libGluZyB9KTtcblxuICAgIGlmICh0aGlzLnRydXN0aW5nKSB7XG4gICAgICByZXR1cm4gc3RhY2suX19hcHBlbmRUcnVzdGluZ0R5bmFtaWNDb250ZW50KHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0YWNrLl9fYXBwZW5kQ2F1dGlvdXNEeW5hbWljQ29udGVudCh2YWx1ZSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IER5bmFtaWNDb250ZW50QmFzZTtcblxuZXhwb3J0IGNsYXNzIER5bmFtaWNDb250ZW50V3JhcHBlciBpbXBsZW1lbnRzIER5bmFtaWNDb250ZW50LCBCb3VuZHMge1xuICBwYXJlbnRFbGVtZW50KCk6IFNpbXBsZS5FbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5ib3VuZHMucGFyZW50RWxlbWVudCgpO1xuICB9XG5cbiAgZmlyc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLmJvdW5kcy5maXJzdE5vZGUoKTtcbiAgfVxuXG4gIGxhc3ROb2RlKCk6IE9wdGlvbjxTaW1wbGUuTm9kZT4ge1xuICAgIHJldHVybiB0aGlzLmJvdW5kcy5sYXN0Tm9kZSgpO1xuICB9XG5cbiAgcHVibGljIGJvdW5kczogQm91bmRzO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5uZXI6IER5bmFtaWNDb250ZW50KSB7XG4gICAgdGhpcy5ib3VuZHMgPSBpbm5lci5ib3VuZHM7XG4gIH1cblxuICB1cGRhdGUoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50V3JhcHBlciB7XG4gICAgbGV0IGlubmVyID0gdGhpcy5pbm5lciA9IHRoaXMuaW5uZXIudXBkYXRlKGVudiwgdmFsdWUpO1xuICAgIHRoaXMuYm91bmRzID0gaW5uZXIuYm91bmRzO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG4iXX0=","import DynamicContentBase from './dynamic';\nimport { isNode, isSafeString, isEmpty, isString } from '../../dom/normalize';\nexport default class DynamicTextContent extends DynamicContentBase {\n    constructor(bounds, lastValue, trusted) {\n        super(trusted);\n        this.bounds = bounds;\n        this.lastValue = lastValue;\n    }\n    update(env, value) {\n        let { lastValue } = this;\n        if (value === lastValue) return this;\n        if (isNode(value) || isSafeString(value)) return this.retry(env, value);\n        let normalized;\n        if (isEmpty(value)) {\n            normalized = '';\n        } else if (isString(value)) {\n            normalized = value;\n        } else {\n            normalized = String(value);\n        }\n        if (normalized !== lastValue) {\n            let textNode = this.bounds.firstNode();\n            textNode.nodeValue = this.lastValue = normalized;\n        }\n        return this;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3ZtL2NvbnRlbnQvdGV4dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEFBQXNDLHdCQUFNLEFBQVcsQUFBQztBQUcvRCxBQUFPLFNBQUUsQUFBTSxRQUFFLEFBQVksY0FBRSxBQUFPLFNBQUUsQUFBUSxBQUFFLGdCQUFNLEFBQXFCLEFBQUM7QUFHOUUsQUFBTSxBQUFDLEFBQU8scUJBQTBCLDJCQUFRLEFBQWtCO0FBQ2hFLGdCQUFtQixBQUF3QixRQUFVLEFBQWlCLFdBQUUsQUFBZ0I7QUFDdEYsQUFBSyxjQUFDLEFBQU8sQUFBQyxBQUFDO0FBREUsYUFBTSxTQUFOLEFBQU0sQUFBa0I7QUFBVSxhQUFTLFlBQVQsQUFBUyxBQUFRLEFBRXRFO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBZ0IsS0FBRSxBQUFhO0FBQ3BDLFlBQUksRUFBRSxBQUFTLEFBQUUsY0FBRyxBQUFJLEFBQUM7QUFFekIsQUFBRSxBQUFDLFlBQUMsQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFDckMsQUFBRSxBQUFDLFlBQUMsQUFBTSxPQUFDLEFBQUssQUFBQyxVQUFJLEFBQVksYUFBQyxBQUFLLEFBQUMsQUFBQyxRQUFDLEFBQU0sT0FBQyxBQUFJLEtBQUMsQUFBSyxNQUFDLEFBQUcsS0FBRSxBQUFLLEFBQUMsQUFBQztBQUV4RSxZQUFJLEFBQWtCLEFBQUM7QUFFdkIsQUFBRSxBQUFDLFlBQUMsQUFBTyxRQUFDLEFBQUssQUFBQyxBQUFDLFFBQUMsQUFBQztBQUNuQixBQUFVLHlCQUFHLEFBQUUsQUFBQyxBQUNsQjtBQUFDLEFBQUMsQUFBSSxtQkFBSyxBQUFRLFNBQUMsQUFBSyxBQUFDLEFBQUMsUUFBQyxBQUFDO0FBQzNCLEFBQVUseUJBQUcsQUFBSyxBQUFDLEFBQ3JCO0FBQUMsQUFBQyxBQUFJLFNBRkMsQUFBRSxBQUFDLE1BRUgsQUFBQztBQUNOLEFBQVUseUJBQUcsQUFBTSxPQUFDLEFBQUssQUFBQyxBQUFDLEFBQzdCO0FBQUM7QUFFRCxBQUFFLEFBQUMsWUFBQyxBQUFVLGVBQUssQUFBUyxBQUFDLFdBQUMsQUFBQztBQUM3QixnQkFBSSxBQUFRLFdBQUcsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFTLEFBQUUsQUFBQztBQUN2QyxBQUFRLHFCQUFDLEFBQVMsWUFBRyxBQUFJLEtBQUMsQUFBUyxZQUFHLEFBQVUsQUFBQyxBQUNuRDtBQUFDO0FBRUQsQUFBTSxlQUFDLEFBQUksQUFBQyxBQUNkO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEeW5hbWljQ29udGVudEJhc2UsIHsgRHluYW1pY0NvbnRlbnQgfSBmcm9tICcuL2R5bmFtaWMnO1xuaW1wb3J0IHsgU2luZ2xlTm9kZUJvdW5kcyB9IGZyb20gJy4uLy4uL2JvdW5kcyc7XG5pbXBvcnQgRW52aXJvbm1lbnQgZnJvbSAnLi4vLi4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1NhZmVTdHJpbmcsIGlzRW1wdHksIGlzU3RyaW5nIH0gZnJvbSAnLi4vLi4vZG9tL25vcm1hbGl6ZSc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tIFwiQGdsaW1tZXIvaW50ZXJmYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEeW5hbWljVGV4dENvbnRlbnQgZXh0ZW5kcyBEeW5hbWljQ29udGVudEJhc2Uge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgYm91bmRzOiBTaW5nbGVOb2RlQm91bmRzLCBwcml2YXRlIGxhc3RWYWx1ZTogc3RyaW5nLCB0cnVzdGVkOiBib29sZWFuKSB7XG4gICAgc3VwZXIodHJ1c3RlZCk7XG4gIH1cblxuICB1cGRhdGUoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50IHtcbiAgICBsZXQgeyBsYXN0VmFsdWUgfSA9IHRoaXM7XG5cbiAgICBpZiAodmFsdWUgPT09IGxhc3RWYWx1ZSkgcmV0dXJuIHRoaXM7XG4gICAgaWYgKGlzTm9kZSh2YWx1ZSkgfHwgaXNTYWZlU3RyaW5nKHZhbHVlKSkgcmV0dXJuIHRoaXMucmV0cnkoZW52LCB2YWx1ZSk7XG5cbiAgICBsZXQgbm9ybWFsaXplZDogc3RyaW5nO1xuXG4gICAgaWYgKGlzRW1wdHkodmFsdWUpKSB7XG4gICAgICBub3JtYWxpemVkID0gJyc7XG4gICAgfSBlbHNlIGlmIChpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIG5vcm1hbGl6ZWQgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9ybWFsaXplZCA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgaWYgKG5vcm1hbGl6ZWQgIT09IGxhc3RWYWx1ZSkge1xuICAgICAgbGV0IHRleHROb2RlID0gdGhpcy5ib3VuZHMuZmlyc3ROb2RlKCk7XG4gICAgICB0ZXh0Tm9kZS5ub2RlVmFsdWUgPSB0aGlzLmxhc3RWYWx1ZSA9IG5vcm1hbGl6ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==","import DynamicContentBase from './dynamic';\nexport default class DynamicNodeContent extends DynamicContentBase {\n    constructor(bounds, lastValue, trusting) {\n        super(trusting);\n        this.bounds = bounds;\n        this.lastValue = lastValue;\n    }\n    update(env, value) {\n        let { lastValue } = this;\n        if (value === lastValue) return this;\n        return this.retry(env, value);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3ZtL2NvbnRlbnQvbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEFBQXNDLHdCQUFNLEFBQVcsQUFBQztBQUsvRCxBQUFNLEFBQUMsQUFBTyxxQkFBMEIsMkJBQVEsQUFBa0I7QUFDaEUsZ0JBQW1CLEFBQWMsUUFBVSxBQUFzQixXQUFFLEFBQWlCO0FBQ2xGLEFBQUssY0FBQyxBQUFRLEFBQUMsQUFBQztBQURDLGFBQU0sU0FBTixBQUFNLEFBQVE7QUFBVSxhQUFTLFlBQVQsQUFBUyxBQUFhLEFBRWpFO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBZ0IsS0FBRSxBQUFhO0FBQ3BDLFlBQUksRUFBRSxBQUFTLEFBQUUsY0FBRyxBQUFJLEFBQUM7QUFFekIsQUFBRSxBQUFDLFlBQUMsQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFFckMsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBRyxLQUFFLEFBQUssQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEeW5hbWljQ29udGVudEJhc2UsIHsgRHluYW1pY0NvbnRlbnQgfSBmcm9tICcuL2R5bmFtaWMnO1xuaW1wb3J0IEJvdW5kcyBmcm9tICcuLi8uLi9ib3VuZHMnO1xuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4uLy4uL2Vudmlyb25tZW50JztcbmltcG9ydCB7IE9wYXF1ZSwgU2ltcGxlIH0gZnJvbSBcIkBnbGltbWVyL2ludGVyZmFjZXNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRHluYW1pY05vZGVDb250ZW50IGV4dGVuZHMgRHluYW1pY0NvbnRlbnRCYXNlIHtcbiAgY29uc3RydWN0b3IocHVibGljIGJvdW5kczogQm91bmRzLCBwcml2YXRlIGxhc3RWYWx1ZTogU2ltcGxlLk5vZGUsIHRydXN0aW5nOiBib29sZWFuKSB7XG4gICAgc3VwZXIodHJ1c3RpbmcpO1xuICB9XG5cbiAgdXBkYXRlKGVudjogRW52aXJvbm1lbnQsIHZhbHVlOiBPcGFxdWUpOiBEeW5hbWljQ29udGVudCB7XG4gICAgbGV0IHsgbGFzdFZhbHVlIH0gPSB0aGlzO1xuXG4gICAgaWYgKHZhbHVlID09PSBsYXN0VmFsdWUpIHJldHVybiB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMucmV0cnkoZW52LCB2YWx1ZSk7XG4gIH1cbn1cbiJdfQ==","import DynamicContentBase from './dynamic';\nimport { isSafeString, normalizeTrustedValue } from '../../dom/normalize';\nexport default class DynamicHTMLContent extends DynamicContentBase {\n    constructor(bounds, lastValue, trusted) {\n        super(trusted);\n        this.bounds = bounds;\n        this.lastValue = lastValue;\n    }\n    update(env, value) {\n        let { lastValue } = this;\n        if (value === lastValue) return this;\n        if (isSafeString(value) && value.toHTML() === lastValue.toHTML()) {\n            this.lastValue = value;\n            return this;\n        }\n        return this.retry(env, value);\n    }\n}\nexport class DynamicTrustedHTMLContent extends DynamicContentBase {\n    constructor(bounds, lastValue, trusted) {\n        super(trusted);\n        this.bounds = bounds;\n        this.lastValue = lastValue;\n    }\n    update(env, value) {\n        let { lastValue } = this;\n        if (value === lastValue) return this;\n        let newValue = normalizeTrustedValue(value);\n        if (newValue === lastValue) return this;\n        return this.retry(env, value);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHRtbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3ZtL2NvbnRlbnQvaHRtbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEFBQXNDLHdCQUFNLEFBQVcsQUFBQztBQUcvRCxBQUFPLFNBQUUsQUFBWSxjQUFjLEFBQXFCLEFBQUUsNkJBQU0sQUFBcUIsQUFBQztBQUd0RixBQUFNLEFBQUMsQUFBTyxxQkFBMEIsMkJBQVEsQUFBa0I7QUFDaEUsZ0JBQW1CLEFBQWMsUUFBVSxBQUFxQixXQUFFLEFBQWdCO0FBQ2hGLEFBQUssY0FBQyxBQUFPLEFBQUMsQUFBQztBQURFLGFBQU0sU0FBTixBQUFNLEFBQVE7QUFBVSxhQUFTLFlBQVQsQUFBUyxBQUFZLEFBRWhFO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBZ0IsS0FBRSxBQUFhO0FBQ3BDLFlBQUksRUFBRSxBQUFTLEFBQUUsY0FBRyxBQUFJLEFBQUM7QUFFekIsQUFBRSxBQUFDLFlBQUMsQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFFckMsQUFBRSxBQUFDLFlBQUMsQUFBWSxhQUFDLEFBQUssQUFBQyxVQUFJLEFBQUssTUFBQyxBQUFNLEFBQUUsYUFBSyxBQUFTLFVBQUMsQUFBTSxBQUFFLEFBQUMsVUFBQyxBQUFDO0FBQ2pFLEFBQUksaUJBQUMsQUFBUyxZQUFHLEFBQUssQUFBQztBQUN2QixBQUFNLG1CQUFDLEFBQUksQUFBQyxBQUNkO0FBQUM7QUFFRCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUssTUFBQyxBQUFHLEtBQUUsQUFBSyxBQUFDLEFBQUMsQUFDaEM7QUFBQyxBQUNGOztBQUVELEFBQU0sYUFBaUMsa0NBQVEsQUFBa0I7QUFDL0QsZ0JBQW1CLEFBQWMsUUFBVSxBQUFpQixXQUFFLEFBQWdCO0FBQzVFLEFBQUssY0FBQyxBQUFPLEFBQUMsQUFBQztBQURFLGFBQU0sU0FBTixBQUFNLEFBQVE7QUFBVSxhQUFTLFlBQVQsQUFBUyxBQUFRLEFBRTVEO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBZ0IsS0FBRSxBQUFhO0FBQ3BDLFlBQUksRUFBRSxBQUFTLEFBQUUsY0FBRyxBQUFJLEFBQUM7QUFFekIsQUFBRSxBQUFDLFlBQUMsQUFBSyxVQUFLLEFBQVMsQUFBQyxXQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFDckMsWUFBSSxBQUFRLFdBQUcsQUFBcUIsc0JBQUMsQUFBSyxBQUFDLEFBQUM7QUFDNUMsQUFBRSxBQUFDLFlBQUMsQUFBUSxhQUFLLEFBQVMsQUFBQyxXQUFDLEFBQU0sT0FBQyxBQUFJLEFBQUM7QUFFeEMsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFLLE1BQUMsQUFBRyxLQUFFLEFBQUssQUFBQyxBQUFDLEFBQ2hDO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBEeW5hbWljQ29udGVudEJhc2UsIHsgRHluYW1pY0NvbnRlbnQgfSBmcm9tICcuL2R5bmFtaWMnO1xuaW1wb3J0IEJvdW5kcyBmcm9tICcuLi8uLi9ib3VuZHMnO1xuaW1wb3J0IEVudmlyb25tZW50IGZyb20gJy4uLy4uL2Vudmlyb25tZW50JztcbmltcG9ydCB7IGlzU2FmZVN0cmluZywgU2FmZVN0cmluZywgbm9ybWFsaXplVHJ1c3RlZFZhbHVlIH0gZnJvbSAnLi4vLi4vZG9tL25vcm1hbGl6ZSc7XG5pbXBvcnQgeyBPcGFxdWUgfSBmcm9tIFwiQGdsaW1tZXIvaW50ZXJmYWNlc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEeW5hbWljSFRNTENvbnRlbnQgZXh0ZW5kcyBEeW5hbWljQ29udGVudEJhc2Uge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgYm91bmRzOiBCb3VuZHMsIHByaXZhdGUgbGFzdFZhbHVlOiBTYWZlU3RyaW5nLCB0cnVzdGVkOiBib29sZWFuKSB7XG4gICAgc3VwZXIodHJ1c3RlZCk7XG4gIH1cblxuICB1cGRhdGUoZW52OiBFbnZpcm9ubWVudCwgdmFsdWU6IE9wYXF1ZSk6IER5bmFtaWNDb250ZW50IHtcbiAgICBsZXQgeyBsYXN0VmFsdWUgfSA9IHRoaXM7XG5cbiAgICBpZiAodmFsdWUgPT09IGxhc3RWYWx1ZSkgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoaXNTYWZlU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS50b0hUTUwoKSA9PT0gbGFzdFZhbHVlLnRvSFRNTCgpKSB7XG4gICAgICB0aGlzLmxhc3RWYWx1ZSA9IHZhbHVlO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmV0cnkoZW52LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIER5bmFtaWNUcnVzdGVkSFRNTENvbnRlbnQgZXh0ZW5kcyBEeW5hbWljQ29udGVudEJhc2Uge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgYm91bmRzOiBCb3VuZHMsIHByaXZhdGUgbGFzdFZhbHVlOiBzdHJpbmcsIHRydXN0ZWQ6IGJvb2xlYW4pIHtcbiAgICBzdXBlcih0cnVzdGVkKTtcbiAgfVxuXG4gIHVwZGF0ZShlbnY6IEVudmlyb25tZW50LCB2YWx1ZTogT3BhcXVlKTogRHluYW1pY0NvbnRlbnQge1xuICAgIGxldCB7IGxhc3RWYWx1ZSB9ID0gdGhpcztcblxuICAgIGlmICh2YWx1ZSA9PT0gbGFzdFZhbHVlKSByZXR1cm4gdGhpcztcbiAgICBsZXQgbmV3VmFsdWUgPSBub3JtYWxpemVUcnVzdGVkVmFsdWUodmFsdWUpO1xuICAgIGlmIChuZXdWYWx1ZSA9PT0gbGFzdFZhbHVlKSByZXR1cm4gdGhpcztcblxuICAgIHJldHVybiB0aGlzLnJldHJ5KGVudiwgdmFsdWUpO1xuICB9XG59XG4iXX0=","import { clear, Cursor, single, bounds } from '../bounds';\nimport { isString, isSafeString, isNode, isFragment, isEmpty } from '../dom/normalize';\nimport { Stack, assert } from '@glimmer/util';\nimport { DynamicContentWrapper } from './content/dynamic';\nimport DynamicTextContent from './content/text';\nimport DynamicNodeContent from './content/node';\nimport DynamicHTMLContent, { DynamicTrustedHTMLContent } from './content/html';\nclass First {\n    constructor(node) {\n        this.node = node;\n    }\n    firstNode() {\n        return this.node;\n    }\n}\nclass Last {\n    constructor(node) {\n        this.node = node;\n    }\n    lastNode() {\n        return this.node;\n    }\n}\nexport class Fragment {\n    constructor(bounds) {\n        this.bounds = bounds;\n    }\n    parentElement() {\n        return this.bounds.parentElement();\n    }\n    firstNode() {\n        return this.bounds.firstNode();\n    }\n    lastNode() {\n        return this.bounds.lastNode();\n    }\n}\nexport class NewElementBuilder {\n    constructor(env, parentNode, nextSibling) {\n        this.constructing = null;\n        this.operations = null;\n        this.cursorStack = new Stack();\n        this.blockStack = new Stack();\n        this.pushElement(parentNode, nextSibling);\n        this.env = env;\n        this.dom = env.getAppendOperations();\n        this.updateOperations = env.getDOM();\n    }\n    static forInitialRender(env, cursor) {\n        let builder = new this(env, cursor.element, cursor.nextSibling);\n        builder.pushSimpleBlock();\n        return builder;\n    }\n    static resume(env, tracker, nextSibling) {\n        let parentNode = tracker.parentElement();\n        let stack = new this(env, parentNode, nextSibling);\n        stack.pushSimpleBlock();\n        stack.pushBlockTracker(tracker);\n        return stack;\n    }\n    get element() {\n        return this.cursorStack.current.element;\n    }\n    get nextSibling() {\n        return this.cursorStack.current.nextSibling;\n    }\n    expectConstructing(method) {\n        return this.constructing;\n    }\n    block() {\n        return this.blockStack.current;\n    }\n    popElement() {\n        this.cursorStack.pop();\n        this.cursorStack.current;\n    }\n    pushSimpleBlock() {\n        return this.pushBlockTracker(new SimpleBlockTracker(this.element));\n    }\n    pushUpdatableBlock() {\n        return this.pushBlockTracker(new UpdatableBlockTracker(this.element));\n    }\n    pushBlockList(list) {\n        return this.pushBlockTracker(new BlockListTracker(this.element, list));\n    }\n    pushBlockTracker(tracker, isRemote = false) {\n        let current = this.blockStack.current;\n        if (current !== null) {\n            current.newDestroyable(tracker);\n            if (!isRemote) {\n                current.didAppendBounds(tracker);\n            }\n        }\n        this.__openBlock();\n        this.blockStack.push(tracker);\n        return tracker;\n    }\n    popBlock() {\n        this.block().finalize(this);\n        this.__closeBlock();\n        return this.blockStack.pop();\n    }\n    __openBlock() {}\n    __closeBlock() {}\n    // todo return seems unused\n    openElement(tag) {\n        let element = this.__openElement(tag);\n        this.constructing = element;\n        return element;\n    }\n    __openElement(tag) {\n        return this.dom.createElement(tag, this.element);\n    }\n    flushElement() {\n        let parent = this.element;\n        let element = this.constructing;\n        this.__flushElement(parent, element);\n        this.constructing = null;\n        this.operations = null;\n        this.pushElement(element, null);\n        this.didOpenElement(element);\n    }\n    __flushElement(parent, constructing) {\n        this.dom.insertBefore(parent, constructing, this.nextSibling);\n    }\n    closeElement() {\n        this.willCloseElement();\n        this.popElement();\n    }\n    pushRemoteElement(element, guid, nextSibling = null) {\n        this.__pushRemoteElement(element, guid, nextSibling);\n    }\n    __pushRemoteElement(element, _guid, nextSibling) {\n        this.pushElement(element, nextSibling);\n        let tracker = new RemoteBlockTracker(element);\n        this.pushBlockTracker(tracker, true);\n    }\n    popRemoteElement() {\n        this.popBlock();\n        this.popElement();\n    }\n    pushElement(element, nextSibling) {\n        this.cursorStack.push(new Cursor(element, nextSibling));\n    }\n    didAddDestroyable(d) {\n        this.block().newDestroyable(d);\n    }\n    didAppendBounds(bounds) {\n        this.block().didAppendBounds(bounds);\n        return bounds;\n    }\n    didAppendNode(node) {\n        this.block().didAppendNode(node);\n        return node;\n    }\n    didOpenElement(element) {\n        this.block().openElement(element);\n        return element;\n    }\n    willCloseElement() {\n        this.block().closeElement();\n    }\n    appendText(string) {\n        return this.didAppendNode(this.__appendText(string));\n    }\n    __appendText(text) {\n        let { dom, element, nextSibling } = this;\n        let node = dom.createTextNode(text);\n        dom.insertBefore(element, node, nextSibling);\n        return node;\n    }\n    __appendNode(node) {\n        this.dom.insertBefore(this.element, node, this.nextSibling);\n        return node;\n    }\n    __appendFragment(fragment) {\n        let first = fragment.firstChild;\n        if (first) {\n            let ret = bounds(this.element, first, fragment.lastChild);\n            this.dom.insertBefore(this.element, fragment, this.nextSibling);\n            return ret;\n        } else {\n            return single(this.element, this.__appendComment(''));\n        }\n    }\n    __appendHTML(html) {\n        return this.dom.insertHTMLBefore(this.element, this.nextSibling, html);\n    }\n    appendTrustingDynamicContent(value) {\n        let wrapper = new DynamicContentWrapper(this.__appendTrustingDynamicContent(value));\n        this.didAppendBounds(wrapper);\n        return wrapper;\n    }\n    __appendTrustingDynamicContent(value) {\n        if (isString(value)) {\n            return this.trustedContent(value);\n        } else if (isEmpty(value)) {\n            return this.trustedContent('');\n        } else if (isSafeString(value)) {\n            return this.trustedContent(value.toHTML());\n        }\n        if (isFragment(value)) {\n            let bounds = this.__appendFragment(value);\n            return new DynamicNodeContent(bounds, value, true);\n        } else if (isNode(value)) {\n            let node = this.__appendNode(value);\n            return new DynamicNodeContent(single(this.element, node), node, true);\n        }\n        return this.trustedContent(String(value));\n    }\n    appendCautiousDynamicContent(value) {\n        let wrapper = new DynamicContentWrapper(this.__appendCautiousDynamicContent(value));\n        this.didAppendBounds(wrapper.bounds);\n        return wrapper;\n    }\n    __appendCautiousDynamicContent(value) {\n        if (isString(value)) {\n            return this.untrustedContent(value);\n        } else if (isEmpty(value)) {\n            return this.untrustedContent('');\n        } else if (isFragment(value)) {\n            let bounds = this.__appendFragment(value);\n            return new DynamicNodeContent(bounds, value, false);\n        } else if (isNode(value)) {\n            let node = this.__appendNode(value);\n            return new DynamicNodeContent(single(this.element, node), node, false);\n        } else if (isSafeString(value)) {\n            let normalized = value.toHTML();\n            let bounds = this.__appendHTML(normalized);\n            // let bounds = this.dom.insertHTMLBefore(this.element, this.nextSibling, normalized);\n            return new DynamicHTMLContent(bounds, value, false);\n        }\n        return this.untrustedContent(String(value));\n    }\n    trustedContent(value) {\n        let bounds = this.__appendHTML(value);\n        return new DynamicTrustedHTMLContent(bounds, value, true);\n    }\n    untrustedContent(value) {\n        let textNode = this.__appendText(value);\n        let bounds = single(this.element, textNode);\n        return new DynamicTextContent(bounds, value, false);\n    }\n    appendComment(string) {\n        return this.didAppendNode(this.__appendComment(string));\n    }\n    __appendComment(string) {\n        let { dom, element, nextSibling } = this;\n        let node = dom.createComment(string);\n        dom.insertBefore(element, node, nextSibling);\n        return node;\n    }\n    __setAttribute(name, value, namespace) {\n        this.dom.setAttribute(this.constructing, name, value, namespace);\n    }\n    __setProperty(name, value) {\n        this.constructing[name] = value;\n    }\n    setStaticAttribute(name, value, namespace) {\n        this.__setAttribute(name, value, namespace);\n    }\n    setDynamicAttribute(name, value, trusting, namespace) {\n        let element = this.constructing;\n        let DynamicAttribute = this.env.attributeFor(element, name, trusting, namespace);\n        let attribute = new DynamicAttribute({ element, name, namespace: namespace || null });\n        attribute.set(this, value, this.env);\n        return attribute;\n    }\n}\nexport class SimpleBlockTracker {\n    constructor(parent) {\n        this.parent = parent;\n        this.first = null;\n        this.last = null;\n        this.destroyables = null;\n        this.nesting = 0;\n    }\n    destroy() {\n        let { destroyables } = this;\n        if (destroyables && destroyables.length) {\n            for (let i = 0; i < destroyables.length; i++) {\n                destroyables[i].destroy();\n            }\n        }\n    }\n    parentElement() {\n        return this.parent;\n    }\n    firstNode() {\n        return this.first && this.first.firstNode();\n    }\n    lastNode() {\n        return this.last && this.last.lastNode();\n    }\n    openElement(element) {\n        this.didAppendNode(element);\n        this.nesting++;\n    }\n    closeElement() {\n        this.nesting--;\n    }\n    didAppendNode(node) {\n        if (this.nesting !== 0) return;\n        if (!this.first) {\n            this.first = new First(node);\n        }\n        this.last = new Last(node);\n    }\n    didAppendBounds(bounds) {\n        if (this.nesting !== 0) return;\n        if (!this.first) {\n            this.first = bounds;\n        }\n        this.last = bounds;\n    }\n    newDestroyable(d) {\n        this.destroyables = this.destroyables || [];\n        this.destroyables.push(d);\n    }\n    finalize(stack) {\n        if (!this.first) {\n            stack.appendComment('');\n        }\n    }\n}\nexport class RemoteBlockTracker extends SimpleBlockTracker {\n    destroy() {\n        super.destroy();\n        clear(this);\n    }\n}\nexport class UpdatableBlockTracker extends SimpleBlockTracker {\n    reset(env) {\n        let { destroyables } = this;\n        if (destroyables && destroyables.length) {\n            for (let i = 0; i < destroyables.length; i++) {\n                env.didDestroy(destroyables[i]);\n            }\n        }\n        let nextSibling = clear(this);\n        this.first = null;\n        this.last = null;\n        this.destroyables = null;\n        this.nesting = 0;\n        return nextSibling;\n    }\n}\nclass BlockListTracker {\n    constructor(parent, boundList) {\n        this.parent = parent;\n        this.boundList = boundList;\n        this.parent = parent;\n        this.boundList = boundList;\n    }\n    destroy() {\n        this.boundList.forEachNode(node => node.destroy());\n    }\n    parentElement() {\n        return this.parent;\n    }\n    firstNode() {\n        let head = this.boundList.head();\n        return head && head.firstNode();\n    }\n    lastNode() {\n        let tail = this.boundList.tail();\n        return tail && tail.lastNode();\n    }\n    openElement(_element) {\n        (false && assert(false, 'Cannot openElement directly inside a block list'));\n    }\n    closeElement() {\n        (false && assert(false, 'Cannot closeElement directly inside a block list'));\n    }\n    didAppendNode(_node) {\n        (false && assert(false, 'Cannot create a new node directly inside a block list'));\n    }\n    didAppendBounds(_bounds) {}\n    newDestroyable(_d) {}\n    finalize(_stack) {}\n}\nexport function clientBuilder(env, cursor) {\n    return NewElementBuilder.forInitialRender(env, cursor);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export class Stack {\n    constructor(vec = []) {\n        this.vec = vec;\n    }\n    clone() {\n        return new Stack(this.vec.slice());\n    }\n    sliceFrom(start) {\n        return new Stack(this.vec.slice(start));\n    }\n    slice(start, end) {\n        return new Stack(this.vec.slice(start, end));\n    }\n    copy(from, to) {\n        this.vec[to] = this.vec[from];\n    }\n    // TODO: how to model u64 argument?\n    writeRaw(pos, value) {\n        // TODO: Grow?\n        this.vec[pos] = value;\n    }\n    writeSmi(pos, value) {\n        this.vec[pos] = encodeSmi(value);\n    }\n    // TODO: partially decoded enum?\n    getRaw(pos) {\n        return this.vec[pos];\n    }\n    getSmi(pos) {\n        return decodeSmi(this.vec[pos]);\n    }\n    reset() {\n        this.vec.length = 0;\n    }\n    len() {\n        return this.vec.length;\n    }\n}\nfunction decodeSmi(smi) {\n    switch (smi & 0b111) {\n        case 0 /* NUMBER */:\n            return smi >> 3;\n        case 4 /* NEGATIVE */:\n            return -(smi >> 3);\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction encodeSmi(primitive) {\n    if (primitive < 0) {\n        return Math.abs(primitive) << 3 | 4 /* NEGATIVE */;\n    } else {\n        return primitive << 3 | 0 /* NUMBER */;\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9AZ2xpbW1lci9sb3ctbGV2ZWwvbGliL2FzbS9zdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFJQSxBQUFNO0FBQ0osZ0JBQW9CLE1BQWEsQUFBRTtBQUFmLGFBQUcsTUFBSCxBQUFHLEFBQVksQUFBRztBQUFDO0FBRXZDLEFBQUs7QUFDSCxBQUFNLGVBQUMsSUFBSSxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFLLEFBQUUsQUFBQyxBQUFDLEFBQ3JDO0FBQUM7QUFFRCxBQUFTLGNBQUMsQUFBVTtBQUNsQixBQUFNLGVBQUMsSUFBSSxBQUFLLE1BQUMsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFLLE1BQUMsQUFBSyxBQUFDLEFBQUMsQUFBQyxBQUMxQztBQUFDO0FBRUQsQUFBSyxVQUFDLEFBQVUsT0FBRSxBQUFRO0FBQ3hCLEFBQU0sZUFBQyxJQUFJLEFBQUssTUFBQyxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUssTUFBQyxBQUFLLE9BQUUsQUFBRyxBQUFDLEFBQUMsQUFBQyxBQUMvQztBQUFDO0FBRUQsQUFBSSxTQUFDLEFBQVMsTUFBRSxBQUFPO0FBQ3JCLEFBQUksYUFBQyxBQUFHLElBQUMsQUFBRSxBQUFDLE1BQUcsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFJLEFBQUMsQUFBQyxBQUNoQztBQUFDO0FBRUQsQUFBbUM7QUFDbkMsQUFBUSxhQUFDLEFBQVEsS0FBRSxBQUFVO0FBQzNCLEFBQWM7QUFDZCxBQUFJLGFBQUMsQUFBRyxJQUFDLEFBQUcsQUFBQyxPQUFHLEFBQUssQUFBQyxBQUN4QjtBQUFDO0FBRUQsQUFBUSxhQUFDLEFBQVEsS0FBRSxBQUFVO0FBQzNCLEFBQUksYUFBQyxBQUFHLElBQUMsQUFBRyxBQUFDLE9BQUcsQUFBUyxVQUFDLEFBQUssQUFBQyxBQUFDLEFBQ25DO0FBQUM7QUFFRCxBQUFnQztBQUNoQyxBQUFNLFdBQUMsQUFBUTtBQUNiLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBRyxJQUFDLEFBQUcsQUFBQyxBQUFDLEFBQ3ZCO0FBQUM7QUFFRCxBQUFNLFdBQUMsQUFBUTtBQUNiLEFBQU0sZUFBQyxBQUFTLFVBQUMsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFHLEFBQUMsQUFBQyxBQUFDLEFBQ2xDO0FBQUM7QUFFRCxBQUFLO0FBQ0gsQUFBSSxhQUFDLEFBQUcsSUFBQyxBQUFNLFNBQUcsQUFBQyxBQUFDLEFBQ3RCO0FBQUM7QUFFRCxBQUFHO0FBQ0QsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFHLElBQUMsQUFBTSxBQUFDLEFBQ3pCO0FBQUMsQUFDRjs7QUFVRCxtQkFBbUIsQUFBVztBQUM1QixBQUFNLEFBQUMsWUFBQyxBQUFHLE1BQUcsQUFBSyxBQUFDLEFBQUMsQUFBQztBQUNwQjtBQUNFLEFBQU0sbUJBQUMsQUFBRyxPQUFJLEFBQUMsQUFBQztBQUNsQjtBQUNFLEFBQU0sbUJBQUMsQUFBQyxFQUFDLEFBQUcsT0FBSSxBQUFDLEFBQUMsQUFBQztBQUNyQjtBQUNFLGtCQUFNLElBQUksQUFBSyxNQUFDLEFBQWEsQUFBQyxBQUFDLEFBQ25DLEFBQUMsQUFDSDs7QUFBQztBQUVELG1CQUFtQixBQUFpQjtBQUNsQyxBQUFFLEFBQUMsUUFBQyxBQUFTLFlBQUcsQUFBQyxBQUFDLEdBQUMsQUFBQztBQUNsQixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUcsSUFBQyxBQUFTLEFBQUMsY0FBSSxBQUFDLE1BQXlCLEFBQUMsQUFDM0Q7QUFBQyxBQUFDLEFBQUksV0FBQyxBQUFDO0FBQ04sQUFBTSxlQUFDLEFBQVMsYUFBSSxBQUFDLE1BQXVCLEFBQUMsQUFDL0M7QUFBQyxBQUNIO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSB1NjQgPSBudW1iZXI7XG5leHBvcnQgdHlwZSB1MzIgPSBudW1iZXI7XG5leHBvcnQgdHlwZSBpMzIgPSBudW1iZXI7XG5cbmV4cG9ydCBjbGFzcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmVjOiB1NjRbXSA9IFtdKSB7fVxuXG4gIGNsb25lKCk6IFN0YWNrIHtcbiAgICByZXR1cm4gbmV3IFN0YWNrKHRoaXMudmVjLnNsaWNlKCkpO1xuICB9XG5cbiAgc2xpY2VGcm9tKHN0YXJ0OiB1MzIpOiBTdGFjayB7XG4gICAgcmV0dXJuIG5ldyBTdGFjayh0aGlzLnZlYy5zbGljZShzdGFydCkpO1xuICB9XG5cbiAgc2xpY2Uoc3RhcnQ6IHUzMiwgZW5kOiBpMzIpOiBTdGFjayB7XG4gICAgcmV0dXJuIG5ldyBTdGFjayh0aGlzLnZlYy5zbGljZShzdGFydCwgZW5kKSk7XG4gIH1cblxuICBjb3B5KGZyb206IHUzMiwgdG86IHUzMikge1xuICAgIHRoaXMudmVjW3RvXSA9IHRoaXMudmVjW2Zyb21dO1xuICB9XG5cbiAgLy8gVE9ETzogaG93IHRvIG1vZGVsIHU2NCBhcmd1bWVudD9cbiAgd3JpdGVSYXcocG9zOiB1MzIsIHZhbHVlOiB1NjQpOiB2b2lkIHtcbiAgICAvLyBUT0RPOiBHcm93P1xuICAgIHRoaXMudmVjW3Bvc10gPSB2YWx1ZTtcbiAgfVxuXG4gIHdyaXRlU21pKHBvczogdTMyLCB2YWx1ZTogaTMyKTogdm9pZCB7XG4gICAgdGhpcy52ZWNbcG9zXSA9IGVuY29kZVNtaSh2YWx1ZSk7XG4gIH1cblxuICAvLyBUT0RPOiBwYXJ0aWFsbHkgZGVjb2RlZCBlbnVtP1xuICBnZXRSYXcocG9zOiB1MzIpOiB1MzIge1xuICAgIHJldHVybiB0aGlzLnZlY1twb3NdO1xuICB9XG5cbiAgZ2V0U21pKHBvczogdTMyKTogaTMyIHtcbiAgICByZXR1cm4gZGVjb2RlU21pKHRoaXMudmVjW3Bvc10pO1xuICB9XG5cbiAgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy52ZWMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIGxlbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnZlYy5sZW5ndGg7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGVudW0gUHJpbWl0aXZlVHlwZSB7XG4gIE5VTUJFUiAgICAgICAgICA9IDBiMDAwLFxuICBGTE9BVCAgICAgICAgICAgPSAwYjAwMSxcbiAgU1RSSU5HICAgICAgICAgID0gMGIwMTAsXG4gIEJPT0xFQU5fT1JfVk9JRCA9IDBiMDExLFxuICBORUdBVElWRSAgICAgICAgPSAwYjEwMFxufVxuXG5mdW5jdGlvbiBkZWNvZGVTbWkoc21pOiBudW1iZXIpOiBudW1iZXIge1xuICBzd2l0Y2ggKHNtaSAmIDBiMTExKSB7XG4gICAgY2FzZSBQcmltaXRpdmVUeXBlLk5VTUJFUjpcbiAgICAgIHJldHVybiBzbWkgPj4gMztcbiAgICBjYXNlIFByaW1pdGl2ZVR5cGUuTkVHQVRJVkU6XG4gICAgICByZXR1cm4gLShzbWkgPj4gMyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbmNvZGVTbWkocHJpbWl0aXZlOiBudW1iZXIpIHtcbiAgaWYgKHByaW1pdGl2ZSA8IDApIHtcbiAgICByZXR1cm4gTWF0aC5hYnMocHJpbWl0aXZlKSA8PCAzIHwgUHJpbWl0aXZlVHlwZS5ORUdBVElWRTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gcHJpbWl0aXZlIDw8IDMgfCBQcmltaXRpdmVUeXBlLk5VTUJFUjtcbiAgfVxufVxuIl19","\nimport { unreachable } from '@glimmer/util';\nimport { Stack as WasmStack } from '@glimmer/low-level';\nconst HI = 0x80000000;\nconst MASK = 0x7FFFFFFF;\nexport class InnerStack {\n    constructor(inner = new WasmStack(), js = []) {\n        this.inner = inner;\n        this.js = js;\n    }\n    slice(start, end) {\n        let inner;\n        if (typeof start === 'number' && typeof end === 'number') {\n            inner = this.inner.slice(start, end);\n        } else if (typeof start === 'number' && end === undefined) {\n            inner = this.inner.sliceFrom(start);\n        } else {\n            inner = this.inner.clone();\n        }\n        return new InnerStack(inner, this.js.slice(start, end));\n    }\n    sliceInner(start, end) {\n        let out = [];\n        for (let i = start; i < end; i++) {\n            out.push(this.get(i));\n        }\n        return out;\n    }\n    copy(from, to) {\n        this.inner.copy(from, to);\n    }\n    write(pos, value) {\n        if (isImmediate(value)) {\n            this.inner.writeRaw(pos, encodeImmediate(value));\n        } else {\n            let idx = this.js.length;\n            this.js.push(value);\n            this.inner.writeRaw(pos, idx | HI);\n        }\n    }\n    writeSmi(pos, value) {\n        this.inner.writeSmi(pos, value);\n    }\n    writeImmediate(pos, value) {\n        this.inner.writeRaw(pos, value);\n    }\n    get(pos) {\n        let value = this.inner.getRaw(pos);\n        if (value & HI) {\n            return this.js[value & MASK];\n        } else {\n            return decodeImmediate(value);\n        }\n    }\n    getSmi(pos) {\n        return this.inner.getSmi(pos);\n    }\n    reset() {\n        this.inner.reset();\n    }\n    get length() {\n        return this.inner.len();\n    }\n}\nexport default class EvaluationStack {\n    constructor(stack, fp, sp) {\n        this.stack = stack;\n        this.fp = fp;\n        this.sp = sp;\n        if (false) {\n            Object.seal(this);\n        }\n    }\n    static empty() {\n        return new this(new InnerStack(), 0, -1);\n    }\n    static restore(snapshot) {\n        let stack = new InnerStack();\n        for (let i = 0; i < snapshot.length; i++) {\n            stack.write(i, snapshot[i]);\n        }\n        return new this(stack, 0, snapshot.length - 1);\n    }\n    push(value) {\n        this.stack.write(++this.sp, value);\n    }\n    pushSmi(value) {\n        this.stack.writeSmi(++this.sp, value);\n    }\n    pushImmediate(value) {\n        this.stack.writeImmediate(++this.sp, encodeImmediate(value));\n    }\n    pushEncodedImmediate(value) {\n        this.stack.writeImmediate(++this.sp, value);\n    }\n    pushNull() {\n        this.stack.writeImmediate(++this.sp, 19 /* Null */);\n    }\n    dup(position = this.sp) {\n        this.stack.copy(position, ++this.sp);\n    }\n    copy(from, to) {\n        this.stack.copy(from, to);\n    }\n    pop(n = 1) {\n        let top = this.stack.get(this.sp);\n        this.sp -= n;\n        return top;\n    }\n    popSmi() {\n        return this.stack.getSmi(this.sp--);\n    }\n    peek(offset = 0) {\n        return this.stack.get(this.sp - offset);\n    }\n    peekSmi(offset = 0) {\n        return this.stack.getSmi(this.sp - offset);\n    }\n    get(offset, base = this.fp) {\n        return this.stack.get(base + offset);\n    }\n    getSmi(offset, base = this.fp) {\n        return this.stack.getSmi(base + offset);\n    }\n    set(value, offset, base = this.fp) {\n        this.stack.write(base + offset, value);\n    }\n    slice(start, end) {\n        return this.stack.slice(start, end);\n    }\n    sliceArray(start, end) {\n        return this.stack.sliceInner(start, end);\n    }\n    capture(items) {\n        let end = this.sp + 1;\n        let start = end - items;\n        return this.stack.sliceInner(start, end);\n    }\n    reset() {\n        this.stack.reset();\n    }\n    toArray() {\n        return this.stack.sliceInner(this.fp, this.sp + 1);\n    }\n}\nfunction isImmediate(value) {\n    let type = typeof value;\n    if (value === null || value === undefined) return true;\n    switch (type) {\n        case 'boolean':\n        case 'undefined':\n            return true;\n        case 'number':\n            // not an integer\n            if (value % 1 !== 0) return false;\n            let abs = Math.abs(value);\n            // too big\n            if (abs & HI) return false;\n            return true;\n        default:\n            return false;\n    }\n}\nfunction encodeSmi(primitive) {\n    if (primitive < 0) {\n        return Math.abs(primitive) << 3 | 4 /* NEGATIVE */;\n    } else {\n        return primitive << 3 | 0 /* NUMBER */;\n    }\n}\nfunction encodeImmediate(primitive) {\n    switch (typeof primitive) {\n        case 'number':\n            return encodeSmi(primitive);\n        case 'boolean':\n            return primitive ? 11 /* True */ : 3 /* False */;\n        case 'object':\n            // assume null\n            return 19 /* Null */;\n        case 'undefined':\n            return 27 /* Undef */;\n        default:\n            throw unreachable();\n    }\n}\nfunction decodeSmi(smi) {\n    switch (smi & 0b111) {\n        case 0 /* NUMBER */:\n            return smi >> 3;\n        case 4 /* NEGATIVE */:\n            return -(smi >> 3);\n        default:\n            throw unreachable();\n    }\n}\nfunction decodeImmediate(immediate) {\n    switch (immediate) {\n        case 3 /* False */:\n            return false;\n        case 11 /* True */:\n            return true;\n        case 19 /* Null */:\n            return null;\n        case 27 /* Undef */:\n            return undefined;\n        default:\n            return decodeSmi(immediate);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { clear, move as moveBounds } from '../bounds';\nimport { NewElementBuilder } from './element-builder';\nimport { Stack, LinkedList, dict } from '@glimmer/util';\nimport { IteratorSynchronizer,\n// Tags\ncombine, UpdatableTag, combineSlice, CONSTANT_TAG, INITIAL } from '@glimmer/reference';\nimport { UpdatingOpcode } from '../opcodes';\nimport EvaluationStack from './stack';\nimport VM from './append';\nexport default class UpdatingVM {\n    constructor(env, program, { alwaysRevalidate = false }) {\n        this.frameStack = new Stack();\n        this.env = env;\n        this.constants = program.constants;\n        this.dom = env.getDOM();\n        this.alwaysRevalidate = alwaysRevalidate;\n    }\n    execute(opcodes, handler) {\n        let { frameStack } = this;\n        this.try(opcodes, handler);\n        while (true) {\n            if (frameStack.isEmpty()) break;\n            let opcode = this.frame.nextStatement();\n            if (opcode === null) {\n                this.frameStack.pop();\n                continue;\n            }\n            opcode.evaluate(this);\n        }\n    }\n    get frame() {\n        return this.frameStack.current;\n    }\n    goto(op) {\n        this.frame.goto(op);\n    }\n    try(ops, handler) {\n        this.frameStack.push(new UpdatingVMFrame(ops, handler));\n    }\n    throw() {\n        this.frame.handleException();\n        this.frameStack.pop();\n    }\n}\nexport class BlockOpcode extends UpdatingOpcode {\n    constructor(start, state, bounds, children) {\n        super();\n        this.start = start;\n        this.state = state;\n        this.type = \"block\";\n        this.next = null;\n        this.prev = null;\n        this.children = children;\n        this.bounds = bounds;\n    }\n    parentElement() {\n        return this.bounds.parentElement();\n    }\n    firstNode() {\n        return this.bounds.firstNode();\n    }\n    lastNode() {\n        return this.bounds.lastNode();\n    }\n    evaluate(vm) {\n        vm.try(this.children, null);\n    }\n    destroy() {\n        this.bounds.destroy();\n    }\n    didDestroy() {\n        this.state.env.didDestroy(this.bounds);\n    }\n}\nexport class TryOpcode extends BlockOpcode {\n    constructor(start, state, bounds, children) {\n        super(start, state, bounds, children);\n        this.type = \"try\";\n        this.tag = this._tag = UpdatableTag.create(CONSTANT_TAG);\n    }\n    didInitializeChildren() {\n        this._tag.inner.update(combineSlice(this.children));\n    }\n    evaluate(vm) {\n        vm.try(this.children, this);\n    }\n    handleException() {\n        let { state, bounds, children, start, prev, next } = this;\n        children.clear();\n        let elementStack = NewElementBuilder.resume(state.env, bounds, bounds.reset(state.env));\n        let vm = VM.resume(state, elementStack);\n        let updating = new LinkedList();\n        vm.execute(start, vm => {\n            vm.stack = EvaluationStack.restore(state.stack);\n            vm.updatingOpcodeStack.push(updating);\n            vm.updateWith(this);\n            vm.updatingOpcodeStack.push(children);\n        });\n        this.prev = prev;\n        this.next = next;\n    }\n}\nclass ListRevalidationDelegate {\n    constructor(opcode, marker) {\n        this.opcode = opcode;\n        this.marker = marker;\n        this.didInsert = false;\n        this.didDelete = false;\n        this.map = opcode.map;\n        this.updating = opcode['children'];\n    }\n    insert(key, item, memo, before) {\n        let { map, opcode, updating } = this;\n        let nextSibling = null;\n        let reference = null;\n        if (before) {\n            reference = map[before];\n            nextSibling = reference['bounds'].firstNode();\n        } else {\n            nextSibling = this.marker;\n        }\n        let vm = opcode.vmForInsertion(nextSibling);\n        let tryOpcode = null;\n        let { start } = opcode;\n        vm.execute(start, vm => {\n            map[key] = tryOpcode = vm.iterate(memo, item);\n            vm.updatingOpcodeStack.push(new LinkedList());\n            vm.updateWith(tryOpcode);\n            vm.updatingOpcodeStack.push(tryOpcode.children);\n        });\n        updating.insertBefore(tryOpcode, reference);\n        this.didInsert = true;\n    }\n    retain(_key, _item, _memo) {}\n    move(key, _item, _memo, before) {\n        let { map, updating } = this;\n        let entry = map[key];\n        let reference = map[before] || null;\n        if (before) {\n            moveBounds(entry, reference.firstNode());\n        } else {\n            moveBounds(entry, this.marker);\n        }\n        updating.remove(entry);\n        updating.insertBefore(entry, reference);\n    }\n    delete(key) {\n        let { map } = this;\n        let opcode = map[key];\n        opcode.didDestroy();\n        clear(opcode);\n        this.updating.remove(opcode);\n        delete map[key];\n        this.didDelete = true;\n    }\n    done() {\n        this.opcode.didInitializeChildren(this.didInsert || this.didDelete);\n    }\n}\nexport class ListBlockOpcode extends BlockOpcode {\n    constructor(start, state, bounds, children, artifacts) {\n        super(start, state, bounds, children);\n        this.type = \"list-block\";\n        this.map = dict();\n        this.lastIterated = INITIAL;\n        this.artifacts = artifacts;\n        let _tag = this._tag = UpdatableTag.create(CONSTANT_TAG);\n        this.tag = combine([artifacts.tag, _tag]);\n    }\n    didInitializeChildren(listDidChange = true) {\n        this.lastIterated = this.artifacts.tag.value();\n        if (listDidChange) {\n            this._tag.inner.update(combineSlice(this.children));\n        }\n    }\n    evaluate(vm) {\n        let { artifacts, lastIterated } = this;\n        if (!artifacts.tag.validate(lastIterated)) {\n            let { bounds } = this;\n            let { dom } = vm;\n            let marker = dom.createComment('');\n            dom.insertAfter(bounds.parentElement(), marker, bounds.lastNode());\n            let target = new ListRevalidationDelegate(this, marker);\n            let synchronizer = new IteratorSynchronizer({ target, artifacts });\n            synchronizer.sync();\n            this.parentElement().removeChild(marker);\n        }\n        // Run now-updated updating opcodes\n        super.evaluate(vm);\n    }\n    vmForInsertion(nextSibling) {\n        let { bounds, state } = this;\n        let elementStack = NewElementBuilder.forInitialRender(state.env, { element: bounds.parentElement(), nextSibling });\n        return VM.resume(state, elementStack);\n    }\n}\nclass UpdatingVMFrame {\n    constructor(ops, exceptionHandler) {\n        this.ops = ops;\n        this.exceptionHandler = exceptionHandler;\n        this.current = ops.head();\n    }\n    goto(op) {\n        this.current = op;\n    }\n    nextStatement() {\n        let { current, ops } = this;\n        if (current) this.current = ops.nextNode(current);\n        return current;\n    }\n    handleException() {\n        if (this.exceptionHandler) {\n            this.exceptionHandler.handleException();\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { clear } from '../bounds';\nimport UpdatingVM from './update';\nexport default class RenderResult {\n    constructor(env, program, updating, bounds) {\n        this.env = env;\n        this.program = program;\n        this.updating = updating;\n        this.bounds = bounds;\n    }\n    rerender({ alwaysRevalidate = false } = { alwaysRevalidate: false }) {\n        let { env, program, updating } = this;\n        let vm = new UpdatingVM(env, program, { alwaysRevalidate });\n        vm.execute(updating, this);\n    }\n    parentElement() {\n        return this.bounds.parentElement();\n    }\n    firstNode() {\n        return this.bounds.firstNode();\n    }\n    lastNode() {\n        return this.bounds.lastNode();\n    }\n    handleException() {\n        throw \"this should never happen\";\n    }\n    destroy() {\n        this.bounds.destroy();\n        clear(this.bounds);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyLXJlc3VsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL0BnbGltbWVyL3J1bnRpbWUvbGliL3ZtL3JlbmRlci1yZXN1bHQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsQUFBTyxTQUFxQixBQUFLLEFBQUUsYUFBTSxBQUFXLEFBQUM7QUFDckQsT0FBTyxBQUFnQyxnQkFBTSxBQUFVLEFBQUM7QUFLeEQsQUFBTSxBQUFDLEFBQU87QUFDWixnQkFDUyxBQUFnQixLQUNmLEFBQStCLFNBQy9CLEFBQW9DLFVBQ3BDLEFBQXlCO0FBSDFCLGFBQUcsTUFBSCxBQUFHLEFBQWE7QUFDZixhQUFPLFVBQVAsQUFBTyxBQUF3QjtBQUMvQixhQUFRLFdBQVIsQUFBUSxBQUE0QjtBQUNwQyxhQUFNLFNBQU4sQUFBTSxBQUFtQixBQUNoQztBQUFDO0FBRUosQUFBUSxhQUFDLEVBQUUsQUFBZ0IsbUJBQUcsQUFBSyxBQUFFLFVBQUcsRUFBRSxBQUFnQixrQkFBRSxBQUFLLEFBQUU7QUFDakUsWUFBSSxFQUFFLEFBQUcsS0FBRSxBQUFPLFNBQUUsQUFBUSxBQUFFLGFBQUcsQUFBSSxBQUFDO0FBQ3RDLFlBQUksQUFBRSxLQUFHLElBQUksQUFBVSxXQUFDLEFBQUcsS0FBRSxBQUFPLFNBQUUsRUFBRSxBQUFnQixBQUFFLEFBQUMsQUFBQztBQUM1RCxBQUFFLFdBQUMsQUFBTyxRQUFDLEFBQVEsVUFBRSxBQUFJLEFBQUMsQUFBQyxBQUM3QjtBQUFDO0FBRUQsQUFBYTtBQUNYLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBTSxPQUFDLEFBQWEsQUFBRSxBQUFDLEFBQ3JDO0FBQUM7QUFFRCxBQUFTO0FBQ1AsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFNLE9BQUMsQUFBUyxBQUFFLEFBQUMsQUFDakM7QUFBQztBQUVELEFBQVE7QUFDTixBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQU0sT0FBQyxBQUFRLEFBQUUsQUFBQyxBQUNoQztBQUFDO0FBRUQsQUFBZTtBQUNiLGNBQU0sQUFBMEIsQUFBQyxBQUNuQztBQUFDO0FBRUQsQUFBTztBQUNMLEFBQUksYUFBQyxBQUFNLE9BQUMsQUFBTyxBQUFFLEFBQUM7QUFDdEIsQUFBSyxjQUFDLEFBQUksS0FBQyxBQUFNLEFBQUMsQUFBQyxBQUNyQjtBQUFDLEFBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcHRpb24sIExpbmtlZExpc3QgfSBmcm9tICdAZ2xpbW1lci91dGlsJztcbmltcG9ydCBFbnZpcm9ubWVudCBmcm9tICcuLi9lbnZpcm9ubWVudCc7XG5pbXBvcnQgeyBEZXN0cm95YWJsZUJvdW5kcywgY2xlYXIgfSBmcm9tICcuLi9ib3VuZHMnO1xuaW1wb3J0IFVwZGF0aW5nVk0sIHsgRXhjZXB0aW9uSGFuZGxlciB9IGZyb20gJy4vdXBkYXRlJztcbmltcG9ydCB7IFVwZGF0aW5nT3Bjb2RlIH0gZnJvbSAnLi4vb3Bjb2Rlcyc7XG5pbXBvcnQgeyBTaW1wbGUsIE9wYXF1ZSB9IGZyb20gJ0BnbGltbWVyL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgUnVudGltZVByb2dyYW0gfSBmcm9tIFwiQGdsaW1tZXIvcHJvZ3JhbVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZW5kZXJSZXN1bHQgaW1wbGVtZW50cyBEZXN0cm95YWJsZUJvdW5kcywgRXhjZXB0aW9uSGFuZGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbnY6IEVudmlyb25tZW50LFxuICAgIHByaXZhdGUgcHJvZ3JhbTogUnVudGltZVByb2dyYW08T3BhcXVlPixcbiAgICBwcml2YXRlIHVwZGF0aW5nOiBMaW5rZWRMaXN0PFVwZGF0aW5nT3Bjb2RlPixcbiAgICBwcml2YXRlIGJvdW5kczogRGVzdHJveWFibGVCb3VuZHNcbiAgKSB7fVxuXG4gIHJlcmVuZGVyKHsgYWx3YXlzUmV2YWxpZGF0ZSA9IGZhbHNlIH0gPSB7IGFsd2F5c1JldmFsaWRhdGU6IGZhbHNlIH0pIHtcbiAgICBsZXQgeyBlbnYsIHByb2dyYW0sIHVwZGF0aW5nIH0gPSB0aGlzO1xuICAgIGxldCB2bSA9IG5ldyBVcGRhdGluZ1ZNKGVudiwgcHJvZ3JhbSwgeyBhbHdheXNSZXZhbGlkYXRlIH0pO1xuICAgIHZtLmV4ZWN1dGUodXBkYXRpbmcsIHRoaXMpO1xuICB9XG5cbiAgcGFyZW50RWxlbWVudCgpOiBTaW1wbGUuRWxlbWVudCB7XG4gICAgcmV0dXJuIHRoaXMuYm91bmRzLnBhcmVudEVsZW1lbnQoKTtcbiAgfVxuXG4gIGZpcnN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+IHtcbiAgICByZXR1cm4gdGhpcy5ib3VuZHMuZmlyc3ROb2RlKCk7XG4gIH1cblxuICBsYXN0Tm9kZSgpOiBPcHRpb248U2ltcGxlLk5vZGU+IHtcbiAgICByZXR1cm4gdGhpcy5ib3VuZHMubGFzdE5vZGUoKTtcbiAgfVxuXG4gIGhhbmRsZUV4Y2VwdGlvbigpIHtcbiAgICB0aHJvdyBcInRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlblwiO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmJvdW5kcy5kZXN0cm95KCk7XG4gICAgY2xlYXIodGhpcy5ib3VuZHMpO1xuICB9XG59XG4iXX0=","import { Register } from '@glimmer/vm';\nimport { Scope } from '../environment';\nimport { Stack, LinkedList, ListSlice, assert } from '@glimmer/util';\nimport { combineSlice } from '@glimmer/reference';\nimport { LabelOpcode, JumpIfNotModifiedOpcode, DidModifyOpcode } from '../compiled/opcodes/vm';\nimport LowLevelVM from './low-level';\nimport { ListBlockOpcode, TryOpcode } from './update';\nimport RenderResult from './render-result';\nimport EvaluationStack from './stack';\nimport { APPEND_OPCODES } from '../opcodes';\nimport { UNDEFINED_REFERENCE } from '../references';\nexport default class VM {\n    constructor(program, env, scope, dynamicScope, elementStack) {\n        this.program = program;\n        this.env = env;\n        this.elementStack = elementStack;\n        this.dynamicScopeStack = new Stack();\n        this.scopeStack = new Stack();\n        this.updatingOpcodeStack = new Stack();\n        this.cacheGroups = new Stack();\n        this.listBlockStack = new Stack();\n        this.s0 = null;\n        this.s1 = null;\n        this.t0 = null;\n        this.t1 = null;\n        this.v0 = null;\n        this.env = env;\n        this.heap = program.heap;\n        this.constants = program.constants;\n        this.elementStack = elementStack;\n        this.scopeStack.push(scope);\n        this.dynamicScopeStack.push(dynamicScope);\n        this.inner = new LowLevelVM(EvaluationStack.empty(), this.heap, program, {\n            debugBefore: opcode => {\n                return APPEND_OPCODES.debugBefore(this, opcode, opcode.type);\n            },\n            debugAfter: (opcode, state) => {\n                APPEND_OPCODES.debugAfter(this, opcode, opcode.type, state);\n            }\n        });\n    }\n    get stack() {\n        return this.inner.stack;\n    }\n    set stack(value) {\n        this.inner.stack = value;\n    }\n    /* Registers */\n    set currentOpSize(value) {\n        this.inner.currentOpSize = value;\n    }\n    get currentOpSize() {\n        return this.inner.currentOpSize;\n    }\n    get pc() {\n        return this.inner.pc;\n    }\n    set pc(value) {\n        (false && assert(typeof value === 'number' && value >= -1, `invalid pc: ${value}`));\n\n        this.inner.pc = value;\n    }\n    get ra() {\n        return this.inner.ra;\n    }\n    set ra(value) {\n        this.inner.ra = value;\n    }\n    get fp() {\n        return this.stack.fp;\n    }\n    set fp(fp) {\n        this.stack.fp = fp;\n    }\n    get sp() {\n        return this.stack.sp;\n    }\n    set sp(sp) {\n        this.stack.sp = sp;\n    }\n    // Fetch a value from a register onto the stack\n    fetch(register) {\n        this.stack.push(this[Register[register]]);\n    }\n    // Load a value from the stack into a register\n    load(register) {\n        this[Register[register]] = this.stack.pop();\n    }\n    // Fetch a value from a register\n    fetchValue(register) {\n        return this[Register[register]];\n    }\n    // Load a value into a register\n    loadValue(register, value) {\n        this[Register[register]] = value;\n    }\n    /**\n     * Migrated to Inner\n     */\n    // Start a new frame and save $ra and $fp on the stack\n    pushFrame() {\n        this.inner.pushFrame();\n    }\n    // Restore $ra, $sp and $fp\n    popFrame() {\n        this.inner.popFrame();\n    }\n    // Jump to an address in `program`\n    goto(offset) {\n        this.inner.goto(offset);\n    }\n    // Save $pc into $ra, then jump to a new address in `program` (jal in MIPS)\n    call(handle) {\n        this.inner.call(handle);\n    }\n    // Put a specific `program` address in $ra\n    returnTo(offset) {\n        this.inner.returnTo(offset);\n    }\n    // Return to the `program` address stored in $ra\n    return() {\n        this.inner.return();\n    }\n    /**\n     * End of migrated.\n     */\n    static initial(program, env, self, args, dynamicScope, elementStack, handle) {\n        let scopeSize = program.heap.scopesizeof(handle);\n        let scope = Scope.root(self, scopeSize);\n        if (args) {}\n        let vm = new VM(program, env, scope, dynamicScope, elementStack);\n        vm.pc = vm.heap.getaddr(handle);\n        vm.updatingOpcodeStack.push(new LinkedList());\n        return vm;\n    }\n    static empty(program, env, elementStack) {\n        let dynamicScope = {\n            get() {\n                return UNDEFINED_REFERENCE;\n            },\n            set() {\n                return UNDEFINED_REFERENCE;\n            },\n            child() {\n                return dynamicScope;\n            }\n        };\n        let vm = new VM(program, env, Scope.root(UNDEFINED_REFERENCE, 0), dynamicScope, elementStack);\n        vm.updatingOpcodeStack.push(new LinkedList());\n        return vm;\n    }\n    static resume({ program, env, scope, dynamicScope }, stack) {\n        return new VM(program, env, scope, dynamicScope, stack);\n    }\n    capture(args) {\n        return {\n            env: this.env,\n            program: this.program,\n            dynamicScope: this.dynamicScope(),\n            scope: this.scope(),\n            stack: this.stack.capture(args)\n        };\n    }\n    beginCacheGroup() {\n        this.cacheGroups.push(this.updating().tail());\n    }\n    commitCacheGroup() {\n        //        JumpIfNotModified(END)\n        //        (head)\n        //        (....)\n        //        (tail)\n        //        DidModify\n        // END:   Noop\n        let END = new LabelOpcode(\"END\");\n        let opcodes = this.updating();\n        let marker = this.cacheGroups.pop();\n        let head = marker ? opcodes.nextNode(marker) : opcodes.head();\n        let tail = opcodes.tail();\n        let tag = combineSlice(new ListSlice(head, tail));\n        let guard = new JumpIfNotModifiedOpcode(tag, END);\n        opcodes.insertBefore(guard, head);\n        opcodes.append(new DidModifyOpcode(guard));\n        opcodes.append(END);\n    }\n    enter(args) {\n        let updating = new LinkedList();\n        let state = this.capture(args);\n        let tracker = this.elements().pushUpdatableBlock();\n        let tryOpcode = new TryOpcode(this.heap.gethandle(this.pc), state, tracker, updating);\n        this.didEnter(tryOpcode);\n    }\n    iterate(memo, value) {\n        let stack = this.stack;\n        stack.push(value);\n        stack.push(memo);\n        let state = this.capture(2);\n        let tracker = this.elements().pushUpdatableBlock();\n        // let ip = this.ip;\n        // this.ip = end + 4;\n        // this.frames.push(ip);\n        return new TryOpcode(this.heap.gethandle(this.pc), state, tracker, new LinkedList());\n    }\n    enterItem(key, opcode) {\n        this.listBlock().map[key] = opcode;\n        this.didEnter(opcode);\n    }\n    enterList(relativeStart) {\n        let updating = new LinkedList();\n        let state = this.capture(0);\n        let tracker = this.elements().pushBlockList(updating);\n        let artifacts = this.stack.peek().artifacts;\n        let addr = this.pc + relativeStart - this.currentOpSize;\n        let start = this.heap.gethandle(addr);\n        let opcode = new ListBlockOpcode(start, state, tracker, updating, artifacts);\n        this.listBlockStack.push(opcode);\n        this.didEnter(opcode);\n    }\n    didEnter(opcode) {\n        this.updateWith(opcode);\n        this.updatingOpcodeStack.push(opcode.children);\n    }\n    exit() {\n        this.elements().popBlock();\n        this.updatingOpcodeStack.pop();\n        let parent = this.updating().tail();\n        parent.didInitializeChildren();\n    }\n    exitList() {\n        this.exit();\n        this.listBlockStack.pop();\n    }\n    updateWith(opcode) {\n        this.updating().append(opcode);\n    }\n    listBlock() {\n        return this.listBlockStack.current;\n    }\n    updating() {\n        return this.updatingOpcodeStack.current;\n    }\n    elements() {\n        return this.elementStack;\n    }\n    scope() {\n        return this.scopeStack.current;\n    }\n    dynamicScope() {\n        return this.dynamicScopeStack.current;\n    }\n    pushChildScope() {\n        this.scopeStack.push(this.scope().child());\n    }\n    pushDynamicScope() {\n        let child = this.dynamicScope().child();\n        this.dynamicScopeStack.push(child);\n        return child;\n    }\n    pushRootScope(size, bindCaller) {\n        let scope = Scope.sized(size);\n        if (bindCaller) scope.bindCallerScope(this.scope());\n        this.scopeStack.push(scope);\n        return scope;\n    }\n    pushScope(scope) {\n        this.scopeStack.push(scope);\n    }\n    popScope() {\n        this.scopeStack.pop();\n    }\n    popDynamicScope() {\n        this.dynamicScopeStack.pop();\n    }\n    newDestroyable(d) {\n        this.elements().didAddDestroyable(d);\n    }\n    /// SCOPE HELPERS\n    getSelf() {\n        return this.scope().getSelf();\n    }\n    referenceForSymbol(symbol) {\n        return this.scope().getSymbol(symbol);\n    }\n    /// EXECUTION\n    execute(start, initialize) {\n        this.pc = this.heap.getaddr(start);\n        if (initialize) initialize(this);\n        let result;\n        while (true) {\n            result = this.next();\n            if (result.done) break;\n        }\n        return result.value;\n    }\n    next() {\n        let { env, program, updatingOpcodeStack, elementStack } = this;\n        let opcode = this.inner.nextStatement();\n        let result;\n        if (opcode !== null) {\n            this.inner.evaluateOuter(opcode, this);\n            result = { done: false, value: null };\n        } else {\n            // Unload the stack\n            this.stack.reset();\n            result = {\n                done: true,\n                value: new RenderResult(env, program, updatingOpcodeStack.pop(), elementStack.popBlock())\n            };\n        }\n        return result;\n    }\n    bindDynamicScope(names) {\n        let scope = this.dynamicScope();\n        for (let i = names.length - 1; i >= 0; i--) {\n            let name = this.constants.getString(names[i]);\n            scope.set(name, this.stack.pop());\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { assign } from '@glimmer/util';\nimport { VM } from './vm';\nimport { EMPTY_ARGS } from './vm/arguments';\nimport { CompilableTemplate } from \"@glimmer/opcode-compiler\";\nexport class TemplateIterator {\n    constructor(vm) {\n        this.vm = vm;\n    }\n    next() {\n        return this.vm.next();\n    }\n}\nlet clientId = 0;\nexport default function templateFactory({ id: templateId, meta, block }) {\n    let parsedBlock;\n    let id = templateId || `client-${clientId++}`;\n    let create = (options, envMeta) => {\n        let newMeta = envMeta ? assign({}, envMeta, meta) : meta;\n        if (!parsedBlock) {\n            parsedBlock = JSON.parse(block);\n        }\n        return new ScannableTemplate(options, { id, block: parsedBlock, referrer: newMeta });\n    };\n    return { id, meta, create };\n}\nexport class ScannableTemplate {\n    constructor(options, parsedLayout) {\n        this.options = options;\n        this.parsedLayout = parsedLayout;\n        this.layout = null;\n        this.partial = null;\n        let { block } = parsedLayout;\n        this.symbols = block.symbols;\n        this.hasEval = block.hasEval;\n        this.statements = block.statements;\n        this.referrer = parsedLayout.referrer;\n        this.id = parsedLayout.id || `client-${clientId++}`;\n    }\n    renderLayout(options) {\n        let { env, self, dynamicScope, args = EMPTY_ARGS, builder } = options;\n        let layout = this.asLayout();\n        let handle = layout.compile();\n        let vm = VM.initial(this.options.program, env, self, args, dynamicScope, builder, handle);\n        return new TemplateIterator(vm);\n    }\n    asLayout() {\n        if (this.layout) return this.layout;\n        return this.layout = compilable(this.parsedLayout, this.options, false);\n    }\n    asPartial() {\n        if (this.partial) return this.partial;\n        return this.partial = compilable(this.parsedLayout, this.options, true);\n    }\n}\nexport function compilable(layout, options, asPartial) {\n    let { block, referrer } = layout;\n    let { hasEval, symbols } = block;\n    let compileOptions = assign({}, options, { asPartial, referrer });\n    return new CompilableTemplate(block.statements, layout, compileOptions, { referrer, hasEval, symbols });\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/** @internal */\nexport function hasStaticLayout(state, manager) {\n    return manager.getCapabilities(state).dynamicLayout === false;\n}\n/** @internal */\nexport function hasDynamicLayout(state, manager) {\n    return manager.getCapabilities(state).dynamicLayout === true;\n}\nexport const DEFAULT_CAPABILITIES = {\n    dynamicLayout: true,\n    dynamicTag: true,\n    prepareArgs: true,\n    createArgs: true,\n    attributeHook: false,\n    elementHook: false\n};\nexport const MINIMAL_CAPABILITIES = {\n    dynamicLayout: false,\n    dynamicTag: false,\n    prepareArgs: false,\n    createArgs: false,\n    attributeHook: false,\n    elementHook: false\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import { NewElementBuilder, RemoteBlockTracker } from \"./element-builder\";\nimport { bounds, Cursor } from '../bounds';\nimport { assert } from \"@glimmer/util\";\nimport { SVG_NAMESPACE } from '../dom/helper';\nexport class RehydratingCursor extends Cursor {\n    constructor(element, nextSibling, startingBlockDepth) {\n        super(element, nextSibling);\n        this.startingBlockDepth = startingBlockDepth;\n        this.candidate = null;\n        this.injectedOmittedNode = false;\n        this.openBlockDepth = startingBlockDepth - 1;\n    }\n}\nexport class RehydrateBuilder extends NewElementBuilder {\n    // private candidate: Option<Simple.Node> = null;\n    constructor(env, parentNode, nextSibling) {\n        super(env, parentNode, nextSibling);\n        this.unmatchedAttributes = null;\n        this.blockDepth = 0;\n        if (nextSibling) throw new Error(\"Rehydration with nextSibling not supported\");\n        this.candidate = this.currentCursor.element.firstChild;\n        (false && assert(this.candidate && isComment(this.candidate) && this.candidate.nodeValue === '%+b:0%', 'Must have opening comment <!--%+b:0%--> for rehydration.'));\n    }\n    get currentCursor() {\n        return this.cursorStack.current;\n    }\n    get candidate() {\n        if (this.currentCursor) {\n            return this.currentCursor.candidate;\n        }\n        return null;\n    }\n    set candidate(node) {\n        this.currentCursor.candidate = node;\n    }\n    pushElement(element, nextSibling) {\n        let { blockDepth = 0 } = this;\n        let cursor = new RehydratingCursor(element, nextSibling, blockDepth);\n        let currentCursor = this.currentCursor;\n        if (currentCursor) {\n            if (currentCursor.candidate) {\n                /**\n                 * <div>   <---------------  currentCursor.element\n                 *   <!--%+b:1%-->\n                 *   <div> <---------------  currentCursor.candidate -> cursor.element\n                 *     <!--%+b:2%--> <-  currentCursor.candidate.firstChild -> cursor.candidate\n                 *     Foo\n                 *     <!--%-b:2%-->\n                 *   </div>\n                 *   <!--%-b:1%-->  <--  becomes currentCursor.candidate\n                 */\n                // where to rehydrate from if we are in rehydration mode\n                cursor.candidate = element.firstChild;\n                // where to continue when we pop\n                currentCursor.candidate = element.nextSibling;\n            }\n        }\n        this.cursorStack.push(cursor);\n    }\n    clearMismatch(candidate) {\n        let current = candidate;\n        let currentCursor = this.currentCursor;\n        if (currentCursor !== null) {\n            let openBlockDepth = currentCursor.openBlockDepth;\n            if (openBlockDepth >= currentCursor.startingBlockDepth) {\n                while (current && !(isComment(current) && getCloseBlockDepth(current) === openBlockDepth)) {\n                    current = this.remove(current);\n                }\n                (false && assert(current !== null, 'should have found closing block'));\n            } else {\n                while (current !== null) {\n                    current = this.remove(current);\n                }\n            }\n            // current cursor parentNode should be openCandidate if element\n            // or openCandidate.parentNode if comment\n            currentCursor.nextSibling = current;\n            // disable rehydration until we popElement or closeBlock for openBlockDepth\n            currentCursor.candidate = null;\n        }\n    }\n    __openBlock() {\n        let { currentCursor } = this;\n        if (currentCursor === null) return;\n        let blockDepth = this.blockDepth;\n        this.blockDepth++;\n        let { candidate } = currentCursor;\n        if (candidate === null) return;\n        if (isComment(candidate) && getOpenBlockDepth(candidate) === blockDepth) {\n            currentCursor.candidate = this.remove(candidate);\n            currentCursor.openBlockDepth = blockDepth;\n        } else {\n            this.clearMismatch(candidate);\n        }\n    }\n    __closeBlock() {\n        let { currentCursor } = this;\n        if (currentCursor === null) return;\n        // openBlock is the last rehydrated open block\n        let openBlockDepth = currentCursor.openBlockDepth;\n        // this currently is the expected next open block depth\n        this.blockDepth--;\n        let { candidate } = currentCursor;\n        // rehydrating\n        if (candidate !== null) {\n            (false && assert(openBlockDepth === this.blockDepth, 'when rehydrating, openBlockDepth should match this.blockDepth here'));\n\n            if (isComment(candidate) && getCloseBlockDepth(candidate) === openBlockDepth) {\n                currentCursor.candidate = this.remove(candidate);\n                currentCursor.openBlockDepth--;\n            } else {\n                this.clearMismatch(candidate);\n            }\n            // if the openBlockDepth matches the blockDepth we just closed to\n            // then restore rehydration\n        }\n        if (currentCursor.openBlockDepth === this.blockDepth) {\n            (false && assert(currentCursor.nextSibling !== null && isComment(currentCursor.nextSibling) && getCloseBlockDepth(currentCursor.nextSibling) === openBlockDepth, \"expected close block to match rehydrated open block\"));\n\n            currentCursor.candidate = this.remove(currentCursor.nextSibling);\n            currentCursor.openBlockDepth--;\n        }\n    }\n    __appendNode(node) {\n        let { candidate } = this;\n        // This code path is only used when inserting precisely one node. It needs more\n        // comparison logic, but we can probably lean on the cases where this code path\n        // is actually used.\n        if (candidate) {\n            return candidate;\n        } else {\n            return super.__appendNode(node);\n        }\n    }\n    __appendHTML(html) {\n        let candidateBounds = this.markerBounds();\n        if (candidateBounds) {\n            let first = candidateBounds.firstNode();\n            let last = candidateBounds.lastNode();\n            let newBounds = bounds(this.element, first.nextSibling, last.previousSibling);\n            this.remove(first);\n            this.remove(last);\n            return newBounds;\n        } else {\n            return super.__appendHTML(html);\n        }\n    }\n    remove(node) {\n        let element = node.parentNode;\n        let next = node.nextSibling;\n        element.removeChild(node);\n        return next;\n    }\n    markerBounds() {\n        let _candidate = this.candidate;\n        if (_candidate && isMarker(_candidate)) {\n            let first = _candidate;\n            let last = first.nextSibling;\n            while (last && !isMarker(last)) {\n                last = last.nextSibling;\n            }\n            return bounds(this.element, first, last);\n        } else {\n            return null;\n        }\n    }\n    __appendText(string) {\n        let { candidate } = this;\n        if (candidate) {\n            if (isTextNode(candidate)) {\n                if (candidate.nodeValue !== string) {\n                    candidate.nodeValue = string;\n                }\n                this.candidate = candidate.nextSibling;\n                return candidate;\n            } else if (candidate && (isSeparator(candidate) || isEmpty(candidate))) {\n                this.candidate = candidate.nextSibling;\n                this.remove(candidate);\n                return this.__appendText(string);\n            } else if (isEmpty(candidate)) {\n                let next = this.remove(candidate);\n                this.candidate = next;\n                let text = this.dom.createTextNode(string);\n                this.dom.insertBefore(this.element, text, next);\n                return text;\n            } else {\n                this.clearMismatch(candidate);\n                return super.__appendText(string);\n            }\n        } else {\n            return super.__appendText(string);\n        }\n    }\n    __appendComment(string) {\n        let _candidate = this.candidate;\n        if (_candidate && isComment(_candidate)) {\n            if (_candidate.nodeValue !== string) {\n                _candidate.nodeValue = string;\n            }\n            this.candidate = _candidate.nextSibling;\n            return _candidate;\n        } else if (_candidate) {\n            this.clearMismatch(_candidate);\n        }\n        return super.__appendComment(string);\n    }\n    __openElement(tag) {\n        let _candidate = this.candidate;\n        if (_candidate && isElement(_candidate) && isSameNodeType(_candidate, tag)) {\n            this.unmatchedAttributes = [].slice.call(_candidate.attributes);\n            return _candidate;\n        } else if (_candidate) {\n            if (isElement(_candidate) && _candidate.tagName === 'TBODY') {\n                this.pushElement(_candidate, null);\n                this.currentCursor.injectedOmittedNode = true;\n                return this.__openElement(tag);\n            }\n            this.clearMismatch(_candidate);\n        }\n        return super.__openElement(tag);\n    }\n    __setAttribute(name, value, namespace) {\n        let unmatched = this.unmatchedAttributes;\n        if (unmatched) {\n            let attr = findByName(unmatched, name);\n            if (attr) {\n                if (attr.value !== value) {\n                    attr.value = value;\n                }\n                unmatched.splice(unmatched.indexOf(attr), 1);\n                return;\n            }\n        }\n        return super.__setAttribute(name, value, namespace);\n    }\n    __setProperty(name, value) {\n        let unmatched = this.unmatchedAttributes;\n        if (unmatched) {\n            let attr = findByName(unmatched, name);\n            if (attr) {\n                if (attr.value !== value) {\n                    attr.value = value;\n                }\n                unmatched.splice(unmatched.indexOf(attr), 1);\n                return;\n            }\n        }\n        return super.__setProperty(name, value);\n    }\n    __flushElement(parent, constructing) {\n        let { unmatchedAttributes: unmatched } = this;\n        if (unmatched) {\n            for (let i = 0; i < unmatched.length; i++) {\n                this.constructing.removeAttribute(unmatched[i].name);\n            }\n            this.unmatchedAttributes = null;\n        } else {\n            super.__flushElement(parent, constructing);\n        }\n    }\n    appendCautiousDynamicContent(value) {\n        let content = super.appendCautiousDynamicContent(value);\n        content.update(this.env, value);\n        return content;\n    }\n    willCloseElement() {\n        let { candidate, currentCursor } = this;\n        if (candidate !== null) {\n            this.clearMismatch(candidate);\n        }\n        if (currentCursor && currentCursor.injectedOmittedNode) {\n            this.popElement();\n        }\n        super.willCloseElement();\n    }\n    getMarker(element, guid) {\n        let marker = element.querySelector(`script[glmr=\"${guid}\"]`);\n        if (marker) {\n            return marker;\n        }\n        throw new Error('Cannot find serialized cursor for `in-element`');\n    }\n    __pushRemoteElement(element, cursorId, nextSibling = null) {\n        let marker = this.getMarker(element, cursorId);\n        if (marker.parentNode === element) {\n            let currentCursor = this.currentCursor;\n            let candidate = currentCursor.candidate;\n            this.pushElement(element, nextSibling);\n            currentCursor.candidate = candidate;\n            this.candidate = this.remove(marker);\n            let tracker = new RemoteBlockTracker(element);\n            this.pushBlockTracker(tracker, true);\n        }\n    }\n    didAppendBounds(bounds) {\n        super.didAppendBounds(bounds);\n        if (this.candidate) {\n            let last = bounds.lastNode();\n            this.candidate = last && last.nextSibling;\n        }\n        return bounds;\n    }\n}\nfunction isTextNode(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nfunction getOpenBlockDepth(node) {\n    let boundsDepth = node.nodeValue.match(/^%\\+b:(\\d+)%$/);\n    if (boundsDepth && boundsDepth[1]) {\n        return Number(boundsDepth[1]);\n    } else {\n        return null;\n    }\n}\nfunction getCloseBlockDepth(node) {\n    let boundsDepth = node.nodeValue.match(/^%\\-b:(\\d+)%$/);\n    if (boundsDepth && boundsDepth[1]) {\n        return Number(boundsDepth[1]);\n    } else {\n        return null;\n    }\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isMarker(node) {\n    return node.nodeType === 8 && node.nodeValue === '%glmr%';\n}\nfunction isSeparator(node) {\n    return node.nodeType === 8 && node.nodeValue === '%|%';\n}\nfunction isEmpty(node) {\n    return node.nodeType === 8 && node.nodeValue === '% %';\n}\nfunction isSameNodeType(candidate, tag) {\n    if (candidate.namespaceURI === SVG_NAMESPACE) {\n        return candidate.tagName === tag;\n    }\n    return candidate.tagName === tag.toUpperCase();\n}\nfunction findByName(array, name) {\n    for (let i = 0; i < array.length; i++) {\n        let attr = array[i];\n        if (attr.name === name) return attr;\n    }\n    return undefined;\n}\nexport function rehydrationBuilder(env, cursor) {\n    return RehydrateBuilder.forInitialRender(env, cursor);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","import {\n  dict, Opaque\n} from \"@glimmer/util\";\nimport {\n  PathReference,\n  CONSTANT_TAG,\n  ConstReference,\n  DirtyableTag,\n  UpdatableTag,\n  combine,\n  isConst,\n  Tag,\n  TagWrapper\n} from \"@glimmer/reference\";\nimport {\n  ConditionalReference as GlimmerConditionalReference,\n  PrimitiveReference\n} from \"@glimmer/runtime\";\nimport { tagForProperty } from \"./tracked\";\n\n/**\n * The base PathReference.\n */\nexport abstract class ComponentPathReference<T> implements PathReference<T> {\n  abstract value(): T;\n  abstract get tag(): Tag;\n\n  get(key: string): PathReference<any> {\n    return PropertyReference.create(this, key);\n  }\n}\n\nexport abstract class CachedReference<T> extends ComponentPathReference<T> {\n  private _lastRevision: number | null = null;\n  private _lastValue: any = null;\n\n  abstract compute(): T;\n\n  value() {\n    let { tag, _lastRevision, _lastValue } = this;\n\n    if (!_lastRevision || !tag.validate(_lastRevision)) {\n      _lastValue = this._lastValue = this.compute();\n      this._lastRevision = tag.value();\n    }\n\n    return _lastValue;\n  }\n}\n\nexport class RootReference extends ConstReference<object> {\n  private children = dict<RootPropertyReference>();\n\n  get(propertyKey: string): RootPropertyReference{\n    let ref = this.children[propertyKey];\n\n    if (!ref) {\n      ref = this.children[propertyKey] = new RootPropertyReference(this.inner, propertyKey);\n    }\n\n    return ref;\n  }\n}\n\nexport abstract class PropertyReference extends CachedReference<any> {\n  static create(parentReference: PathReference<any>, propertyKey: string) {\n    if (isConst(parentReference)) {\n      return new RootPropertyReference(parentReference.value(), propertyKey);\n    } else {\n      return new NestedPropertyReference(parentReference, propertyKey);\n    }\n  }\n\n  get(key: string): PathReference<any>  {\n    return new NestedPropertyReference(this, key);\n  }\n}\n\nexport class RootPropertyReference extends PropertyReference {\n  tag: Tag;\n  private _parentValue: object;\n  private _propertyKey: string;\n\n  constructor(parentValue: object, propertyKey: string) {\n    super();\n\n    this._parentValue = parentValue;\n    this._propertyKey = propertyKey;\n    this.tag = tagForProperty(parentValue, propertyKey);\n  }\n\n  compute(): any {\n    return (this._parentValue as any)[this._propertyKey];\n  }\n}\n\nexport class NestedPropertyReference extends PropertyReference {\n  public tag: Tag;\n  private _parentReference: PathReference<any>;\n  private _parentObjectTag: TagWrapper<UpdatableTag>;\n  private _propertyKey: string;\n\n  constructor(parentReference: PathReference<any>, propertyKey: string) {\n    super();\n\n    let parentReferenceTag = parentReference.tag;\n    let parentObjectTag = UpdatableTag.create(CONSTANT_TAG);\n\n    this._parentReference = parentReference;\n    this._parentObjectTag = parentObjectTag;\n    this._propertyKey = propertyKey;\n\n    this.tag = combine([parentReferenceTag, parentObjectTag]);\n  }\n\n  compute() {\n    let { _parentReference, _parentObjectTag, _propertyKey } = this;\n\n    let parentValue = _parentReference.value();\n\n    _parentObjectTag.inner.update(tagForProperty(parentValue, _propertyKey));\n\n    if (typeof parentValue === \"string\" && _propertyKey === \"length\") {\n      return parentValue.length;\n    }\n\n    if (typeof parentValue === \"object\" && parentValue) {\n      return parentValue[_propertyKey];\n    } else {\n      return undefined;\n    }\n  }\n}\n\nexport class UpdatableReference<T> extends ComponentPathReference<T> {\n  public tag: TagWrapper<DirtyableTag>;\n  private _value: T;\n\n  constructor(value: T) {\n    super();\n\n    this.tag = DirtyableTag.create();\n    this._value = value;\n  }\n\n  value() {\n    return this._value;\n  }\n\n  update(value: T) {\n    let { _value } = this;\n\n    if (value !== _value) {\n      this.tag.inner.dirty();\n      this._value = value;\n    }\n  }\n}\n\nexport class ConditionalReference extends GlimmerConditionalReference {\n  static create(reference: PathReference<any>) {\n    if (isConst(reference)) {\n      let value = reference.value();\n      return PrimitiveReference.create(value);\n    }\n\n    return new ConditionalReference(reference);\n  }\n}\n\nexport class TemplateOnlyComponentDebugReference extends ConstReference<void> {\n  constructor(protected name: string) {\n    super(undefined);\n  }\n\n  get(propertyKey: string): PathReference<Opaque> {\n    throw new Error(`You tried to reference {{${propertyKey}}} from the ${this.name} template, which doesn't have an associated component class. Template-only components can only access args passed to them. Did you mean {{@${propertyKey}}}?`);\n  }\n};\n","import {\n  getOwner,\n  setOwner,\n  Owner\n} from \"@glimmer/di\";\nimport {\n  Bounds as VMBounds,\n  ComponentManager as IComponentManager,\n  DynamicScope,\n  Environment,\n  Arguments,\n  CapturedArguments,\n  WithStaticLayout,\n  Invocation,\n} from \"@glimmer/runtime\";\nimport { Dict, Destroyable, Opaque, Option } from \"@glimmer/util\";\nimport { Tag } from \"@glimmer/reference\";\nimport { RuntimeResolver, ComponentCapabilities, Recast, VMHandle } from \"@glimmer/interfaces\";\nimport { VersionedPathReference, PathReference, CONSTANT_TAG } from '@glimmer/reference';\nimport { DEBUG } from '@glimmer/env';\n\nimport Component from \"./component\";\nimport Bounds from './bounds';\nimport { DefinitionState } from \"./component-definition\";\nimport { RootReference, TemplateOnlyComponentDebugReference } from \"./references\";\n\nexport interface ConstructorOptions {\n  env: Environment;\n}\n\nexport class ComponentStateBucket {\n  public name: string;\n  public component: Component;\n  private args: CapturedArguments;\n\n  constructor(definition: DefinitionState, args: CapturedArguments, owner: Owner) {\n    let componentFactory = definition.ComponentClass;\n    let name = definition.name;\n\n    this.args = args;\n\n    let injections = {\n      debugName: name,\n      args: this.namedArgsSnapshot()\n    };\n\n    setOwner(injections, owner);\n    if (componentFactory) {\n      this.component = componentFactory.create(injections);\n    }\n  }\n\n  get tag(): Tag {\n    return this.args.tag;\n  }\n\n  namedArgsSnapshot(): Readonly<Dict<Opaque>> {\n    return Object.freeze(this.args.named.value());\n  }\n}\n\nconst EMPTY_SELF = new RootReference(null);\n\n/**\n * For performance reasons, we want to avoid instantiating component buckets for\n * components that don't have an associated component class that we would need\n * instantiate and invoke lifecycle hooks on.\n *\n * In development mode, however, we need to track some state about the component\n * in order to produce more useful error messages. This\n * TemplateOnlyComponentDebugBucket is only created in development mode to hold\n * that state.\n */\nexport class TemplateOnlyComponentDebugBucket {\n  constructor(public definition: DefinitionState) {\n  }\n}\n\nexport interface CompilableRuntimeResolver extends RuntimeResolver<Opaque> {\n  compileTemplate(name: string, layout: Option<number>): Invocation;\n}\n\nexport default class ComponentManager implements IComponentManager<ComponentStateBucket | TemplateOnlyComponentDebugBucket | void, DefinitionState>, WithStaticLayout<ComponentStateBucket | TemplateOnlyComponentDebugBucket | void, DefinitionState, Opaque, CompilableRuntimeResolver> {\n  private env: Environment;\n\n  static create(options: ConstructorOptions): ComponentManager {\n    return new ComponentManager(options);\n  }\n\n  constructor(options: ConstructorOptions) {\n    this.env = options.env;\n  }\n\n  prepareArgs(state: DefinitionState, args: Arguments): null {\n    return null;\n  }\n\n  getCapabilities(state: DefinitionState): ComponentCapabilities {\n    return state.capabilities;\n  }\n\n  getLayout({ name, handle, symbolTable }: DefinitionState, resolver: CompilableRuntimeResolver): Invocation {\n    if (handle && symbolTable) {\n      return {\n        handle,\n        symbolTable\n      };\n    }\n\n    return resolver.compileTemplate(name, handle as Recast<VMHandle, number>);\n  }\n\n  create(_env: Environment, definition: DefinitionState, args: Arguments, _dynamicScope: DynamicScope, _caller: VersionedPathReference<Opaque>, _hasDefaultBlock: boolean): TemplateOnlyComponentDebugBucket | ComponentStateBucket | void {\n    // In development mode, if a component is template-only, save off state\n    // needed for error messages. This will get stripped in production mode and\n    // no bucket will be instantiated.\n    if (DEBUG && !definition.ComponentClass) {\n      return new TemplateOnlyComponentDebugBucket(definition);\n    }\n\n    // Only create a state bucket if the component is actually stateful. We can\n    // skip this for template-only components, which are pure functions.\n    if (definition.ComponentClass) {\n      let owner = getOwner(this.env);\n      return new ComponentStateBucket(definition, args.capture(), owner);\n    }\n  }\n\n  getSelf(bucket: ComponentStateBucket): PathReference {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) {\n      return new TemplateOnlyComponentDebugReference(bucket.definition.name);\n    }\n    if (bucket) {\n      return new RootReference(bucket.component);\n    }\n    return EMPTY_SELF;\n  }\n\n  didCreateElement(bucket: ComponentStateBucket, element: HTMLElement) { }\n\n  didRenderLayout(bucket: ComponentStateBucket, bounds: VMBounds) {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return; }\n    if (!bucket) { return; }\n    bucket.component.bounds = new Bounds(bounds);\n  }\n\n  didCreate(bucket: ComponentStateBucket) {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return; }\n    if (!bucket) { return; }\n    bucket.component.didInsertElement();\n  }\n\n  getTag(bucket: ComponentStateBucket): Tag {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return CONSTANT_TAG; }\n    if (!bucket) { return CONSTANT_TAG; }\n    return bucket.tag;\n  }\n\n  update(bucket: ComponentStateBucket, scope: DynamicScope) {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return; }\n    if (!bucket) { return; }\n\n    bucket.component.args = bucket.namedArgsSnapshot();\n  }\n\n  didUpdateLayout() {}\n\n  didUpdate(bucket: ComponentStateBucket) {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return; }\n    if (!bucket) { return; }\n\n    bucket.component.didUpdate();\n  }\n\n  getDestructor(bucket: ComponentStateBucket): Destroyable {\n    if (DEBUG && bucket instanceof TemplateOnlyComponentDebugBucket) { return NOOP_DESTROYABLE; }\n    if (!bucket) { return NOOP_DESTROYABLE; }\n\n    return bucket.component;\n  }\n}\n\nconst NOOP_DESTROYABLE = { destroy() {} };\n","import Application from '@glimmer/application';\n\nexport default function initializeCustomElements(app: Application, customElementDefinitions: { [key: string]: string; }): void {\n  for(let customElementName in customElementDefinitions) {\n    let glimmerComponentName = customElementDefinitions[customElementName];\n\n    initializeCustomElement(app, customElementName, glimmerComponentName);\n  }\n}\n\nfunction initializeCustomElement(app: Application, customElementName: string, glimmerComponentName: string): void {\n  function GlimmerElement() {\n    return Reflect.construct(HTMLElement, [], GlimmerElement);\n  }\n  GlimmerElement.prototype = Object.create(HTMLElement.prototype, {\n    constructor: { value: GlimmerElement },\n    connectedCallback: {\n      value: function connectedCallback(): void {\n        let placeholder = document.createElement('span');\n        let parent = this.parentNode;\n\n        parent.insertBefore(placeholder, this);\n        parent.removeChild(this);\n\n        app.renderComponent(glimmerComponentName, parent, placeholder);\n\n        whenRendered(app, () => {\n          let customElement = this as Element;\n          let glimmerElement = placeholder.previousElementSibling;\n\n          placeholder.remove();\n          assignAttributes(customElement, glimmerElement);\n        });\n      }\n    }\n  });\n\n  window.customElements.define(customElementName, GlimmerElement);\n}\n\nfunction assignAttributes(fromElement: Element, toElement: Element): void {\n  let attributes = fromElement.attributes;\n\n  for (let i = 0; i < attributes.length; i++) {\n    let { name, value } = attributes.item(i);\n    toElement.setAttribute(name, value);\n  }\n}\n\nfunction whenRendered(app, callback) {\n  if (app['_rendering']) {\n    requestAnimationFrame(() => {\n      whenRendered(app, callback);\n    });\n  } else {\n    callback();\n  }\n}\n","import {\n  Registry,\n  RegistryAccessor,\n  RegistrationOptions,\n  Injection,\n  Resolver\n} from '@glimmer/di';\n\nfunction isTypeSpecifier(specifier: string) {\n  return specifier.indexOf(':') === -1;\n}\n\n/**\n * A repository of application objects, indexed by type and name.\n *\n * {@link Initializer | Initializers} can add or override objects in the system\n * before the application boots, customizing runtime behavior.\n *\n * @internal\n */\nexport default class ApplicationRegistry implements RegistryAccessor {\n  private _registry: Registry;\n  private _resolver: Resolver;\n\n  constructor(registry: Registry, resolver: Resolver) {\n    this._registry = registry;\n    this._resolver = resolver;\n  }\n\n  register(specifier: string, factory: any, options?: RegistrationOptions): void {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    this._registry.register(normalizedSpecifier, factory, options);\n  }\n\n  registration(specifier: string): any {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    return this._registry.registration(normalizedSpecifier);\n  }\n\n  unregister(specifier: string) {\n    let normalizedSpecifier = this._toAbsoluteSpecifier(specifier);\n    this._registry.unregister(normalizedSpecifier);\n  }\n\n  registerOption(specifier: string, option: string, value: any): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    this._registry.registerOption(normalizedSpecifier, option, value);\n  }\n\n  registeredOption(specifier: string, option: string): any {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredOption(normalizedSpecifier, option);\n  }\n\n  registeredOptions(specifier: string): any {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredOptions(normalizedSpecifier);\n  }\n\n  unregisterOption(specifier: string, option: string): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    this._registry.unregisterOption(normalizedSpecifier, option);\n  }\n\n  registerInjection(specifier: string, property: string, injection: string): void {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    let normalizedInjection = this._toAbsoluteSpecifier(injection);\n    this._registry.registerInjection(normalizedSpecifier, property, normalizedInjection);\n  }\n\n  registeredInjections(specifier: string): Injection[] {\n    let normalizedSpecifier = this._toAbsoluteOrTypeSpecifier(specifier);\n    return this._registry.registeredInjections(normalizedSpecifier);\n  }\n\n  private _toAbsoluteSpecifier(specifier: string, referrer?: string): string {\n    return this._resolver.identify(specifier, referrer);\n  }\n\n  private _toAbsoluteOrTypeSpecifier(specifier: string): string {\n    if (isTypeSpecifier(specifier)) {\n      return specifier;\n    } else {\n      return this._toAbsoluteSpecifier(specifier);\n    }\n  }\n}","import {\n  assign,\n  Opaque\n} from '@glimmer/util';\nimport {\n  DynamicScope as GlimmerDynamicScope\n} from '@glimmer/runtime';\nimport {\n  PathReference\n} from '@glimmer/reference';\n\nexport default class DynamicScope implements GlimmerDynamicScope {\n  private bucket;\n\n  constructor(bucket=null) {\n    if (bucket) {\n      this.bucket = assign({}, bucket);\n    } else {\n      this.bucket = {};\n    }\n  }\n\n  get(key: string): PathReference<Opaque> {\n    return this.bucket[key];\n  }\n\n  set(key: string, reference: PathReference<Opaque>) {\n    return this.bucket[key] = reference;\n  }\n\n  child(): DynamicScope {\n    return new DynamicScope(this.bucket);\n  }\n}\n","import {\n  Opaque\n} from '@glimmer/util';\n\nimport {\n  Reference,\n  OpaqueIterator,\n  AbstractIterable,\n  IterationItem,\n  Tag\n} from \"@glimmer/reference\";\n\nimport {\n  UpdatableReference\n} from \"@glimmer/component\";\n\nexport type KeyFor<T> = (item: Opaque, index: T) => string;\n\nclass ArrayIterator implements OpaqueIterator {\n  private array: Opaque[];\n  private keyFor: KeyFor<number>;\n  private position = 0;\n\n  constructor(array: Opaque[], keyFor: KeyFor<number>) {\n    this.array = array;\n    this.keyFor = keyFor;\n  }\n\n  isEmpty(): boolean {\n    return this.array.length === 0;\n  }\n\n  next(): IterationItem<Opaque, number> {\n    let { position, array, keyFor } = this;\n\n    if (position >= array.length) return null;\n\n    let value = array[position];\n    let key = keyFor(value, position);\n    let memo = position;\n\n    this.position++;\n\n    return { key, value, memo };\n  }\n}\n\nclass ObjectKeysIterator implements OpaqueIterator {\n  private keys: string[];\n  private values: Opaque[];\n  private keyFor: KeyFor<string>;\n  private position = 0;\n\n  constructor(keys: string[], values: Opaque[], keyFor: KeyFor<string>) {\n    this.keys = keys;\n    this.values = values;\n    this.keyFor = keyFor;\n  }\n\n  isEmpty(): boolean {\n    return this.keys.length === 0;\n  }\n\n  next(): IterationItem<Opaque, string> {\n    let { position, keys, values, keyFor } = this;\n\n    if (position >= keys.length) return null;\n\n    let value = values[position];\n    let memo = keys[position];\n    let key = keyFor(value, memo);\n\n    this.position++;\n\n    return { key, value, memo };\n  }\n}\n\nclass EmptyIterator implements OpaqueIterator {\n  isEmpty(): boolean {\n    return true;\n  }\n\n  next(): IterationItem<Opaque, Opaque> {\n    throw new Error(`Cannot call next() on an empty iterator`);\n  }\n}\n\nconst EMPTY_ITERATOR = new EmptyIterator();\n\n/** @internal */\nexport default class Iterable implements AbstractIterable<Opaque, Opaque, IterationItem<Opaque, Opaque>, UpdatableReference<Opaque>, UpdatableReference<Opaque>> {\n  public tag: Tag;\n  private ref: Reference<Opaque>;\n  private keyFor: KeyFor<Opaque>;\n\n  constructor(ref: Reference<Opaque>, keyFor: KeyFor<Opaque>) {\n    this.tag = ref.tag;\n    this.ref = ref;\n    this.keyFor = keyFor;\n  }\n\n  iterate(): OpaqueIterator {\n    let { ref, keyFor } = this;\n\n    let iterable = ref.value() as any;\n\n    if (Array.isArray(iterable)) {\n      return iterable.length > 0 ? new ArrayIterator(iterable, keyFor) : EMPTY_ITERATOR;\n    } else if (iterable === undefined || iterable === null) {\n      return EMPTY_ITERATOR;\n    } else if (iterable.forEach !== undefined) {\n      let array = [];\n      iterable.forEach(function(item) {\n        array.push(item);\n      });\n      return array.length > 0 ? new ArrayIterator(array, keyFor) : EMPTY_ITERATOR;\n    } else if (typeof iterable === 'object') {\n       let keys = Object.keys(iterable);\n       return keys.length > 0 ? new ObjectKeysIterator(keys, keys.map(key => iterable[key]), keyFor) : EMPTY_ITERATOR;\n     } else {\n      throw new Error(`Don't know how to {{#each ${iterable}}}`);\n    }\n  }\n\n  valueReferenceFor(item: IterationItem<Opaque, Opaque>): UpdatableReference<Opaque> {\n    return new UpdatableReference(item.value);\n  }\n\n  updateValueReference(reference: UpdatableReference<Opaque>, item: IterationItem<Opaque, Opaque>) {\n    reference.update(item.value);\n  }\n\n  memoReferenceFor(item: IterationItem<Opaque, Opaque>): UpdatableReference<Opaque> {\n    return new UpdatableReference(item.memo);\n  }\n\n  updateMemoReference(reference: UpdatableReference<Opaque>, item: IterationItem<Opaque, Opaque>) {\n    reference.update(item.memo);\n  }\n}\n","import {\n  DOMChanges,\n  DOMTreeConstruction,\n  Environment as GlimmerEnvironment\n} from '@glimmer/runtime';\nimport {\n  Reference,\n  OpaqueIterable\n} from \"@glimmer/reference\";\nimport { Opaque } from '@glimmer/util';\nimport {\n  getOwner,\n  setOwner\n} from '@glimmer/di';\nimport Iterable from './iterable';\nimport { Program } from '@glimmer/program';\nimport { TemplateOptions } from '@glimmer/opcode-compiler';\nimport { ModuleLocator } from '@glimmer/interfaces';\n\nimport RuntimeResolver from './loaders/runtime-compiler/loader';\n\ntype KeyFor<T> = (item: Opaque, index: T) => string;\n\n/** @internal */\nexport interface EnvironmentOptions {\n  document?: HTMLDocument;\n  appendOperations?: DOMTreeConstruction;\n}\n\n/** @internal */\nexport default class Environment extends GlimmerEnvironment {\n  private uselessAnchor: HTMLAnchorElement;\n  public resolver: RuntimeResolver;\n  protected program: Program<ModuleLocator>;\n  public compileOptions: TemplateOptions<ModuleLocator>;\n\n  static create(options: EnvironmentOptions = {}) {\n    options.document = options.document || self.document;\n    options.appendOperations = options.appendOperations || new DOMTreeConstruction(options.document);\n\n    return new Environment(options);\n  }\n\n  constructor(options: EnvironmentOptions) {\n    super({ appendOperations: options.appendOperations, updateOperations: new DOMChanges(options.document as HTMLDocument || document) });\n\n    setOwner(this, getOwner(options));\n\n    // TODO - required for `protocolForURL` - seek alternative approach\n    // e.g. see `installPlatformSpecificProtocolForURL` in Ember\n    this.uselessAnchor = options.document.createElement('a') as HTMLAnchorElement;\n  }\n\n  protocolForURL(url: string): string {\n    // TODO - investigate alternative approaches\n    // e.g. see `installPlatformSpecificProtocolForURL` in Ember\n    this.uselessAnchor.href = url;\n    return this.uselessAnchor.protocol;\n  }\n\n  iterableFor(ref: Reference<Opaque>, keyPath: string): OpaqueIterable {\n    let keyFor: KeyFor<Opaque>;\n\n    if (!keyPath) {\n      throw new Error('Must specify a key for #each');\n    }\n\n    switch (keyPath) {\n      case '@index':\n        keyFor = (_, index: number) => String(index);\n      break;\n      case '@primitive':\n        keyFor = (item: Opaque) => String(item);\n      break;\n      default:\n        keyFor = (item: Opaque) => item[keyPath];\n      break;\n    }\n\n    return new Iterable(ref, keyFor);\n  }\n}\n","import {\n  Container,\n  Factory,\n  Owner,\n  Registry,\n  RegistryWriter,\n  Resolver,\n  setOwner,\n} from '@glimmer/di';\nimport {\n  ElementBuilder,\n  TemplateIterator,\n  Environment as AbstractEnvironment\n} from '@glimmer/runtime';\nimport {\n  UpdatableReference\n} from '@glimmer/component';\nimport {\n  Option, assert\n} from '@glimmer/util';\nimport {\n  Simple, Opaque\n} from '@glimmer/interfaces';\nimport { PathReference } from '@glimmer/reference';\n\nimport ApplicationRegistry from './application-registry';\nimport DynamicScope from './dynamic-scope';\nimport Environment from './environment';\n\n/**\n * A Builder encapsulates the building of template output. For example, in the\n * browser a builder might construct DOM elements, while on the server it may\n * instead construct HTML. An object implementing the Builder interface should\n * return a concrete instance of an ElementBuilder from its getBuilder method.\n *\n * @public\n */\nexport interface Builder {\n  /**\n   * Returns a concrete instance of an ElementBuilder for the given Environment.\n   */\n  getBuilder(env: AbstractEnvironment): ElementBuilder;\n}\n\n/**\n * Loaders are responsible for loading and preparing all of the templates and\n * other metadata required to get a Glimmer.js application into a functioning\n * state.\n *\n * @public\n */\nexport interface Loader {\n  /**\n   * Returns a template iterator for on the provided application state.\n   */\n  getTemplateIterator(app: Application, env: Environment, builder: ElementBuilder, dynamicScope: DynamicScope, self: PathReference<Opaque>): Promise<TemplateIterator>;\n}\n\n/**\n * Renderers are responsible for iterating over the template iterator returned\n * from a Loader, and re-rendering when component state has been invalidated.\n * The Renderer may be either synchronous or asynchronous, and controls its own\n * scheduling.\n *\n * @public\n */\nexport interface Renderer {\n  /**\n   * Responsible for iterating over the passed template iterator until no more\n   * values remain. If this process is asynchronous, should return a promise\n   * that resolves once the iterator is exhausted.\n   */\n  render(iterator: TemplateIterator): void | Promise<void>;\n\n  /**\n   * Revalidates the initial render result. Called any time any component state\n   * may have changed.\n   */\n  rerender(): void | Promise<void>;\n}\n\n/**\n * Options for configuring an instance of [Application].\n *\n * @public\n */\nexport interface ApplicationOptions {\n  builder: Builder;\n  loader: Loader;\n  renderer: Renderer;\n  rootName: string;\n  resolver?: Resolver;\n  document?: Simple.Document;\n}\n\n/**\n * Initializers run when an [Application] boots and allow extending the\n * application with additional functionality. See\n * [Application#registerInitializer].\n *\n * @public\n */\nexport interface Initializer {\n  name?: string;\n  initialize(registry: RegistryWriter): void;\n}\n\n/**\n * A data structure created when a root Glimmer component is rendered into the\n * DOM via the [Application#renderComponent] method.\n *\n * @internal\n */\nexport interface AppRoot {\n  id: number;\n  component: string;\n  parent: Simple.Node;\n  nextSibling: Option<Simple.Node>;\n}\n\n/** @internal */\nexport interface ApplicationConstructor<T = Application> {\n  new (options: ApplicationOptions): T;\n}\n\n/** @internal */\nexport type Notifier = [() => void, (err: Error) => void];\n\nconst DEFAULT_DOCUMENT = typeof document === 'object' ? document : null;\n\n/**\n * The central control point for starting and running Glimmer components.\n *\n * @public\n */\nexport default class Application implements Owner {\n  public rootName: string;\n  public resolver: Resolver;\n  public document: Simple.Document;\n  public env: Environment;\n\n  private _roots: AppRoot[] = [];\n  private _rootsIndex = 0;\n  private _registry: Registry;\n  private _container: Container;\n  private _initializers: Initializer[] = [];\n  private _initialized = false;\n\n  /** @hidden\n   * The root Reference whose value provides the context of the main template.\n   */\n  private _self: UpdatableReference<{ roots: AppRoot[] }>;\n\n  protected _rendering = false;\n  protected _rendered = false;\n  protected _scheduled = false;\n\n  protected builder: Builder;\n  protected loader: Loader;\n  protected renderer: Renderer;\n\n  protected _notifiers: Notifier[] = [];\n\n  constructor(options: ApplicationOptions) {\n    this.rootName = options.rootName;\n    this.resolver = options.resolver;\n\n    assert(options.loader, 'Must provide a Loader for preparing templates and other metadata required for a Glimmer Application.');\n    assert(options.renderer, 'Must provide a Renderer to render the templates produced by the Loader.');\n    assert(options.builder, 'Must provide a Builder that is responsible to building DOM.');\n\n    this.document = options.document || DEFAULT_DOCUMENT;\n    this.loader = options.loader;\n    this.renderer = options.renderer;\n    this.builder = options.builder;\n  }\n\n  /**\n   * Renders a component by name into the provided element, and optionally\n   * adjacent to the provided nextSibling element.\n   *\n   * ## Examples\n   *\n   * ```js\n   * app.renderComponent('MyComponent', document.body, document.getElementById('my-footer'));\n   * ```\n   */\n  renderComponent(component: string, parent: Simple.Node, nextSibling: Option<Simple.Node> = null): void {\n    let { _roots: roots, _self: self } = this;\n\n    roots.push({ id: this._rootsIndex++, component, parent, nextSibling });\n\n    // If we've already rendered, need to invalidate the root reference and\n    // schedule a re-render for the new component to appear in DOM.\n    if (self) {\n      self.update({ roots });\n      this.scheduleRerender();\n    }\n  }\n\n  /**\n   * Initializes the application and renders any components that have been\n   * registered via [renderComponent].\n   *\n   * @public\n   */\n  async boot(): Promise<void> {\n    this.initialize();\n\n    this.env = this.lookup(`environment:/${this.rootName}/main/main`);\n\n    await this._render();\n  }\n\n  /**\n   * Schedules all components to revalidate and potentially update the DOM to\n   * reflect any changes to underlying component state.\n   *\n   * Generally speaking, you  should avoid calling `scheduleRerender()`\n   * manually. Instead, use tracked properties on components and models, which\n   * invoke this method for you automatically when appropriate.\n   */\n  scheduleRerender(): void {\n    if (this._scheduled || !this._rendered) return;\n\n    this._rendering = true;\n    this._scheduled = true;\n    setTimeout(() => {\n      this._scheduled = false;\n      this._rerender();\n      this._rendering = false;\n    }, 0);\n  }\n\n  /** @internal */\n  initialize(): void {\n    this.initRegistry();\n    this.initContainer();\n  }\n\n  /** @internal */\n  registerInitializer(initializer: Initializer): void {\n    this._initializers.push(initializer);\n  }\n\n  /**\n   * Initializes the registry, which maps names to objects in the system. Addons\n   * and subclasses can customize the behavior of a Glimmer application by\n   * overriding objects in the registry.\n   *\n   * @internal\n   */\n  protected initRegistry(): void {\n    let registry = this._registry = new Registry();\n\n    // Create ApplicationRegistry as a proxy to the underlying registry\n    // that will only be available during `initialize`.\n    let appRegistry = new ApplicationRegistry(this._registry, this.resolver);\n\n    registry.register(`environment:/${this.rootName}/main/main`, Environment);\n    registry.registerOption('helper', 'instantiate', false);\n    registry.registerOption('template', 'instantiate', false);\n    registry.register(`document:/${this.rootName}/main/main`, this.document as any);\n    registry.registerOption('document', 'instantiate', false);\n    registry.registerInjection('environment', 'document', `document:/${this.rootName}/main/main`);\n    registry.registerInjection('component-manager', 'env', `environment:/${this.rootName}/main/main`);\n\n    let initializers = this._initializers;\n    for (let i = 0; i < initializers.length; i++) {\n      initializers[i].initialize(appRegistry);\n    }\n\n    this._initialized = true;\n  }\n\n  /**\n   * Initializes the container, which stores instances of objects that come from\n   * the registry.\n   *\n   * @internal\n   */\n  protected initContainer(): void {\n    this._container = new Container(this._registry, this.resolver);\n\n    // Inject `this` (the app) as the \"owner\" of every object instantiated\n    // by its container.\n    this._container.defaultInjections = (specifier: string) => {\n      let hash = {};\n      setOwner(hash, this);\n      return hash;\n    };\n  }\n\n  /** @internal */\n  protected async _render(): Promise<void> {\n    let { env } = this;\n\n    // Create the template context for the root `main` template, which just\n    // contains the array of component roots. Any property references in that\n    // template will be looked up from this object.\n    let self = this._self = new UpdatableReference({ roots: this._roots });\n\n    // Create an empty root scope.\n    let dynamicScope = new DynamicScope();\n\n    let builder = this.builder.getBuilder(env);\n    let templateIterator = await this.loader.getTemplateIterator(this, env, builder, dynamicScope, self);\n\n    try {\n      // Begin a new transaction. The transaction stores things like component\n      // lifecycle events so they can be flushed once rendering has completed.\n      env.begin();\n\n      await this.renderer.render(templateIterator);\n\n      // Finally, commit the transaction and flush component lifecycle hooks.\n      env.commit();\n\n      this._didRender();\n    } catch (err) {\n      this._didError(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Ensures the DOM is up-to-date by performing a revalidation on the root\n   * template's render result. This method should not be called directly;\n   * instead, any mutations in the program that could cause side-effects should\n   * call `scheduleRerender()`, which ensures that DOM updates only happen once\n   * at the end of the browser's event loop.\n   *\n   * @internal\n   */\n  protected async _rerender() {\n    let { env } = this;\n\n    try {\n      env.begin();\n      await this.renderer.rerender();\n      env.commit();\n\n      this._didRender();\n    } catch (err) {\n      this._didError(err);\n      throw err;\n    }\n  }\n\n  protected _didRender(): void {\n    this._rendered = true;\n\n    let notifiers = this._notifiers;\n    this._notifiers = [];\n\n    notifiers.forEach(n => n[0]());\n  }\n\n  protected _didError(err: Error): void {\n    let notifiers = this._notifiers;\n    this._notifiers = [];\n\n    notifiers.forEach(n => n[1](err));\n  }\n\n  /**\n   * Owner interface implementation\n   *\n   * @internal\n   */\n  identify(specifier: string, referrer?: string): string {\n    return this.resolver.identify(specifier, referrer);\n  }\n\n  /** @internal */\n  factoryFor(specifier: string, referrer?: string): Factory<any> {\n    return this._container.factoryFor(this.identify(specifier, referrer));\n  }\n\n  /** @internal */\n  lookup(specifier: string, referrer?: string): any {\n    return this._container.lookup(this.identify(specifier, referrer));\n  }\n}\n","import { dict, Option } from '@glimmer/util';\n\nexport class TypedRegistry<T> {\n  private byName: { [key: string]: number } = dict<number>();\n  private byHandle: { [key: number]: T } = dict<T>();\n\n  hasName(name: string): boolean {\n    return name in this.byName;\n  }\n\n  getHandle(name: string): Option<number> {\n    return this.byName[name];\n  }\n\n  hasHandle(name: number): boolean {\n    return name in this.byHandle;\n  }\n\n  getByHandle(handle: number): Option<T> {\n    return this.byHandle[handle];\n  }\n\n  register(handle: number, name: string, value: T): void {\n    this.byHandle[handle] = value;\n    this.byName[name] = handle;\n  }\n}\n","import {\n  ModifierManager,\n  Helper as GlimmerHelper,\n  Invocation,\n  Helper,\n  ScannableTemplate,\n  VM,\n  Arguments\n} from '@glimmer/runtime';\nimport { TemplateOptions } from '@glimmer/opcode-compiler';\nimport { expect } from \"@glimmer/util\";\nimport { Opaque, RuntimeResolver as IRuntimeResolver, Option, Maybe, Dict } from \"@glimmer/interfaces\";\nimport { Owner } from \"@glimmer/di\";\nimport { ComponentDefinition, ComponentManager, ComponentFactory } from \"@glimmer/component\";\n\nimport { TypedRegistry } from \"./typed-registry\";\nimport Application from \"../../application\";\nimport { HelperReference } from '../../helpers/user-helper';\n\nexport type UserHelper = (args: ReadonlyArray<Opaque>, named: Dict<Opaque>) => Opaque;\n\nexport interface Lookup {\n  helper: GlimmerHelper;\n  modifier: ModifierManager;\n  component: ComponentDefinition;\n  template: SerializedTemplateWithLazyBlock<Specifier>;\n  manager: ComponentManager;\n  compiledTemplate: Invocation;\n}\n\nexport type LookupType = keyof Lookup;\n\nexport interface Specifier {\n  specifier: string;\n  managerId?: string;\n};\n\nexport type TemplateEntry = {\n  handle: number;\n  name: string;\n  meta: Specifier;\n};\n\nexport type SerializedTemplateBlockJSON = string;\n\nexport interface SerializedTemplateWithLazyBlock<Specifier> {\n  id?: Option<string>;\n  block: SerializedTemplateBlockJSON;\n  meta: Specifier;\n}\n\n/** @public */\nexport default class RuntimeResolver implements IRuntimeResolver<Specifier> {\n  templateOptions: TemplateOptions<Specifier>;\n  handleLookup: TypedRegistry<Opaque>[] = [];\n  private cache = {\n    component: new TypedRegistry<ComponentDefinition>(),\n    template: new TypedRegistry<SerializedTemplateWithLazyBlock<Specifier>>(),\n    compiledTemplate: new TypedRegistry<Invocation>(),\n    helper: new TypedRegistry<Helper>(),\n    manager: new TypedRegistry<ComponentManager>(),\n    modifier: new TypedRegistry<ModifierManager>()\n  };\n\n  constructor(private owner: Owner) {}\n\n  setCompileOptions(compileOptions: TemplateOptions<Specifier>) {\n    this.templateOptions = compileOptions;\n  }\n\n  lookup(type: LookupType, name: string, referrer?: Specifier): Option<number> {\n    if (this.cache[type].hasName(name)) {\n      return this.cache[type].getHandle(name);\n    } else {\n      return null;\n    }\n  }\n\n  register<K extends LookupType>(type: K, name: string, value: Lookup[K]): number {\n    let registry = this.cache[type];\n    let handle = this.handleLookup.length;\n    this.handleLookup.push(registry);\n    (this.cache[type] as TypedRegistry<any>).register(handle, name, value);\n    return handle;\n  }\n\n  lookupModifier(name: string, meta?: Specifier): Option<number> {\n    let handle = this.lookup('modifier', name);\n\n    if (handle === null) {\n      throw new Error(`Modifier for ${name} not found.`);\n    }\n\n    return handle;\n  }\n\n  compileTemplate(name: string, layout: Option<number>): Invocation {\n    if (!this.cache.compiledTemplate.hasName(name)) {\n      let serializedTemplate = this.resolve<SerializedTemplateWithLazyBlock<Specifier>>(layout);\n      let { block, meta, id } = serializedTemplate;\n      let parsedBlock = JSON.parse(block);\n      let template = new ScannableTemplate(this.templateOptions, { id, block: parsedBlock, referrer: meta }).asLayout();\n      let invocation = {\n        handle: template.compile(),\n        symbolTable: template.symbolTable\n      };\n\n      this.register('compiledTemplate', name, invocation);\n      return invocation;\n    }\n\n    let handle = this.lookup('compiledTemplate', name);\n    return this.resolve<Invocation>(handle);\n  }\n\n  registerHelper(name: string, helper: UserHelper) {\n    let glimmerHelper = (_vm: VM, args: Arguments) => new HelperReference(helper, args);\n    return this.register('helper', name, glimmerHelper);\n  }\n\n  registerInternalHelper(name: string, helper: GlimmerHelper) {\n    this.register('helper', name, helper);\n  }\n\n  registerComponent(name: string, resolvedSpecifier: string, Component: ComponentFactory, template: SerializedTemplateWithLazyBlock<Specifier>): number {\n    let templateEntry = this.registerTemplate(resolvedSpecifier, template);\n    let manager = this.managerFor(templateEntry.meta.managerId);\n    let definition = new ComponentDefinition(name, manager, Component, templateEntry.handle);\n\n    return this.register('component', name, definition);\n  }\n\n  lookupComponentHandle(name: string, referrer?: Specifier) {\n    if (!this.cache.component.hasName(name)) {\n      this.lookupComponent(name, referrer);\n    }\n    return this.lookup('component', name, referrer);\n  }\n\n  managerFor(managerId = 'main'): ComponentManager {\n    let manager: ComponentManager;\n\n    if (!this.cache.manager.hasName(managerId)) {\n      let { rootName } = this.owner as Application;\n      manager = this.owner.lookup(`component-manager:/${rootName}/component-managers/${managerId}`);\n      if (!manager) {\n        throw new Error(`No component manager found for ID ${managerId}.`);\n      }\n      this.register('manager', managerId, manager);\n      return manager;\n    } else {\n      let handle = this.cache.manager.getHandle(managerId);\n      return this.cache.manager.getByHandle(handle);\n    }\n  }\n\n  registerTemplate(resolvedSpecifier: string, template: SerializedTemplateWithLazyBlock<Specifier> ): TemplateEntry {\n    return {\n      name: resolvedSpecifier,\n      handle: this.register('template', resolvedSpecifier, template),\n      meta: template.meta\n    };\n  }\n\n  lookupComponent(name: string, meta: Specifier): ComponentDefinition {\n    let handle: number;\n    if (!this.cache.component.hasName(name)) {\n      let specifier = expect(this.identifyComponent(name, meta), `Could not find the component '${name}'`);\n      let template = this.owner.lookup('template', specifier);\n      let componentSpecifier = this.owner.identify('component', specifier);\n      let componentFactory: ComponentFactory = null;\n\n      if (componentSpecifier !== undefined) {\n        componentFactory = this.owner.factoryFor(componentSpecifier);\n      }\n\n      handle = this.registerComponent(name, specifier, componentFactory, template);\n    } else {\n      handle = this.lookup('component', name, meta);\n    }\n\n    return this.resolve<ComponentDefinition>(handle);\n  }\n\n  lookupHelper(name: string, meta?: Specifier): Option<number> {\n    if (!this.cache.helper.hasName(name)) {\n      let owner: Owner = this.owner;\n      let relSpecifier = `helper:${name}`;\n      let referrer: string = meta.specifier;\n\n      let specifier = owner.identify(relSpecifier, referrer);\n      if (specifier === undefined) {\n        return null;\n      }\n\n      let helper = this.owner.lookup(specifier, meta.specifier);\n      return this.registerHelper(name, helper);\n    }\n\n    return this.lookup('helper', name, meta);\n  }\n\n  lookupPartial(name: string, meta?: Specifier): never {\n    throw new Error(\"Partials are not available in Glimmer applications.\");\n  }\n\n  resolve<T>(handle: number): T {\n    let registry = this.handleLookup[handle];\n    return registry.getByHandle(handle) as T;\n  }\n\n  private identifyComponent(name: string, meta: Specifier): Maybe<string> {\n    let owner: Owner = this.owner;\n    let relSpecifier = `template:${name}`;\n    let referrer: string = meta.specifier;\n\n    let specifier = owner.identify(relSpecifier, referrer);\n\n    if (specifier === undefined && owner.identify(`component:${name}`, referrer)) {\n      throw new Error(`The component '${name}' is missing a template. All components must have a template. Make sure there is a template.hbs in the component directory.`);\n    }\n\n    return specifier;\n  }\n\n}\n","const UNRESOLVED = {};\nconst WELL_KNOWN_EMPTY_ARRAY_POSITION = 0;\nconst WELL_KNOW_EMPTY_ARRAY = Object.freeze([]);\nexport class WriteOnlyConstants {\n    constructor() {\n        // `0` means NULL\n        this.strings = [];\n        this.arrays = [WELL_KNOW_EMPTY_ARRAY];\n        this.tables = [];\n        this.handles = [];\n        this.resolved = [];\n        this.floats = [];\n        this.negatives = [];\n    }\n    float(float) {\n        let index = this.floats.indexOf(float);\n        if (index > -1) {\n            return index;\n        }\n        return this.floats.push(float) - 1;\n    }\n    negative(negative) {\n        return this.negatives.push(negative) - 1;\n    }\n    string(value) {\n        let index = this.strings.indexOf(value);\n        if (index > -1) {\n            return index;\n        }\n        return this.strings.push(value) - 1;\n    }\n    stringArray(strings) {\n        let _strings = new Array(strings.length);\n        for (let i = 0; i < strings.length; i++) {\n            _strings[i] = this.string(strings[i]);\n        }\n        return this.array(_strings);\n    }\n    array(values) {\n        if (values.length === 0) {\n            return WELL_KNOWN_EMPTY_ARRAY_POSITION;\n        }\n        let index = this.arrays.indexOf(values);\n        if (index > -1) {\n            return index;\n        }\n        return this.arrays.push(values) - 1;\n    }\n    handle(handle) {\n        let index = this.handles.indexOf(handle);\n        if (index > -1) {\n            return index;\n        }\n        this.resolved.push(UNRESOLVED);\n        return this.handles.push(handle) - 1;\n    }\n    serializable(value) {\n        let str = JSON.stringify(value);\n        let index = this.strings.indexOf(str);\n        if (index > -1) {\n            return index;\n        }\n        return this.strings.push(str) - 1;\n    }\n    toPool() {\n        return {\n            strings: this.strings,\n            arrays: this.arrays,\n            handles: this.handles,\n            floats: this.floats,\n            negatives: this.negatives\n        };\n    }\n}\nexport class RuntimeConstants {\n    constructor(resolver, pool) {\n        this.resolver = resolver;\n        this.strings = pool.strings;\n        this.arrays = pool.arrays;\n        this.handles = pool.handles;\n        this.floats = pool.floats;\n        this.negatives = pool.negatives;\n        this.resolved = this.handles.map(() => UNRESOLVED);\n    }\n    // `0` means NULL\n    getFloat(value) {\n        return this.floats[value];\n    }\n    getNegative(value) {\n        return this.negatives[value];\n    }\n    getString(value) {\n        return this.strings[value];\n    }\n    getStringArray(value) {\n        let names = this.getArray(value);\n        let _names = new Array(names.length);\n        for (let i = 0; i < names.length; i++) {\n            let n = names[i];\n            _names[i] = this.getString(n);\n        }\n        return _names;\n    }\n    getArray(value) {\n        return this.arrays[value];\n    }\n    resolveHandle(index) {\n        let resolved = this.resolved[index];\n        if (resolved === UNRESOLVED) {\n            let handle = this.handles[index];\n            resolved = this.resolved[index] = this.resolver.resolve(handle);\n        }\n        return resolved;\n    }\n    getSerializable(s) {\n        return JSON.parse(this.strings[s]);\n    }\n}\nexport class Constants extends WriteOnlyConstants {\n    constructor(resolver, pool) {\n        super();\n        this.resolver = resolver;\n        if (pool) {\n            this.strings = pool.strings;\n            this.arrays = pool.arrays;\n            this.handles = pool.handles;\n            this.floats = pool.floats;\n            this.negatives = pool.negatives;\n            this.resolved = this.handles.map(() => UNRESOLVED);\n        }\n    }\n    // `0` means NULL\n    getFloat(value) {\n        return this.floats[value];\n    }\n    getNegative(value) {\n        return this.negatives[value];\n    }\n    getString(value) {\n        return this.strings[value];\n    }\n    getStringArray(value) {\n        let names = this.getArray(value);\n        let _names = new Array(names.length);\n        for (let i = 0; i < names.length; i++) {\n            let n = names[i];\n            _names[i] = this.getString(n);\n        }\n        return _names;\n    }\n    getArray(value) {\n        return this.arrays[value];\n    }\n    resolveHandle(index) {\n        let resolved = this.resolved[index];\n        if (resolved === UNRESOLVED) {\n            let handle = this.handles[index];\n            resolved = this.resolved[index] = this.resolver.resolve(handle);\n        }\n        return resolved;\n    }\n    getSerializable(s) {\n        return JSON.parse(this.strings[s]);\n    }\n}\nexport class LazyConstants extends Constants {\n    constructor() {\n        super(...arguments);\n        this.others = [];\n        this.serializables = [];\n    }\n    serializable(value) {\n        let index = this.serializables.indexOf(value);\n        if (index > -1) {\n            return index;\n        }\n        return this.serializables.push(value) - 1;\n    }\n    getSerializable(s) {\n        return this.serializables[s];\n    }\n    getOther(value) {\n        return this.others[value - 1];\n    }\n    other(other) {\n        return this.others.push(other);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export class Opcode {\n    constructor(heap) {\n        this.heap = heap;\n        this.offset = 0;\n    }\n    get size() {\n        let rawType = this.heap.getbyaddr(this.offset);\n        return ((rawType & 768 /* OPERAND_LEN_MASK */) >> 8 /* ARG_SHIFT */) + 1;\n    }\n    get isMachine() {\n        let rawType = this.heap.getbyaddr(this.offset);\n        return rawType & 1024 /* MACHINE_MASK */;\n    }\n    get type() {\n        return this.heap.getbyaddr(this.offset) & 255 /* TYPE_MASK */;\n    }\n    get op1() {\n        return this.heap.getbyaddr(this.offset + 1);\n    }\n    get op2() {\n        return this.heap.getbyaddr(this.offset + 2);\n    }\n    get op3() {\n        return this.heap.getbyaddr(this.offset + 3);\n    }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Bjb2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcGFja2FnZXMvQGdsaW1tZXIvcHJvZ3JhbS9saWIvb3Bjb2RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLEFBQU07QUFFSixnQkFBb0IsQUFBVTtBQUFWLGFBQUksT0FBSixBQUFJLEFBQU07QUFEdkIsYUFBTSxTQUFHLEFBQUMsQUFBQyxBQUNlO0FBQUM7QUFFbEMsUUFBSSxBQUFJO0FBQ04sWUFBSSxBQUFPLFVBQUcsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxLQUFDLEFBQU0sQUFBQyxBQUFDO0FBQy9DLEFBQU0sZUFBQyxDQUFDLENBQUMsQUFBTyxjQUE4QixBQUFDLDZCQUF3QixBQUFDLG1CQUFHLEFBQUMsQUFBQyxBQUMvRTtBQUFDO0FBRUQsUUFBSSxBQUFTO0FBQ1gsWUFBSSxBQUFPLFVBQUcsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxLQUFDLEFBQU0sQUFBQyxBQUFDO0FBQy9DLEFBQU0sZUFBQyxBQUFPLGVBQTBCLEFBQUMsQUFDM0M7QUFBQztBQUVELFFBQUksQUFBSTtBQUNOLEFBQU0sQUFBQyxlQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUksS0FBQyxBQUFNLEFBQUMsY0FBdUIsQUFBQyxBQUFDLEFBQ25FO0FBQUM7QUFFRCxRQUFJLEFBQUc7QUFDTCxBQUFNLGVBQUMsQUFBSSxLQUFDLEFBQUksS0FBQyxBQUFTLFVBQUMsQUFBSSxLQUFDLEFBQU0sU0FBRyxBQUFDLEFBQUMsQUFBQyxBQUM5QztBQUFDO0FBRUQsUUFBSSxBQUFHO0FBQ0wsQUFBTSxlQUFDLEFBQUksS0FBQyxBQUFJLEtBQUMsQUFBUyxVQUFDLEFBQUksS0FBQyxBQUFNLFNBQUcsQUFBQyxBQUFDLEFBQUMsQUFDOUM7QUFBQztBQUVELFFBQUksQUFBRztBQUNMLEFBQU0sZUFBQyxBQUFJLEtBQUMsQUFBSSxLQUFDLEFBQVMsVUFBQyxBQUFJLEtBQUMsQUFBTSxTQUFHLEFBQUMsQUFBQyxBQUFDLEFBQzlDO0FBQUMsQUFDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhlYXAgfSBmcm9tICcuL3Byb2dyYW0nO1xuaW1wb3J0IHsgT3Bjb2RlU2l6ZSB9IGZyb20gXCJAZ2xpbW1lci9lbmNvZGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBPcGNvZGUge1xuICBwdWJsaWMgb2Zmc2V0ID0gMDtcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBoZWFwOiBIZWFwKSB7fVxuXG4gIGdldCBzaXplKCkge1xuICAgIGxldCByYXdUeXBlID0gdGhpcy5oZWFwLmdldGJ5YWRkcih0aGlzLm9mZnNldCk7XG4gICAgcmV0dXJuICgocmF3VHlwZSAmIE9wY29kZVNpemUuT1BFUkFORF9MRU5fTUFTSykgPj4gT3Bjb2RlU2l6ZS5BUkdfU0hJRlQpICsgMTtcbiAgfVxuXG4gIGdldCBpc01hY2hpbmUoKSB7XG4gICAgbGV0IHJhd1R5cGUgPSB0aGlzLmhlYXAuZ2V0YnlhZGRyKHRoaXMub2Zmc2V0KTtcbiAgICByZXR1cm4gcmF3VHlwZSAmIE9wY29kZVNpemUuTUFDSElORV9NQVNLO1xuICB9XG5cbiAgZ2V0IHR5cGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLmhlYXAuZ2V0YnlhZGRyKHRoaXMub2Zmc2V0KSAmIE9wY29kZVNpemUuVFlQRV9NQVNLKTtcbiAgfVxuXG4gIGdldCBvcDEoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAxKTtcbiAgfVxuXG4gIGdldCBvcDIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAyKTtcbiAgfVxuXG4gIGdldCBvcDMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcC5nZXRieWFkZHIodGhpcy5vZmZzZXQgKyAzKTtcbiAgfVxufVxuIl19","\nimport { WriteOnlyConstants, RuntimeConstants } from './constants';\nimport { Opcode } from './opcode';\nimport { assert } from \"@glimmer/util\";\nfunction encodeTableInfo(size, scopeSize, state) {\n    return size | scopeSize << 16 | state << 30;\n}\nfunction changeState(info, newState) {\n    return info | newState << 30;\n}\n/**\n * The Heap is responsible for dynamically allocating\n * memory in which we read/write the VM's instructions\n * from/to. When we malloc we pass out a VMHandle, which\n * is used as an indirect way of accessing the memory during\n * execution of the VM. Internally we track the different\n * regions of the memory in an int array known as the table.\n *\n * The table 32-bit aligned and has the following layout:\n *\n * | ... | hp (u32) |       info (u32)          |\n * | ... |  Handle  | Size | Scope Size | State |\n * | ... | 32-bits  | 16b  |    14b     |  2b   |\n *\n * With this information we effectively have the ability to\n * control when we want to free memory. That being said you\n * can not free during execution as raw address are only\n * valid during the execution. This means you cannot close\n * over them as you will have a bad memory access exception.\n */\nexport class Heap {\n    constructor(serializedHeap) {\n        this.placeholders = [];\n        this.offset = 0;\n        this.handle = 0;\n        if (serializedHeap) {\n            let { buffer, table, handle } = serializedHeap;\n            this.heap = new Uint16Array(buffer);\n            this.table = table;\n            this.offset = this.heap.length;\n            this.handle = handle;\n        } else {\n            this.heap = new Uint16Array(0x100000);\n            this.table = [];\n        }\n    }\n    push(item) {\n        this.heap[this.offset++] = item;\n    }\n    getbyaddr(address) {\n        return this.heap[address];\n    }\n    setbyaddr(address, value) {\n        this.heap[address] = value;\n    }\n    malloc() {\n        this.table.push(this.offset, 0);\n        let handle = this.handle;\n        this.handle += 2 /* ENTRY_SIZE */;\n        return handle;\n    }\n    finishMalloc(handle, scopeSize) {\n        let start = this.table[handle];\n        let finish = this.offset;\n        let instructionSize = finish - start;\n        let info = encodeTableInfo(instructionSize, scopeSize, 0 /* Allocated */);\n        this.table[handle + 1 /* INFO_OFFSET */] = info;\n    }\n    size() {\n        return this.offset;\n    }\n    // It is illegal to close over this address, as compaction\n    // may move it. However, it is legal to use this address\n    // multiple times between compactions.\n    getaddr(handle) {\n        return this.table[handle];\n    }\n    gethandle(address) {\n        this.table.push(address, encodeTableInfo(0, 0, 3 /* Pointer */));\n        let handle = this.handle;\n        this.handle += 2 /* ENTRY_SIZE */;\n        return handle;\n    }\n    sizeof(handle) {\n        if (false) {\n            let info = this.table[handle + 1 /* INFO_OFFSET */];\n            return info & 65535 /* SIZE_MASK */;\n        }\n        return -1;\n    }\n    scopesizeof(handle) {\n        let info = this.table[handle + 1 /* INFO_OFFSET */];\n        return (info & 1073676288 /* SCOPE_MASK */) >> 16;\n    }\n    free(handle) {\n        let info = this.table[handle + 1 /* INFO_OFFSET */];\n        this.table[handle + 1 /* INFO_OFFSET */] = changeState(info, 1 /* Freed */);\n    }\n    /**\n     * The heap uses the [Mark-Compact Algorithm](https://en.wikipedia.org/wiki/Mark-compact_algorithm) to shift\n     * reachable memory to the bottom of the heap and freeable\n     * memory to the top of the heap. When we have shifted all\n     * the reachable memory to the top of the heap, we move the\n     * offset to the next free position.\n     */\n    compact() {\n        let compactedSize = 0;\n        let { table, table: { length }, heap } = this;\n        for (let i = 0; i < length; i += 2 /* ENTRY_SIZE */) {\n            let offset = table[i];\n            let info = table[i + 1 /* INFO_OFFSET */];\n            let size = info & 65535 /* SIZE_MASK */;\n            let state = info & 3221225472 /* STATE_MASK */ >> 30;\n            if (state === 2 /* Purged */) {\n                    continue;\n                } else if (state === 1 /* Freed */) {\n                    // transition to \"already freed\" aka \"purged\"\n                    // a good improvement would be to reuse\n                    // these slots\n                    table[i + 1 /* INFO_OFFSET */] = changeState(info, 2 /* Purged */);\n                    compactedSize += size;\n                } else if (state === 0 /* Allocated */) {\n                    for (let j = offset; j <= i + size; j++) {\n                        heap[j - compactedSize] = heap[j];\n                    }\n                    table[i] = offset - compactedSize;\n                } else if (state === 3 /* Pointer */) {\n                    table[i] = offset - compactedSize;\n                }\n        }\n        this.offset = this.offset - compactedSize;\n    }\n    pushPlaceholder(valueFunc) {\n        let address = this.offset++;\n        this.heap[address] = 65535 /* MAX_SIZE */;\n        this.placeholders.push([address, valueFunc]);\n    }\n    patchPlaceholders() {\n        let { placeholders } = this;\n        for (let i = 0; i < placeholders.length; i++) {\n            let [address, getValue] = placeholders[i];\n            (false && assert(this.getbyaddr(address) === 65535 /* MAX_SIZE */, `expected to find a placeholder value at ${address}`));\n\n            this.setbyaddr(address, getValue());\n        }\n    }\n    capture() {\n        this.patchPlaceholders();\n        // Only called in eager mode\n        let buffer = slice(this.heap, 0, this.offset);\n        return {\n            handle: this.handle,\n            table: this.table,\n            buffer: buffer\n        };\n    }\n}\nexport class WriteOnlyProgram {\n    constructor(constants = new WriteOnlyConstants(), heap = new Heap()) {\n        this.constants = constants;\n        this.heap = heap;\n        this._opcode = new Opcode(this.heap);\n    }\n    opcode(offset) {\n        this._opcode.offset = offset;\n        return this._opcode;\n    }\n}\nexport class RuntimeProgram {\n    constructor(constants, heap) {\n        this.constants = constants;\n        this.heap = heap;\n        this._opcode = new Opcode(this.heap);\n    }\n    static hydrate(rawHeap, pool, resolver) {\n        let heap = new Heap(rawHeap);\n        let constants = new RuntimeConstants(resolver, pool);\n        return new RuntimeProgram(constants, heap);\n    }\n    opcode(offset) {\n        this._opcode.offset = offset;\n        return this._opcode;\n    }\n}\nexport class Program extends WriteOnlyProgram {}\nfunction slice(arr, start, end) {\n    if (arr instanceof Uint16Array) {\n        if (arr.slice !== undefined) {\n            return arr.slice(start, end).buffer;\n        }\n        let ret = new Uint16Array(end);\n        for (; start < end; start++) {\n            ret[start] = arr[start];\n        }\n        return ret.buffer;\n    }\n    return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","export default {\"id\":\"j7SGa6Pm\",\"block\":\"{\\\"symbols\\\":[\\\"root\\\"],\\\"statements\\\":[[4,\\\"each\\\",[[22,[\\\"roots\\\"]]],[[\\\"key\\\"],[\\\"id\\\"]],{\\\"statements\\\":[[4,\\\"in-element\\\",[[21,1,[\\\"parent\\\"]]],[[\\\"guid\\\",\\\"nextSibling\\\"],[\\\"%cursor:0%\\\",[21,1,[\\\"nextSibling\\\"]]]],{\\\"statements\\\":[[1,[26,\\\"component\\\",[[21,1,[\\\"component\\\"]]],null],false]],\\\"parameters\\\":[]},null]],\\\"parameters\\\":[1]},null]],\\\"hasEval\\\":false}\",\"meta\":{\"specifier\":\"template:/-application/application/src/templates/main\"}};","import { UpdatableReference } from \"@glimmer/component\";\nimport { VM, Arguments } from \"@glimmer/runtime\";\nimport { Opaque } from '@glimmer/interfaces';\n\n/** @internal */\nexport default function buildAction(vm: VM, _args: Arguments) {\n  let componentRef = vm.getSelf();\n  let args = _args.capture();\n\n  let actionFunc = args.positional.at(0).value() as Function;\n  if (typeof actionFunc !== 'function') {\n    throwNoActionError(actionFunc, args.positional.at(0));\n  }\n\n  return new UpdatableReference(function action(...invokedArgs) {\n    let curriedArgs = args.positional.value();\n    // Consume the action function that was already captured above.\n    curriedArgs.shift();\n\n    curriedArgs.push(...invokedArgs);\n\n    // Invoke the function with the component as the context, the curried\n    // arguments passed to `{{action}}`, and the arguments the bound function\n    // was invoked with.\n    actionFunc.apply(componentRef && componentRef.value(), curriedArgs);\n  });\n}\n\nfunction throwNoActionError(actionFunc: any, actionFuncReference: Opaque) {\n  let referenceInfo = debugInfoForReference(actionFuncReference);\n  throw new Error(`You tried to create an action with the {{action}} helper, but the first argument ${referenceInfo}was ${typeof actionFunc} instead of a function.`);\n}\n\n/** @internal */\nexport function debugInfoForReference(reference: any): string {\n  let message = '';\n  let parent;\n  let property;\n\n  if (reference === null || reference === undefined) { return message; }\n\n  if ('parent' in reference && 'property' in reference) {\n    parent = reference['parent'].value();\n    property = reference['property'];\n  } else if ('_parentValue' in reference && '_propertyKey' in reference) {\n    parent = reference['_parentValue'];\n    property = reference['_propertyKey'];\n  }\n\n  if (property !== undefined) {\n    message += `('${property}' on ${debugName(parent)}) `;\n  }\n\n  return message;\n}\n\nfunction debugName(obj: any) {\n  let objType = typeof obj;\n  if (obj === null || obj === undefined) {\n    return objType;\n  } else if (objType === 'number' || objType === 'boolean') {\n    return obj.toString();\n  } else {\n    if (obj['debugName']) {\n      return obj['debugName'];\n    }\n    try {\n      return JSON.stringify(obj);\n    } catch (e) { }\n    return obj.toString();\n  }\n}\n","/** @internal */\nexport default function ifHelper(params: any[]) {\n  return params[0] ? params[1] : params[2];\n}\n","import { CompileTimeLookup as ICompileTimeLookup, ICompilableTemplate } from '@glimmer/opcode-compiler';\nimport { ComponentDefinition as IComponentDefinition, Opaque, ComponentCapabilities, ProgramSymbolTable } from '@glimmer/interfaces';\nimport { Option, assert } from '@glimmer/util';\nimport { WithStaticLayout, ComponentManager } from '@glimmer/runtime';\n\nimport RuntimeResolver from './resolver';\nimport { Specifier } from './loader';\n\ntype ComponentDefinition = IComponentDefinition<ComponentManager<Opaque, Opaque>>;\n\nexport default class CompileTimeLookup implements ICompileTimeLookup<Specifier> {\n  constructor(private resolver: RuntimeResolver) {}\n\n  private getComponentDefinition(handle: number): ComponentDefinition {\n    let spec = this.resolver.resolve<Option<ComponentDefinition>>(handle);\n\n    assert(!!spec, `Couldn't find a template for ${handle}`);\n\n    return spec!;\n  }\n\n  getCapabilities(handle: number): ComponentCapabilities {\n    let definition = this.getComponentDefinition(handle);\n    let { manager, state } = definition!;\n    return manager.getCapabilities(state);\n  }\n\n  getLayout(handle: number): ICompilableTemplate<ProgramSymbolTable> {\n    let definition = this.getComponentDefinition(handle);\n    let { manager } = definition;\n    let invocation = (manager as WithStaticLayout<any, any, Specifier, RuntimeResolver>).getLayout(definition, this.resolver);\n\n    return {\n      compile() { return invocation.handle; },\n      symbolTable: invocation.symbolTable\n    };\n  }\n\n  lookupHelper(name: string, referrer: Specifier): Option<number> {\n    return this.resolver.lookupHelper(name, referrer);\n  }\n\n  lookupModifier(name: string, referrer: Specifier): Option<number> {\n    return this.resolver.lookupModifier(name, referrer);\n  }\n\n  lookupComponentDefinition(name: string, referrer: Specifier): Option<number> {\n    return this.resolver.lookupComponentHandle(name, referrer);\n  }\n\n  lookupPartial(name: string, referrer: Specifier): Option<number> {\n    return this.resolver.lookupPartial(name, referrer);\n  }\n}\n","import { TemplateIterator, Environment, ElementBuilder, templateFactory, DynamicScope } from '@glimmer/runtime';\nimport { Resolver } from '@glimmer/di';\nimport { Macros, LazyOpcodeBuilder, OpcodeBuilderConstructor } from '@glimmer/opcode-compiler';\nimport { Program, LazyConstants } from '@glimmer/program';\nimport { Opaque } from '@glimmer/interfaces';\nimport { PathReference } from '@glimmer/reference';\n\nimport Application, { Loader } from '../../application';\nimport mainTemplate from '../../templates/main';\nimport { actionHelper, ifHelper } from '../../helpers';\n\nimport RuntimeResolver from './resolver';\nimport CompileTimeLookup from './compile-time-lookup';\n\nexport interface Specifier {\n  specifier: string;\n  managerId?: string;\n};\n\n/**\n * The RuntimeCompilerLoader is used by Glimmer.js applications that perform the\n * final template compilation step client-side. It configures the compiler to\n * resolve templates, helpers and other objects from the runtime registry, and\n * enables just-in-time compilation of templates as they are encountered.\n *\n * @public\n */\nexport default class RuntimeCompilerLoader implements Loader {\n  constructor(public resolver: Resolver) {\n  }\n\n  async getTemplateIterator(app: Application, env: Environment, builder: ElementBuilder, dynamicScope: DynamicScope, self: PathReference<Opaque>): Promise<TemplateIterator> {\n    let resolver = new RuntimeResolver(app);\n    let program = new Program(new LazyConstants(resolver));\n    let macros = new Macros();\n    let lookup = new CompileTimeLookup(resolver);\n\n    let compileOptions = {\n      program,\n      macros,\n      resolver: lookup,\n      Builder: LazyOpcodeBuilder as OpcodeBuilderConstructor\n    };\n\n    resolver.setCompileOptions(compileOptions);\n\n    resolver.registerTemplate('main', mainTemplate);\n    resolver.registerInternalHelper('action', actionHelper);\n    resolver.registerHelper('if', ifHelper);\n\n    let mainLayout = templateFactory(mainTemplate).create(compileOptions);\n\n    return Promise.resolve(mainLayout.renderLayout({\n      env,\n      builder,\n      dynamicScope,\n      self\n    }));\n  }\n}\n","import { Cursor, clientBuilder, Environment, ElementBuilder } from \"@glimmer/runtime\";\nimport { Builder } from \"../application\";\n\n/**\n * A {@link Builder} that creates DOM elements when templates render.\n *\n * Use a DOMBuilder for Glimmer.js applications that do not use server-side\n * rendering. If you are using server-side rendering, the\n * {@link RehydratingBuilder} can be used to rehydrate existing DOM instead of\n * replacing it.\n *\n * @public\n */\nexport default class DOMBuilder implements Builder {\n  protected cursor: Cursor;\n\n  constructor({ element, nextSibling = null }: Cursor) {\n    this.cursor = { element, nextSibling };\n  }\n\n  getBuilder(env: Environment): ElementBuilder {\n    return clientBuilder(env, this.cursor);\n  }\n}\n","import { TemplateIterator, RenderResult } from '@glimmer/runtime';\nimport { Renderer } from '../application';\n\n/**\n * Performs a synchronous initial render of templates.\n *\n * @remarks\n *\n * The SyncRenderer will render a template as fast as possible, continuing to\n * work until the template has been completely rendered.\n *\n * While this delivers the fastest absolute rendering performance, large\n * templates may cause the main thread to be consumed for long periods of time,\n * leading to user-noticeable performance degradation, or jank.\n *\n * See also: {@link AsyncRenderer}\n *\n * @public\n */\nexport default class SyncRenderer implements Renderer {\n  result: RenderResult;\n\n  render(iterator: TemplateIterator): void {\n    // Iterate the template iterator, executing the compiled template program\n    // until there are no more instructions left to execute.\n    let result;\n    do {\n      result = iterator.next();\n    } while (!result.done);\n\n    this.result = result.value;\n  }\n\n  rerender(): void {\n    if (!this.result) {\n      throw new Error('Cannot re-render before initial render has completed');\n    }\n\n    this.result.rerender();\n  }\n}\n","import { RegistrationOptions } from './registry';\nimport { Factory } from './factory';\n\n// TODO - use symbol\nexport const OWNER = '__owner__';\n\nexport function getOwner(object: object): Owner {\n  return object[OWNER];\n}\n\nexport function setOwner(object: object, owner: Owner): void {\n  object[OWNER] = owner;\n}\n\nexport interface Owner {\n  identify(specifier: string, referrer?: string): string;\n\n  factoryFor(specifier: string, referrer?: string): Factory<any>;\n  \n  lookup(specifier: string, referrer?: string): any;\n}\n","export interface Specifier {\n  rootName?: string;\n  collection?: string;\n  namespace?: string;\n  name?: string;\n  type?: string;\n}\n\nexport function isSpecifierStringAbsolute(specifier: string): boolean {\n  let [type, path] = specifier.split(':');\n  return !!(type && path && path.indexOf('/') === 0 && path.split('/').length > 3);\n}\n\nexport function isSpecifierObjectAbsolute(specifier: Specifier): boolean {\n  return specifier.rootName !== undefined &&\n         specifier.collection !== undefined &&\n         specifier.name !== undefined &&\n         specifier.type !== undefined;\n}\n\nexport function serializeSpecifier(specifier: Specifier): string {\n  let type = specifier.type;\n  let path = serializeSpecifierPath(specifier);\n\n  if (path) {\n    return type + ':' + path;\n  } else {\n    return type;\n  }\n}\n\nexport function serializeSpecifierPath(specifier: Specifier): string {\n  let path = [];\n  if (specifier.rootName) {\n    path.push(specifier.rootName);\n  }\n  if (specifier.collection) {\n    path.push(specifier.collection);\n  }\n  if (specifier.namespace) {\n    path.push(specifier.namespace);\n  }\n  if (specifier.name) {\n    path.push(specifier.name);\n  }\n\n  if (path.length > 0) {\n    let fullPath = path.join('/');\n    if (isSpecifierObjectAbsolute(specifier)) {\n      fullPath = '/' + fullPath;\n    }\n    return fullPath;\n  }\n}\n\nexport function deserializeSpecifier(specifier: string): Specifier {\n  let obj: Specifier = {};\n\n  if (specifier.indexOf(':') > -1) {\n    let [type, path] = specifier.split(':');\n    obj.type = type;\n\n    let pathSegments;\n\n    if (path.indexOf('/') === 0) {\n      pathSegments = path.substr(1).split('/');\n      obj.rootName = pathSegments.shift();\n      obj.collection = pathSegments.shift();\n    } else {\n      pathSegments = path.split('/');\n    }\n\n    if (pathSegments.length > 0) {\n      obj.name = pathSegments.pop();\n\n      if (pathSegments.length > 0) {\n        obj.namespace = pathSegments.join('/');\n      }\n    }\n\n  } else {\n    obj.type = specifier;\n  }\n\n  return obj;\n}\n","export function assert(description: string, test: any) {\n  if (!test) {\n    throw new Error('Assertion Failed: ' + description);\n  }\n}\n","import { Specifier } from '@glimmer/di';\n\nexport function detectLocalResolutionCollection(specifier: Specifier): string {\n  let { namespace, collection } = specifier;\n\n  // Look for the local-most private collection contained in the namespace\n  // (which will appear closest to the end of the string)\n  let startPos = namespace.lastIndexOf('/-');\n  if (startPos > -1) {\n    startPos += 2;\n    let endPos = namespace.indexOf('/', startPos);\n    collection = namespace.slice(startPos, endPos > -1 ? endPos : undefined);\n  }\n\n  return collection;\n}\n","import {\n  Resolver as IResolver,\n  Specifier,\n  isSpecifierStringAbsolute,\n  isSpecifierObjectAbsolute,\n  deserializeSpecifier,\n  serializeSpecifier\n} from '@glimmer/di';\nimport { assert } from './utils/debug';\nimport { detectLocalResolutionCollection } from './utils/specifiers';\nimport { ModuleRegistry } from './module-registry';\nimport { ResolverConfiguration } from './resolver-configuration';\n\nexport default class Resolver implements IResolver {\n  public config: ResolverConfiguration;\n  public registry: ModuleRegistry;\n\n  constructor(config: ResolverConfiguration, registry: ModuleRegistry) {\n    this.config = config;\n    this.registry = registry;\n  }\n\n  identify(specifier: string, referrer?: string): string {\n    if (isSpecifierStringAbsolute(specifier)) {\n      return specifier;\n    }\n\n    let s = deserializeSpecifier(specifier);\n    let result: string;\n\n    if (referrer) {\n      let r = deserializeSpecifier(referrer);\n\n      if (isSpecifierObjectAbsolute(r)) {\n        assert('Specifier must not include a rootName, collection, or namespace when combined with an absolute referrer', s.rootName === undefined && s.collection === undefined && s.namespace === undefined);\n\n        s.rootName = r.rootName;\n        s.collection = r.collection;\n        let definitiveCollection = this._definitiveCollection(s.type);\n\n        if (!s.name) {\n          /*\n           * For specifiers without a name use the referrer's name and\n           * do not fallback to any other resolution rules.\n           */\n          s.namespace = r.namespace;\n          s.name = r.name;\n          return this._serializeAndVerify(s);\n        }\n\n        s.namespace = r.namespace ? r.namespace + '/' + r.name : r.name;\n        if (detectLocalResolutionCollection(s) === definitiveCollection) {\n          /*\n           * For specifiers with a name, try local resolution. Based on\n           * the referrer.\n           */\n          if (result = this._serializeAndVerify(s)) { return result; }\n        }\n\n        // Look for a private collection in the referrer's namespace\n        if (definitiveCollection) {\n          s.namespace += '/-' + definitiveCollection;\n          if (result = this._serializeAndVerify(s)) { return result; }\n        }\n\n        // Because local and private resolution has failed, clear all but `name` and `type`\n        // to proceed with top-level resolution\n        s.rootName = s.collection = s.namespace = undefined;\n      } else {\n        assert('Referrer must either be \"absolute\" or include a `type` to determine the associated type', r.type);\n\n        // Look in the definitive collection for the associated type\n        s.collection = this._definitiveCollection(r.type);\n        if (!s.namespace) {\n          s.namespace = r.rootName;\n        }\n        assert(`'${r.type}' does not have a definitive collection`, s.collection);\n      }\n    }\n\n    // If the collection is unspecified, use the definitive collection for the `type`\n    if (!s.collection) {\n      s.collection = this._definitiveCollection(s.type);\n      assert(`'${s.type}' does not have a definitive collection`, s.collection);\n    }\n\n    if (!s.rootName) {\n      // If the root name is unspecified, try the app's `rootName` first\n      s.rootName = this.config.app.rootName || 'app';\n      if (result = this._serializeAndVerify(s)) { return result; }\n\n      // Then look for an addon with a matching `rootName`\n      if (s.namespace) {\n        s.rootName = s.namespace;\n        s.namespace = undefined;\n\n      } else {\n        s.rootName = s.name;\n        s.name = 'main';\n      }\n    }\n\n    if (result = this._serializeAndVerify(s)) { return result; }\n  }\n\n  retrieve(specifier: string): any {\n    return this.registry.get(specifier);\n  }\n\n  resolve(specifier: string, referrer?: string): any {\n    let id = this.identify(specifier, referrer);\n    if (id) {\n      return this.retrieve(id);\n    }\n  }\n\n  private _definitiveCollection(type: string): string {\n    let typeDef = this.config.types[type];\n    assert(`'${type}' is not a recognized type`, typeDef);\n    return typeDef.definitiveCollection;\n  }\n\n  private _serializeAndVerify(specifier: Specifier): string {\n    let serialized = serializeSpecifier(specifier);\n    if (this.registry.has(serialized)) {\n      return serialized;\n    }\n  }\n}\n","import { ModuleRegistry } from '../module-registry';\nimport { Dict } from '@glimmer/di';\n\nexport default class BasicRegistry implements ModuleRegistry {\n  private _entries: Dict<any>;\n\n  constructor(entries: Dict<any> = {}) {\n    this._entries = entries;\n  }\n\n  has(specifier: string): boolean {\n    return specifier in this._entries;\n  }\n\n  get(specifier: string): any {\n    return this._entries[specifier];\n  }\n}\n","import Component, { tracked } from '@glimmer/component';\n\nexport default class UiButton extends Component {\n  @tracked public clickCount = 0;\n\n  @tracked('clickCount')\n  get hasClicks() {\n    return this.clickCount > 0;\n  }\n\n  public click() {\n    this.clickCount = this.clickCount + 1;\n  }\n}\n","export default {\"id\":\"ZVitZR6s\",\"block\":\"{\\\"symbols\\\":[],\\\"statements\\\":[[6,\\\"button\\\"],[10,\\\"class\\\",\\\"button\\\"],[11,\\\"onclick\\\",[26,\\\"action\\\",[[22,[\\\"click\\\"]]],null],null],[8],[0,\\\"\\\\n\\\"],[4,\\\"if\\\",[[22,[\\\"hasClicks\\\"]]],null,{\\\"statements\\\":[[0,\\\"    click count: \\\"],[1,[20,\\\"clickCount\\\"],false],[0,\\\"\\\\n\\\"]],\\\"parameters\\\":[]},{\\\"statements\\\":[[0,\\\"    click me\\\\n\\\"]],\\\"parameters\\\":[]}],[9],[0,\\\"\\\\n\\\"]],\\\"hasEval\\\":false}\",\"meta\":{\"specifier\":\"template:/ui-button/components/UiButton\"}};","import { default as __ui_components_UiButton_component__ } from '../src/ui/components/UiButton/component';\nimport { default as __ui_components_UiButton_template__ } from '../src/ui/components/UiButton/template';\nexport default {'component:/ui-button/components/UiButton': __ui_components_UiButton_component__,'template:/ui-button/components/UiButton': __ui_components_UiButton_template__};\n","export default {\"app\":{\"name\":\"ui-button\",\"rootName\":\"ui-button\"},\"types\":{\"application\":{\"definitiveCollection\":\"main\"},\"component\":{\"definitiveCollection\":\"components\"},\"component-test\":{\"unresolvable\":true},\"helper\":{\"definitiveCollection\":\"components\"},\"helper-test\":{\"unresolvable\":true},\"renderer\":{\"definitiveCollection\":\"main\"},\"template\":{\"definitiveCollection\":\"components\"}},\"collections\":{\"main\":{\"types\":[\"application\",\"renderer\"]},\"components\":{\"group\":\"ui\",\"types\":[\"component\",\"component-test\",\"template\",\"helper\",\"helper-test\"],\"defaultType\":\"component\",\"privateCollections\":[\"utils\"]},\"styles\":{\"group\":\"ui\",\"unresolvable\":true},\"utils\":{\"unresolvable\":true}}};\n","import Application, { DOMBuilder, RuntimeCompilerLoader, SyncRenderer } from '@glimmer/application';\nimport Resolver, { BasicModuleRegistry } from '@glimmer/resolver';\nimport moduleMap from '../config/module-map';\nimport resolverConfiguration from '../config/resolver-configuration';\n\nexport default class App extends Application {\n  constructor() {\n    let moduleRegistry = new BasicModuleRegistry(moduleMap);\n    let resolver = new Resolver(resolverConfiguration, moduleRegistry);\n    const element = document.body;\n\n    super({\n      builder: new DOMBuilder({ element, nextSibling: null }),\n      loader: new RuntimeCompilerLoader(resolver),\n      renderer: new SyncRenderer(),\n      resolver,\n      rootName: resolverConfiguration.app.rootName\n    });\n  }\n}\n","import { ComponentManager, setPropertyDidChange } from '@glimmer/component';\nimport initializeCustomElements from '@glimmer/web-component';\nimport App from './main';\n\nconst app = new App();\nconst containerElement = document.getElementById('app');\n\nsetPropertyDidChange(() => {\n  app.scheduleRerender();\n});\n\napp.registerInitializer({\n  initialize(registry) {\n    registry.register(`component-manager:/${app.rootName}/component-managers/main`, ComponentManager);\n  }\n});\n\napp.renderComponent('UiButton', containerElement, null);\n\napp.boot();\ninitializeCustomElements(app, { 'ui-button': 'UiButton' });\n"],"names":["assert","ConditionalReference","Ops","WireFormat.Ops","ClientSide.Ops","isGet","WireFormat.isGet","isMaybeLocal","WireFormat.isMaybeLocal","PLACEHOLDER_HANDLE","map","SVG_NAMESPACE","shouldApplyFix","bounds","Stack","encodeSmi","decodeSmi","WasmStack","isSpecifierObjectAbsolute","serializeSpecifier","serializeSpecifierPath","__ui_components_UiButton_component__","__ui_components_UiButton_template__"],"mappings":"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"}